import type { Response, BodyInit, RequestInit } from "node-fetch";
import fetch from "make-fetch-happen";
import { OperationOptions } from "retry";
import { BasicHeaders, PathParameters, QueryParameters } from "./resource";
import { BaseClient } from "./client";
export { DefaultCache } from "make-fetch-happen/cache";
export { Response };
export declare type SdkFetchOptions = {
    client: BaseClient;
    path: string;
    pathParameters?: PathParameters;
    queryParameters?: QueryParameters;
    headers?: BasicHeaders;
    rawResponse?: boolean;
    retrySettings?: OperationOptions;
    fetchOptions?: RequestInit;
    body?: unknown;
};
export declare type SdkFetchOptionsNoBody = Omit<SdkFetchOptions, "body">;
export declare type SdkFetchOptionsWithBody = SdkFetchOptionsNoBody & Required<Pick<SdkFetchOptions, "body">>;
/**
 * Extends the Error class with the the error being a combination of status code
 * and text retrieved from the response.
 *
 * @class ResponseError
 * @extends Error
 */
export declare class ResponseError extends Error {
    response: Response;
    constructor(response: Response);
}
/**
 * Returns the dto object from the given response object on status codes 2xx and
 * 304 (Not Modified). The fetch library make-fetch-happen returns the cached object
 * on 304 response. This method throws error on any other 3xx responses that are not
 * automatically handled by make-fetch-happen.
 *
 * @remarks
 * Refer to https://en.wikipedia.org/wiki/List_of_HTTP_status_codes for more information
 * on HTTP status codes.
 *
 * @param response - A response object either containing a dto or an error
 * @returns The DTO wrapped in a promise
 *
 * @throws a ResponseError if the status code of the response is neither 2XX nor 304
 */
export declare function getObjectFromResponse(response: Response): Promise<object>;
/**
 * Log request/fetch details.
 *
 * @param resource The resource being requested
 * @param fetchOptions The options to the fetch call
 */
export declare function logFetch(resource: string, fetchOptions: fetch.FetchOptions): void;
/**
 * Log response details.
 *
 * @param response The response received
 */
export declare const logResponse: (response: Response) => void;
export declare const getHeaders: (options?: {
    headers?: BasicHeaders;
}) => BasicHeaders;
export declare const mergeHeaders: (...allHeaders: BasicHeaders[]) => BasicHeaders;
/**
 * Transforms a request body into a format matching the media type of the request.
 * @param body Unparsed request body
 * @param request Request data
 * @returns Parsed request body that can be used by `fetch`.
 */
export declare const transformRequestBody: (body: unknown, request: fetch.FetchOptions) => BodyInit;
/**
 * Performs an HTTP GET operation with the options passed.
 *
 * @param options - Details to be used for making the HTTP call and processing
 * the response
 * @returns Either the Response object or the DTO inside it wrapped in a promise,
 * depending upon options.rawResponse
 */
export declare function _get(options: SdkFetchOptionsNoBody): Promise<object>;
/**
 * Performs an HTTP DELETE operation with the options passed.
 *
 * @param options - Details to be used for making the HTTP call and processing
 * the response
 * @returns Either the Response object or the DTO inside it wrapped in a promise,
 * depending upon options.rawResponse
 */
export declare function _delete(options: SdkFetchOptionsNoBody): Promise<object>;
/**
 * Performs an HTTP PATCH operation with the options passed.
 *
 * @param options - Details to be used for making the HTTP call and processing
 * the response
 * @returns Either the Response object or the DTO inside it wrapped in a promise,
 * depending upon options.rawResponse
 */
export declare function _patch(options: SdkFetchOptionsWithBody): Promise<object>;
/**
 * Performs an HTTP POST operation with the options passed.
 *
 * @param options - Details to be used for making the HTTP call and processing
 * the response
 * @returns Either the Response object or the DTO inside it wrapped in a promise,
 * depending upon options.rawResponse
 */
export declare function _post(options: SdkFetchOptionsWithBody): Promise<object>;
/**
 * Performs an HTTP PUT operation with the options passed.
 *
 * @param options - Details to be used for making the HTTP call and processing
 * the response
 * @returns Either the Response object or the DTO inside it wrapped in a promise,
 * depending upon options.rawResponse
 */
export declare function _put(options: SdkFetchOptionsWithBody): Promise<object>;
