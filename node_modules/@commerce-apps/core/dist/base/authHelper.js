"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShopperToken = exports.stripBearer = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const jsonwebtoken_1 = require("jsonwebtoken");
/**
 * Strip "Bearer " from the passed header.
 *
 * @param {string} header - A Bearer token
 * @returns {string} The token after stripping "Bearer "
 */
function stripBearer(header) {
    return header.replace("Bearer ", "").trim();
}
exports.stripBearer = stripBearer;
/**
 * Implements ShopperJWT auth scheme. Gets ShopperJWT Bearer tokens of type
 * `guest` and `credentials`.
 *
 * @class ShopperToken
 * @implements {IAuthToken}
 */
class ShopperToken {
    constructor(dto, token) {
        this.rawToken = token;
        this.decodedToken = jsonwebtoken_1.decode(this.rawToken);
        this.customerInfo = dto;
    }
    /**
     * Returns the JWT.
     *
     * @returns {string} JWT
     *
     * @memberof ShopperToken
     */
    getAuthToken() {
        return this.rawToken;
    }
    /**
     * Returns a Bearer token i.e. `Bearer <JWT>`.
     *
     * @returns {string} The JWT with "Bearer " added to the front
     *
     * @memberof ShopperToken
     */
    getBearerHeader() {
        return `Bearer ${this.rawToken}`;
    }
    /**
     * Retrieves the customer information.
     *
     * @returns Customer information this object is instantiated with
     */
    getCustomerInfo() {
        return this.customerInfo;
    }
}
exports.ShopperToken = ShopperToken;
//# sourceMappingURL=authHelper.js.map