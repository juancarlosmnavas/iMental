"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Resource = void 0;
const tslib_1 = require("tslib");
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const qs_1 = tslib_1.__importDefault(require("qs"));
/**
 * A class to render a flattened URL from the parts including template
 * parameters. Out of the various options to render an array in a query string,
 * this class repeats the value for each element of the array,
 * i.e. { a: [1, 2]} => "?a=1&a=2".
 *
 * @class Resource
 */
class Resource {
    constructor(baseUri, baseUriParameters = {}, path = "", pathParameters = {}, queryParameters = {}) {
        this.baseUri = baseUri;
        this.baseUriParameters = baseUriParameters;
        this.path = path;
        this.pathParameters = pathParameters;
        this.queryParameters = queryParameters;
    }
    /**
     * Substitutes template parameters in the path with matching parameters.
     *
     * @param path - String containing template parameters
     * @param parameters - All the parameters that should substitute the template
     * parameters
     * @returns Path with actual parameters
     */
    substitutePathParameters(path = "", parameters = {}) {
        return path.replace(/\{([^}]+)\}/g, (_entireMatch, param) => {
            if (parameters.hasOwnProperty(param) && parameters[param] !== undefined) {
                return parameters[param];
            }
            throw new Error(`Failed to find a value for required path parameter '${param}'`);
        });
    }
    /**
     * Create a url from a baseUri, path and query parameters.
     *
     * @returns Rendered URL
     */
    toString() {
        const renderedBaseUri = this.substitutePathParameters(this.baseUri, this.baseUriParameters);
        const renderedPath = this.substitutePathParameters(this.path, this.pathParameters);
        const queryString = qs_1.default.stringify(this.queryParameters, {
            arrayFormat: "repeat",
        });
        return `${renderedBaseUri}${renderedPath}${queryString ? "?" : ""}${queryString}`;
    }
}
exports.Resource = Resource;
//# sourceMappingURL=resource.js.map