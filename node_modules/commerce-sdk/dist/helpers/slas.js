/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.logout =
  exports.refreshAccessTokenPrivate =
  exports.refreshAccessToken =
  exports.loginRegisteredUserB2C =
  exports.loginRegisteredUserB2Cprivate =
  exports.loginGuestUser =
  exports.loginGuestUserPrivate =
  exports.authorize =
  exports.generateCodeChallenge =
  exports.createCodeVerifier =
  exports.getCodeAndUsidFromUrl =
  exports.stringToBase64 =
    void 0;
const tslib_1 = require("tslib");
/* eslint-disable tsdoc/syntax, @typescript-eslint/camelcase  */
const nanoid_1 = require("nanoid");
const url_1 = require("url");
const core_1 = require("@commerce-apps/core");
/**
 * Converts a string into Base64 encoding
 * @param unencoded - A string to be encoded
 * @returns Base64 encoded string
 */
exports.stringToBase64 = (unencoded) =>
  Buffer.from(unencoded).toString("base64");
/**
 * Parse out the code and usid from a redirect url
 * @param urlString - A url that contains `code` and `usid` query parameters, typically returned when calling a Shopper Login endpoint
 * @returns An object containing the code and usid.
 */
exports.getCodeAndUsidFromUrl = (urlString) => {
  let _a, _b;
  const url = new url_1.URL(urlString);
  const urlParams = new url_1.URLSearchParams(url.search);
  const usid = (_a = urlParams.get("usid")) !== null && _a !== void 0 ? _a : "";
  const code = (_b = urlParams.get("code")) !== null && _b !== void 0 ? _b : "";
  return {
    code,
    usid,
  };
};
/**
 * Creates a random string to use as a code verifier. This code is created by the client and sent with both the authorization request (as a code challenge) and the token request.
 * @returns code verifier
 */
exports.createCodeVerifier = () => nanoid_1.nanoid(128);
/**
 * Encodes a code verifier to a code challenge to send to the authorization endpoint
 * @param codeVerifier - random string to use as a code verifier
 * @returns code challenge
 */
exports.generateCodeChallenge = (codeVerifier) =>
  tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const urlSafe = (input) =>
      input.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
    const crypto = yield Promise.resolve().then(() =>
      tslib_1.__importStar(require("crypto"))
    );
    const challenge = urlSafe(
      crypto.default.createHash("sha256").update(codeVerifier).digest("base64")
    );
    if (challenge.length === 0) {
      throw new Error("Problem generating code challenge");
    }
    return challenge;
  });
/**
 * Wrapper for the authorization endpoint. For federated login (3rd party IDP non-guest), the caller should redirect the user to the url in the url field of the returned object. The url will be the login page for the 3rd party IDP and the user will be sent to the redirectURI on success. Guest sessions return the code and usid directly with no need to redirect.
 * @param slasClient - a configured instance of the ShopperLogin SDK client
 * @param codeVerifier - random string created by client app to use as a secret in the request
 * @param parameters - Request parameters used by the `authorizeCustomer` endpoint.
 * @param parameters.redirectURI - the location the client will be returned to after successful login with 3rd party IDP. Must be registered in SLAS.
 * @param parameters.hint? - optional string to hint at a particular IDP. Guest sessions are created by setting this to 'guest'
 * @param parameters.usid? - optional saved SLAS user id to link the new session to a previous session
 * @returns login url, user id and authorization code if available
 */
function authorize(slasClient, codeVerifier, parameters) {
  let _a;
  return tslib_1.__awaiter(this, void 0, void 0, function* () {
    const codeChallenge = yield exports.generateCodeChallenge(codeVerifier);
    const options = {
      parameters: Object.assign(
        Object.assign(
          Object.assign(
            {
              client_id: slasClient.clientConfig.parameters.clientId,
              code_challenge: codeChallenge,
            },
            parameters.hint && { hint: parameters.hint }
          ),
          {
            organizationId: slasClient.clientConfig.parameters.organizationId,
            redirect_uri: parameters.redirectURI,
            response_type: "code",
          }
        ),
        parameters.usid && { usid: parameters.usid }
      ),
      fetchOptions: {
        // We do not want to redirect to redirectURI so manually control redirect
        redirect: "manual",
      },
    };
    const response = yield slasClient.authorizeCustomer(options, true);
    if (response.status !== 303) {
      throw new core_1.ResponseError(response);
    }
    const redirectUrl =
      ((_a = response.headers) === null || _a === void 0
        ? void 0
        : _a.get("location")) || response.url;
    return Object.assign(
      { url: redirectUrl },
      exports.getCodeAndUsidFromUrl(redirectUrl)
    );
  });
}
exports.authorize = authorize;
/**
 * A single function to execute the ShopperLogin Private Client Guest Login as described in the [API documentation](https://developer.salesforce.com/docs/commerce/commerce-api/guide/slas-private-client.html).
 * @param slasClient - a configured instance of the ShopperLogin SDK client
 * @param credentials - client secret used for authentication
 * @param credentials.clientSecret - secret associated with client ID
 * @param usid? - optional Unique Shopper Identifier to enable personalization
 * @returns TokenResponse
 */
function loginGuestUserPrivate(slasClient, credentials, usid) {
  return tslib_1.__awaiter(this, void 0, void 0, function* () {
    const authorization = `Basic ${exports.stringToBase64(
      `${slasClient.clientConfig.parameters.clientId}:${credentials.clientSecret}`
    )}`;
    const options = {
      headers: {
        Authorization: authorization,
      },
      body: Object.assign(
        { grant_type: "client_credentials" },
        usid && { usid: usid }
      ),
    };
    return slasClient.getAccessToken(options);
  });
}
exports.loginGuestUserPrivate = loginGuestUserPrivate;
/**
 * A single function to execute the ShopperLogin Public Client Guest Login with proof key for code exchange flow as described in the [API documentation](https://developer.salesforce.com/docs/commerce/commerce-api/guide/slas-public-client.html).
 * @param slasClient a configured instance of the ShopperLogin SDK client.
 * @param parameters - parameters to pass in the API calls.
 * @param parameters.redirectURI - Per OAuth standard, a valid app route. Must be listed in your SLAS configuration. On server, this will not be actually called
 * @param parameters.usid? - Unique Shopper Identifier to enable personalization.
 * @returns TokenResponse
 */
function loginGuestUser(slasClient, parameters) {
  return tslib_1.__awaiter(this, void 0, void 0, function* () {
    const codeVerifier = exports.createCodeVerifier();
    const authResponse = yield authorize(
      slasClient,
      codeVerifier,
      Object.assign(
        { redirectURI: parameters.redirectURI, hint: "guest" },
        parameters.usid && { usid: parameters.usid }
      )
    );
    const tokenBody = {
      client_id: slasClient.clientConfig.parameters.clientId,
      code: authResponse.code,
      code_verifier: codeVerifier,
      grant_type: "authorization_code_pkce",
      redirect_uri: parameters.redirectURI,
      usid: authResponse.usid,
    };
    return slasClient.getAccessToken({ body: tokenBody });
  });
}
exports.loginGuestUser = loginGuestUser;
/**
 * A single function to execute the ShopperLogin Private Client Registered User B2C Login as described in the [API documentation](https://developer.salesforce.com/docs/commerce/commerce-api/guide/slas-private-client.html).
 * @param slasClient - a configured instance of the ShopperLogin SDK client.
 * @param credentials - the shopper username and password for login and client secret for additional authentication
 * @param credentials.username - the id of the user to login with
 * @param credentials.password - the password of the user to login with
 * @param credentials.clientSecret - secret associated with client ID
 * @param parameters - parameters to pass in the API calls.
 * @param parameters.redirectURI - Per OAuth standard, a valid app route. Must be listed in your SLAS configuration. On server, this will not be actually called
 * @param parameters.usid? - optional Unique Shopper Identifier to enable personalization
 * @returns TokenResponse
 */
function loginRegisteredUserB2Cprivate(slasClient, credentials, parameters) {
  let _a;
  return tslib_1.__awaiter(this, void 0, void 0, function* () {
    const codeVerifier = exports.createCodeVerifier();
    const codeChallenge = yield exports.generateCodeChallenge(codeVerifier);
    const authHeaderUserPass = `Basic ${exports.stringToBase64(
      `${credentials.username}:${credentials.password}`
    )}`;
    const optionsLogin = {
      headers: {
        Authorization: authHeaderUserPass,
      },
      body: Object.assign(
        {
          code_challenge: codeChallenge,
          channel_id: slasClient.clientConfig.parameters.siteId,
          client_id: slasClient.clientConfig.parameters.clientId,
          redirect_uri: parameters.redirectURI,
        },
        parameters.usid && { usid: parameters.usid }
      ),
      fetchOptions: {
        // We do not want to redirect to redirectURI so manually control redirect
        redirect: "manual",
      },
    };
    const response = yield slasClient.authenticateCustomer(optionsLogin, true);
    if (response.status !== 303) {
      throw new core_1.ResponseError(response);
    }
    const redirectUrl =
      ((_a = response.headers) === null || _a === void 0
        ? void 0
        : _a.get("location")) || response.url;
    const authResponse = exports.getCodeAndUsidFromUrl(redirectUrl);
    const authHeaderIdSecret = `Basic ${exports.stringToBase64(
      `${slasClient.clientConfig.parameters.clientId}:${credentials.clientSecret}`
    )}`;
    const optionsToken = {
      headers: {
        Authorization: authHeaderIdSecret,
      },
      body: Object.assign(
        {
          grant_type: "authorization_code_pkce",
          code_verifier: codeVerifier,
          code: authResponse.code,
          client_id: slasClient.clientConfig.parameters.clientId,
          redirect_uri: parameters.redirectURI,
        },
        parameters.usid && { usid: parameters.usid }
      ),
    };
    return slasClient.getAccessToken(optionsToken);
  });
}
exports.loginRegisteredUserB2Cprivate = loginRegisteredUserB2Cprivate;
/**
 * A single function to execute the ShopperLogin Private Client Registered User B2C Login with proof key for code exchange flow as described in the [API documentation](https://developer.salesforce.com/docs/commerce/commerce-api/guide/slas-public-client.html).
 * @param slasClient a configured instance of the ShopperLogin SDK client.
 * @param credentials - the id and password to login with.
 * @param credentials.username - the id of the user to login with.
 * @param credentials.password - the password of the user to login with.
 * @param parameters - parameters to pass in the API calls.
 * @param parameters.redirectURI - Per OAuth standard, a valid app route. Must be listed in your SLAS configuration. On server, this will not be actually called. On browser, this will be called, but ignored.
 * @param parameters.usid? - Unique Shopper Identifier to enable personalization.
 * @returns TokenResponse
 */
function loginRegisteredUserB2C(slasClient, credentials, parameters) {
  let _a;
  return tslib_1.__awaiter(this, void 0, void 0, function* () {
    const codeVerifier = exports.createCodeVerifier();
    const codeChallenge = yield exports.generateCodeChallenge(codeVerifier);
    const authorization = `Basic ${exports.stringToBase64(
      `${credentials.username}:${credentials.password}`
    )}`;
    const options = {
      headers: {
        Authorization: authorization,
      },
      parameters: {
        organizationId: slasClient.clientConfig.parameters.organizationId,
      },
      body: Object.assign(
        {
          redirect_uri: parameters.redirectURI,
          client_id: slasClient.clientConfig.parameters.clientId,
          code_challenge: codeChallenge,
          channel_id: slasClient.clientConfig.parameters.siteId,
        },
        parameters.usid && { usid: parameters.usid }
      ),
      fetchOptions: {
        // We do not want to redirect to redirectURI so manually control redirect
        redirect: "manual",
      },
    };
    const response = yield slasClient.authenticateCustomer(options, true);
    if (response.status !== 303) {
      throw new core_1.ResponseError(response);
    }
    const redirectUrl =
      ((_a = response.headers) === null || _a === void 0
        ? void 0
        : _a.get("location")) || response.url;
    const authResponse = exports.getCodeAndUsidFromUrl(redirectUrl);
    const tokenBody = {
      grant_type: "authorization_code_pkce",
      code_verifier: codeVerifier,
      code: authResponse.code,
      client_id: slasClient.clientConfig.parameters.clientId,
      redirect_uri: parameters.redirectURI,
      usid: authResponse.usid,
    };
    return slasClient.getAccessToken({ body: tokenBody });
  });
}
exports.loginRegisteredUserB2C = loginRegisteredUserB2C;
/**
 * Exchange a refresh token for a new access token.
 * @param slasClient - a configured instance of the ShopperLogin SDK client.
 * @param parameters - parameters to pass in the API calls.
 * @param parameters.refreshToken - a valid refresh token to exchange for a new access token (and refresh token).
 * @returns TokenResponse
 */
function refreshAccessToken(slasClient, parameters) {
  const body = {
    grant_type: "refresh_token",
    refresh_token: parameters.refreshToken,
    client_id: slasClient.clientConfig.parameters.clientId,
  };
  return slasClient.getAccessToken({ body });
}
exports.refreshAccessToken = refreshAccessToken;
/**
 * Exchange a refresh token for a new access token.
 * @param slasClient - a configured instance of the ShopperLogin SDK client.
 * @param credentials - client secret used for authentication
 * @param credentials.clientSecret - secret associated with client ID
 * @param parameters - parameters to pass in the API calls.
 * @param parameters.refreshToken - a valid refresh token to exchange for a new access token (and refresh token).
 * @returns TokenResponse
 */
function refreshAccessTokenPrivate(slasClient, credentials, parameters) {
  const authorization = `Basic ${exports.stringToBase64(
    `${slasClient.clientConfig.parameters.clientId}:${credentials.clientSecret}`
  )}`;
  const options = {
    headers: {
      Authorization: authorization,
    },
    body: {
      grant_type: "refresh_token",
      refresh_token: parameters.refreshToken,
    },
  };
  return slasClient.getAccessToken(options);
}
exports.refreshAccessTokenPrivate = refreshAccessTokenPrivate;
/**
 * Logout a shopper. The shoppers access token and refresh token will be revoked and if the shopper authenticated with ECOM the OCAPI JWT will also be revoked.
 * @param slasClient - a configured instance of the ShopperLogin SDK client.
 * @param parameters - parameters to pass in the API calls.
 * @param parameters.accessToken - a valid access token to exchange for a new access token (and refresh token).
 * @param parameters.refreshToken - a valid refresh token to exchange for a new access token (and refresh token).
 * @returns TokenResponse
 */
function logout(slasClient, parameters) {
  return slasClient.logoutCustomer({
    headers: {
      Authorization: `Bearer ${parameters.accessToken}`,
    },
    parameters: {
      refresh_token: parameters.refreshToken,
      client_id: slasClient.clientConfig.parameters.clientId,
      channel_id: slasClient.clientConfig.parameters.siteId,
    },
  });
}
exports.logout = logout;
//# sourceMappingURL=slas.js.map
