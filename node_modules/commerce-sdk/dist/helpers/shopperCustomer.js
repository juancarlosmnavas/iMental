/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getShopperToken = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@commerce-apps/core");
const sdk = tslib_1.__importStar(require("../"));
/**
 * This wraps the parameters for the authorization call to retrieve a token.
 * That call can be made directly, this is here just for convenience
 * ```ts
 * const clientConfig: ClientConfig = {
 *  parameters: {
 *      clientId: "XXXXXX",
 *      organizationId: "XXXX",
 *      shortCode: "XXX",
 *      siteId: "XX"
 *  }
 * };
 * helpers.getShopperToken(clientConfig, { type: "guest" })
 * ```
 * @param clientConfig - Client configuration properties
 * @param body - Post body required for authorization
 * @returns the retrieved Shopper token
 */
function getShopperToken(clientConfig, body) {
  return tslib_1.__awaiter(this, void 0, void 0, function* () {
    const client = new sdk.Customer.ShopperCustomers(clientConfig);
    const response = yield client.authorizeCustomer({ body }, true);
    if (!response.ok) {
      throw new core_1.ResponseError(response);
    }
    const dto = yield core_1.getObjectFromResponse(response);
    return new core_1.ShopperToken(
      dto,
      core_1.stripBearer(response.headers.get("Authorization"))
    );
  });
}
exports.getShopperToken = getShopperToken;
//# sourceMappingURL=shopperCustomer.js.map
