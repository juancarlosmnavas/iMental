import { BaseClient, ClientConfig, Response } from "@commerce-apps/core";
import type { OperationOptions } from "retry";
import type { RequestInit } from "node-fetch";
export declare namespace ShopperLogin {
    export type LoginRequest = {
        client_id?: string;
        response_type?: string;
        redirect_uri: string;
        state?: string;
        scope?: string;
        usid?: string;
        channel_id: string;
        code_challenge: string;
    } & {
        [key: string]: any;
    };
    export type TrustedAgentTokenRequest = {
        agent_id: string;
        client_id: string;
        channel_id: string;
        code_verifier: string;
        grant_type: string;
        login_id: string;
        idp_origin: string;
    } & {
        [key: string]: any;
    };
    export type IntrospectResponse = {
        active: boolean;
        scope: string;
        client_id: string;
        sub: string;
        exp: number;
        username: string;
        token_type: string;
    } & {
        [key: string]: any;
    };
    export type PasswordlessLoginRequest = {
        user_id: string;
        mode: string;
        locale?: string;
        usid?: string;
        channel_id: string;
        callback_uri?: string;
    } & {
        [key: string]: any;
    };
    export type CredQualityUserResponse = {
        tenantId: string;
        username: string;
        email: string;
        credQualityMeasure: number;
        pwdStrengthMeasure: number;
        pwdQualityMeasure: number;
        credChangeCount: number;
        loginCount: number;
        lastLoginDatetime: any;
        lastCredCheckDatetime: any;
    } & {
        [key: string]: any;
    };
    export type PasswordLessLoginTokenRequest = {
        grant_type: string;
        hint: string;
        pwdless_login_token: string;
        client_id?: string;
        code_verifier?: string;
    } & {
        [key: string]: any;
    };
    export type Oauth2ErrorResponse = {
        error: string;
        error_uri?: string;
        error_description?: string;
    } & {
        [key: string]: any;
    };
    export type PasswordActionVerifyRequest = {
        client_id: string;
        pwd_action_token: string;
        code_verifier: string;
        new_password: string;
        channel_id: string;
    } & {
        [key: string]: any;
    };
    export type TrustedSystemTokenRequest = {
        usid?: string;
        grant_type: string;
        hint: string;
        login_id: string;
        idp_origin: string;
        client_id: string;
        channel_id: string;
        email_id?: string;
    } & {
        [key: string]: any;
    };
    export type PasswordActionRequest = {
        user_id: string;
        mode: string;
        channel_id: string;
        locale?: string;
        client_id?: string;
        code_challenge?: string;
        callback_uri?: string;
        idp_name?: string;
    } & {
        [key: string]: any;
    };
    export type TokenResponse = {
        access_token: string;
        id_token: string;
        refresh_token: string;
        expires_in: number;
        token_type: string;
        usid: string;
        customer_id: string;
        enc_user_id: string;
    } & {
        [key: string]: any;
    };
    export type TokenRequest = {
        refresh_token?: string;
        code?: string;
        usid?: string;
        grant_type: string;
        redirect_uri?: string;
        code_verifier?: string;
        client_id?: string;
        channel_id?: string;
    } & {
        [key: string]: any;
    };
    export type TokenActionRequest = {
        token: string;
        token_type_hint?: string;
    } & {
        [key: string]: any;
    };
    export type SessionBridgeTokenRequest = {
        code: string;
        client_id: string;
        channel_id: string;
        code_verifier: string;
        dwsid: string;
        grant_type: string;
        login_id: string;
        usid?: string;
    } & {
        [key: string]: any;
    };
    export type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    export type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {};
    export type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    export type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    export type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    export type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type SearchRequest = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    export type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    export type LocalizedString = {} & {
        [key: string]: any;
    };
    export type PaginatedSearchResult = {
        query: Query;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type ClosedObject = {} & {
        [key: string]: any;
    };
    export type OpenObject = {} & {
        [key: string]: any;
    };
    export type NoPropertiesAllowed = {};
    export type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    export type BoolFilter = {
        filters?: Array<Filter>;
        operator: string;
    } & {
        [key: string]: any;
    };
    export type PaginatedSearchResultBase = {
        query: Query;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type MatchAllQuery = {} & {
        [key: string]: any;
    };
    export type FilteredQuery = {
        filter: Filter;
        query: Query;
    } & {
        [key: string]: any;
    };
    export type QueryFilter = {
        query: Query;
    } & {
        [key: string]: any;
    };
    export type Query = {
        boolQuery?: BoolQuery;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery;
        termQuery?: TermQuery;
        textQuery?: TextQuery;
    } & {
        [key: string]: any;
    };
    export type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    export type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    export type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    export type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    export type BoolQuery = {
        must?: Array<Query>;
        mustNot?: Array<Query>;
        should?: Array<Query>;
    } & {
        [key: string]: any;
    };
    export type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type NestedQuery = {
        path: string;
        query: Query;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    export type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    export type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    export type SearchRequestBase = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    export type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    export type L10nString = {} & {
        [key: string]: any;
    };
    export type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    };
    export type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    export {};
}
/**
* [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary)
* ==================================
*
* *Enable shoppers to log in more easily, stay logged in for longer, and get a more fluid and personalized shopping experience powered by Shopper APIs.*<br />
*
* Simple example:
*
* ```typescript
*   import { Customer, ClientConfig } from "commerce-sdk";
*   // or
*   const { Customer, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const shopperLoginClient = new Customer.ShopperLogin(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const shopperLoginClient = new Customer.ShopperLogin(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 1.39.10<br />
* Last Updated: <br />
* </span>

*

*/
export declare class ShopperLogin extends BaseClient {
    constructor(config: ClientConfig);
    /**
    * Get credential quality statistics for a user.
    *
    * If you would like to get a raw Response object use the other retrieveCredQualityUserInfo function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param username - User's login ID or email address.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type ShopperLogin.CredQualityUserResponse.
    *
    */
    retrieveCredQualityUserInfo(options?: {
        parameters?: {
            organizationId?: string;
            username: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<ShopperLogin.CredQualityUserResponse>;
    /**
    * Get credential quality statistics for a user.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param username - User's login ID or email address.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperLogin.CredQualityUserResponse otherwise.
    *
    */
    retrieveCredQualityUserInfo<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            username: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperLogin.CredQualityUserResponse>;
    /**
    * Authenticates an ECOM customer.
    *
    * If you would like to get a raw Response object use the other authenticateCustomer function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type void.
    *
    */
    authenticateCustomer(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.LoginRequest;
    }): Promise<void>;
    /**
    * Authenticates an ECOM customer.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    authenticateCustomer<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.LoginRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Allows the customer to authenticate when their identity provider is down.
    *
    * If you would like to get a raw Response object use the other authorizePasswordlessCustomer function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Object.
    *
    */
    authorizePasswordlessCustomer(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.PasswordlessLoginRequest;
    }): Promise<Object>;
    /**
    * Allows the customer to authenticate when their identity provider is down.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
    *
    */
    authorizePasswordlessCustomer<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.PasswordlessLoginRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : Object>;
    /**
    * Log out a shopper.
    *
    * If you would like to get a raw Response object use the other logoutCustomer function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param client_id - The SLAS client ID.
    * @param refresh_token - Refresh token that was given during the access token request.
    * @param channel_id - The `channel_id` parameter must be provided if the shopper authenticated using the `login` endpoint with ECOM.
    * @param hint - Optional parameter for logging out user sessions. Use `all-sessions` to log out all user sessions. If `hint` is not used, only the current user session will be logged out.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type ShopperLogin.TokenResponse.
    *
    */
    logoutCustomer(options?: {
        parameters?: {
            organizationId?: string;
            client_id: string;
            refresh_token: string;
            channel_id?: string;
            hint?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<ShopperLogin.TokenResponse>;
    /**
    * Log out a shopper.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param client_id - The SLAS client ID.
    * @param refresh_token - Refresh token that was given during the access token request.
    * @param channel_id - The `channel_id` parameter must be provided if the shopper authenticated using the `login` endpoint with ECOM.
    * @param hint - Optional parameter for logging out user sessions. Use `all-sessions` to log out all user sessions. If `hint` is not used, only the current user session will be logged out.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperLogin.TokenResponse otherwise.
    *
    */
    logoutCustomer<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            client_id: string;
            refresh_token: string;
            channel_id?: string;
            hint?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperLogin.TokenResponse>;
    /**
    * Get an authorization code after authenticating a user against an identity provider (IDP). This is the first step of the OAuth 2.1 authorization code flow, where a user can log in via federation to the IDP configured for the client. After successfully logging in, the user gets an authorization code via a redirect URI.

This endpoint can be called from the front channel (the browser).
    *
    * If you would like to get a raw Response object use the other authorizeCustomer function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param redirect_uri - The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered.
    * @param response_type - Must be `code`. Indicates that the client wants an authorization code (using the `authorization_code` grant type).
    * @param client_id - The client ID obtained during application registration.
    * @param scope -
    * @param state - Value to send the client to determine the state between the authorization request and the server response. Optional, but strongly recommended.
    * @param usid - A unique shopper identifier (USID). If not provided, a new USID is generated.
    * @param hint - Name of an identity provider (IDP) to optionally redirect to, thereby skipping the IDP selection step.

To use a public client, set `hint` to `guest` and use a public client ID to get an authorization code. If no `hint` is provided, the preferred IDP of the tenant is used by default.

For session bridge authorization the `hint` should be set to `sb-user` for a registered customer and to `sb-guest` for a guest.
    * @param channel_id - The channel that this request is for. For an ECOM request, this is angalous to the site ID.
    * @param code_challenge - PKCE code challenge. Created by the client calling the `login` endpoint.

The `code_challenge` is created by SHA256 hashing the `code_verifier` and base64 URL encoding the resulting hash.

The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    authorizeCustomer(options?: {
        parameters?: {
            organizationId?: string;
            redirect_uri: string;
            response_type: string;
            client_id: string;
            scope?: string;
            state?: string;
            usid?: string;
            hint?: string;
            channel_id?: string;
            code_challenge: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Get an authorization code after authenticating a user against an identity provider (IDP). This is the first step of the OAuth 2.1 authorization code flow, where a user can log in via federation to the IDP configured for the client. After successfully logging in, the user gets an authorization code via a redirect URI.

This endpoint can be called from the front channel (the browser).
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param redirect_uri - The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered.
    * @param response_type - Must be `code`. Indicates that the client wants an authorization code (using the `authorization_code` grant type).
    * @param client_id - The client ID obtained during application registration.
    * @param scope -
    * @param state - Value to send the client to determine the state between the authorization request and the server response. Optional, but strongly recommended.
    * @param usid - A unique shopper identifier (USID). If not provided, a new USID is generated.
    * @param hint - Name of an identity provider (IDP) to optionally redirect to, thereby skipping the IDP selection step.

To use a public client, set `hint` to `guest` and use a public client ID to get an authorization code. If no `hint` is provided, the preferred IDP of the tenant is used by default.

For session bridge authorization the `hint` should be set to `sb-user` for a registered customer and to `sb-guest` for a guest.
    * @param channel_id - The channel that this request is for. For an ECOM request, this is angalous to the site ID.
    * @param code_challenge - PKCE code challenge. Created by the client calling the `login` endpoint.

The `code_challenge` is created by SHA256 hashing the `code_verifier` and base64 URL encoding the resulting hash.

The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    authorizeCustomer<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            redirect_uri: string;
            response_type: string;
            client_id: string;
            scope?: string;
            state?: string;
            usid?: string;
            hint?: string;
            channel_id?: string;
            code_challenge: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Get the shopper or guest JWT access token and a refresh token. This is the second step of the OAuth 2.1 authorization code flow where a client appplication is able to get an access token for the shopper through the back channel (a trusted server) by passing in the client credentials and the authorization code retrieved from the `authorize` endpoint.

As a guest user, get the shopper JWT access token and a refresh token. This is where a client appplication is able to get an access token for the guest user through the back channel (a trusted server) by passing in the client credentials.

When refreshing the access token with a private client ID and client secret the refresh token is _not_ regenerated. However, when refreshing the access token with a public client ID, the refresh token is _always_ regenerated. The old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token.

See the Body section for required parameters, including `grant_type` and others, depending on the value of `grant_type`.

**Important**: We strongly recommended using the `channel_id` query parameter because **it will be required in the future**.
    *
    * If you would like to get a raw Response object use the other getAccessToken function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type ShopperLogin.TokenResponse.
    *
    */
    getAccessToken(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.TokenRequest;
    }): Promise<ShopperLogin.TokenResponse>;
    /**
    * Get the shopper or guest JWT access token and a refresh token. This is the second step of the OAuth 2.1 authorization code flow where a client appplication is able to get an access token for the shopper through the back channel (a trusted server) by passing in the client credentials and the authorization code retrieved from the `authorize` endpoint.

As a guest user, get the shopper JWT access token and a refresh token. This is where a client appplication is able to get an access token for the guest user through the back channel (a trusted server) by passing in the client credentials.

When refreshing the access token with a private client ID and client secret the refresh token is _not_ regenerated. However, when refreshing the access token with a public client ID, the refresh token is _always_ regenerated. The old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token.

See the Body section for required parameters, including `grant_type` and others, depending on the value of `grant_type`.

**Important**: We strongly recommended using the `channel_id` query parameter because **it will be required in the future**.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperLogin.TokenResponse otherwise.
    *
    */
    getAccessToken<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.TokenRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperLogin.TokenResponse>;
    /**
    * Get a shopper JWT access token for a registered customer using session bridge.

For public client id requests the grant_type must be set to `session_bridge`.

For  private client_id and secret the grant_type must be set to `client_credentials` along with a basic authorization header.
    *
    * If you would like to get a raw Response object use the other getSessionBridgeAccessToken function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type ShopperLogin.TokenResponse.
    *
    */
    getSessionBridgeAccessToken(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.SessionBridgeTokenRequest;
    }): Promise<ShopperLogin.TokenResponse>;
    /**
    * Get a shopper JWT access token for a registered customer using session bridge.

For public client id requests the grant_type must be set to `session_bridge`.

For  private client_id and secret the grant_type must be set to `client_credentials` along with a basic authorization header.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperLogin.TokenResponse otherwise.
    *
    */
    getSessionBridgeAccessToken<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.SessionBridgeTokenRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperLogin.TokenResponse>;
    /**
    * Get a shopper JWT access token for a registered customer whose credentials are stored using a third party system.

For external trusted-system requests, a basic authorization header that includes a SLAS client ID and SLAS client secret can be used in place of the bearer token.

For internal trusted-system requests, the bearer token must be a C2C JWT.
    *
    * If you would like to get a raw Response object use the other getTrustedSystemAccessToken function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type ShopperLogin.TokenResponse.
    *
    */
    getTrustedSystemAccessToken(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.TrustedSystemTokenRequest;
    }): Promise<ShopperLogin.TokenResponse>;
    /**
    * Get a shopper JWT access token for a registered customer whose credentials are stored using a third party system.

For external trusted-system requests, a basic authorization header that includes a SLAS client ID and SLAS client secret can be used in place of the bearer token.

For internal trusted-system requests, the bearer token must be a C2C JWT.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperLogin.TokenResponse otherwise.
    *
    */
    getTrustedSystemAccessToken<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.TrustedSystemTokenRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperLogin.TokenResponse>;
    /**
    * Obtains a new agent on behalf authorization token for a registered customer.
    *
    * If you would like to get a raw Response object use the other getTrustedAgentAuthorizationToken function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param client_id - The SLAS public client ID for use with internal trusted-agent requests.
    * @param channel_id - The channel (ECOM site) that the user is associated with.
    * @param code_challenge - PKCE code challenge. Created by the caller.

The `code_challenge` is created by SHA256 hashing the `code_verifier` and base64 URL encoding the resulting hash.

The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
    * @param login_id - The ID of the shopper for trusted agent access.
    * @param idp_origin - The IDP that the shopper is associated with.
    * @param redirect_uri - The redirect for Account Manager to redirect to.
    * @param response_type - Must be `code`. Indicates that the caller wants an authorization code.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    getTrustedAgentAuthorizationToken(options?: {
        parameters?: {
            organizationId?: string;
            client_id: string;
            channel_id: string;
            code_challenge: string;
            login_id: string;
            idp_origin: string;
            redirect_uri: string;
            response_type: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Obtains a new agent on behalf authorization token for a registered customer.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param client_id - The SLAS public client ID for use with internal trusted-agent requests.
    * @param channel_id - The channel (ECOM site) that the user is associated with.
    * @param code_challenge - PKCE code challenge. Created by the caller.

The `code_challenge` is created by SHA256 hashing the `code_verifier` and base64 URL encoding the resulting hash.

The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
    * @param login_id - The ID of the shopper for trusted agent access.
    * @param idp_origin - The IDP that the shopper is associated with.
    * @param redirect_uri - The redirect for Account Manager to redirect to.
    * @param response_type - Must be `code`. Indicates that the caller wants an authorization code.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    getTrustedAgentAuthorizationToken<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            client_id: string;
            channel_id: string;
            code_challenge: string;
            login_id: string;
            idp_origin: string;
            redirect_uri: string;
            response_type: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Get a shopper JWT access token for a registered customer using a trusted agent (Merchant)
    *
    * If you would like to get a raw Response object use the other getTrustedAgentAccessToken function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type ShopperLogin.TokenResponse.
    *
    */
    getTrustedAgentAccessToken(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.TrustedAgentTokenRequest;
    }): Promise<ShopperLogin.TokenResponse>;
    /**
    * Get a shopper JWT access token for a registered customer using a trusted agent (Merchant)
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperLogin.TokenResponse otherwise.
    *
    */
    getTrustedAgentAccessToken<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.TrustedAgentTokenRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperLogin.TokenResponse>;
    /**
    * Request a reset password token
    *
    * If you would like to get a raw Response object use the other getPasswordResetToken function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type void.
    *
    */
    getPasswordResetToken(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.PasswordActionRequest;
    }): Promise<void>;
    /**
    * Request a reset password token
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    getPasswordResetToken<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.PasswordActionRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Creates a new password
    *
    * If you would like to get a raw Response object use the other resetPassword function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type void.
    *
    */
    resetPassword(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.PasswordActionVerifyRequest;
    }): Promise<void>;
    /**
    * Creates a new password
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    resetPassword<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.PasswordActionVerifyRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Issue a shopper token (JWT).
    *
    * If you would like to get a raw Response object use the other getPasswordLessAccessToken function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type ShopperLogin.TokenResponse.
    *
    */
    getPasswordLessAccessToken(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.PasswordLessLoginTokenRequest;
    }): Promise<ShopperLogin.TokenResponse>;
    /**
    * Issue a shopper token (JWT).
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperLogin.TokenResponse otherwise.
    *
    */
    getPasswordLessAccessToken<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.PasswordLessLoginTokenRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperLogin.TokenResponse>;
    /**
    * Invalidate the refresh token. A basic auth header with base64 encoded `clientId:secret` is required in the Authorization header, and the refresh token to be revoked is required in the body.
    *
    * If you would like to get a raw Response object use the other revokeToken function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type ShopperLogin.TokenResponse.
    *
    */
    revokeToken(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.TokenActionRequest;
    }): Promise<ShopperLogin.TokenResponse>;
    /**
    * Invalidate the refresh token. A basic auth header with base64 encoded `clientId:secret` is required in the Authorization header, and the refresh token to be revoked is required in the body.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperLogin.TokenResponse otherwise.
    *
    */
    revokeToken<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.TokenActionRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperLogin.TokenResponse>;
    /**
    * Returns the token properties. A basic auth header with base64 encoded `clientId:secret` is required in the Authorization header, as well as an access token or refresh token. Use `token_type_hint` to help identify the token.
    *
    * If you would like to get a raw Response object use the other introspectToken function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Object.
    *
    */
    introspectToken(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.TokenActionRequest;
    }): Promise<Object>;
    /**
    * Returns the token properties. A basic auth header with base64 encoded `clientId:secret` is required in the Authorization header, as well as an access token or refresh token. Use `token_type_hint` to help identify the token.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
    *
    */
    introspectToken<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperLogin.TokenActionRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : Object>;
    /**
    * Returns a JSON listing of claims about the currently authenticated user.
    *
    * If you would like to get a raw Response object use the other getUserInfo function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param channel_id - Used when getting user information for a SFCC login. For an ECOM customer, this is angalous to the site ID. Required when getting user information for an ECOM customer.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Object.
    *
    */
    getUserInfo(options?: {
        parameters?: {
            organizationId?: string;
            channel_id?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Object>;
    /**
    * Returns a JSON listing of claims about the currently authenticated user.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param channel_id - Used when getting user information for a SFCC login. For an ECOM customer, this is angalous to the site ID. Required when getting user information for an ECOM customer.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
    *
    */
    getUserInfo<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            channel_id?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Object>;
    /**
    * Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
    *
    * If you would like to get a raw Response object use the other getWellknownOpenidConfiguration function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Object.
    *
    */
    getWellknownOpenidConfiguration(options?: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Object>;
    /**
    * Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
    *
    */
    getWellknownOpenidConfiguration<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Object>;
    /**
    * Returns a JSON Web Key Set (JWKS) containing public keys that enable clients to validate the Shopper JSON Web Token (JWT) issued by SLAS.
    *
    * If you would like to get a raw Response object use the other getJwksUri function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Object.
    *
    */
    getJwksUri(options?: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Object>;
    /**
    * Returns a JSON Web Key Set (JWKS) containing public keys that enable clients to validate the Shopper JSON Web Token (JWT) issued by SLAS.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
    *
    */
    getJwksUri<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Object>;
}
