import { BaseClient, ClientConfig, Response } from "@commerce-apps/core";
import type { OperationOptions } from "retry";
import type { RequestInit } from "node-fetch";
export declare namespace SlasAdmin {
    type CredQualityResponse = {
        tenantId: string;
        checkCount: number;
        credsOkay: number;
        repeatedCompromisedUse: number;
        credsCompromised: number;
        exposure1: number;
        exposure2to4: number;
        exposure5to9: number;
        exposure10plus: number;
        pwdsOkay: number;
        pwdsCompromised: number;
        avgPwdStrength: any;
        avgCredQualityMeasure: any;
        avgPwdQualityMeasure: any;
        medPwdStrength: any;
        medCredQualityMeasure: any;
        medPwdQualityMeasure: any;
    } & {
        [key: string]: any;
    };
    type IdentityProviderResponse = {
        name: string;
        authUrl: string;
        tokenUrl: string;
        tokenInfoUrl: string;
        userInfoUrl: string;
        redirectUrl: string;
        clientId: string;
        clientSecret: string;
        isPreferred: boolean;
        scopes: Array<any>;
    } & {
        [key: string]: any;
    };
    type IdentityProviderListResponse = {
        data: Array<IdentityProviderResponse>;
    } & {
        [key: string]: any;
    };
    type TenantListResponse = {
        data: Array<Tenant>;
    } & {
        [key: string]: any;
    };
    type CredQualityUserResponse = {
        tenantId: string;
        username: string;
        email: string;
        credQualityMeasure: number;
        pwdStrengthMeasure: number;
        pwdQualityMeasure: number;
        credChangeCount: number;
        loginCount: number;
        lastLoginDatetime: any;
        lastCredcheckDatetime: any;
        atoScore: number;
        atoLastDatetime: any;
        atoLastSourceIp: string;
        atoScoreHistory: string;
    } & {
        [key: string]: any;
    };
    type Tenant = {
        tenantId: string;
        merchantId: number;
        description: string;
        contact: string;
        emailAddress: string;
        phoneNo: string;
        isDeleted: boolean;
        status: string;
        tier: string;
        requestQuotaPerMinute: any;
    } & {
        [key: string]: any;
    };
    type TenantDto = {
        merchantName: string;
        description: string;
        contact: string;
        emailAddress: string;
        phoneNo: string;
    } & {
        [key: string]: any;
    };
    type ClientRequest = {
        name: string;
        clientId: string;
        secret: string;
        scopes: Array<string>;
        redirectUri: Array<string>;
        callbackUri?: Array<string>;
        channels: Array<string>;
        isPrivateClient: boolean;
    } & {
        [key: string]: any;
    };
    type ClientListResponse = {
        data: Array<Client>;
    } & {
        [key: string]: any;
    };
    type IdentityProvider = {
        name: string;
        authUrl: string;
        tokenUrl: string;
        tokenInfoUrl: string;
        userInfoUrl: string;
        redirectUrl: string;
        clientId: string;
        clientSecret: string;
        preferenceValue: boolean;
        scopes: Array<string>;
        teamId?: string;
        keyId?: string;
    } & {
        [key: string]: any;
    };
    type Client = {
        clientId: string;
        name: string;
        secret: string;
        scopes: Array<string>;
        redirectUri: string;
        callbackUri: string;
        channels: Array<string>;
        isPrivateClient?: boolean;
    } & {
        [key: string]: any;
    };
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
}
/**
* [Shopper Login and API Access Admin](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=slas-admin:Summary)
* ==================================
*
* *Enable administrators to set up clients and identity providers for the Shopper Login API Service (SLAS).*<br />
*
* Simple example:
*
* ```typescript
*   import { Customer, ClientConfig } from "commerce-sdk";
*   // or
*   const { Customer, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const slasAdminClient = new Customer.SlasAdmin(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const slasAdminClient = new Customer.SlasAdmin(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 1.12.8<br />
* Last Updated: <br />
* </span>

*

*/
export declare class SlasAdmin extends BaseClient {
    constructor(config: ClientConfig);
    /**
    * Retrieve a tenant by tenant id
    *
    * If you would like to get a raw Response object use the other retrieveTenant function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type SlasAdmin.Tenant.
    *
    */
    retrieveTenant(options?: {
        parameters?: {
            tenantId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<SlasAdmin.Tenant>;
    /**
    * Retrieve a tenant by tenant id
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type SlasAdmin.Tenant otherwise.
    *
    */
    retrieveTenant<T extends boolean>(options?: {
        parameters?: {
            tenantId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : SlasAdmin.Tenant>;
    /**
    * Create or Update a tenant.
    *
    * If you would like to get a raw Response object use the other registerTenant function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type SlasAdmin.Tenant | SlasAdmin.Tenant.
    *
    */
    registerTenant(options: {
        parameters?: {
            tenantId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: object;
    }): Promise<SlasAdmin.Tenant | SlasAdmin.Tenant>;
    /**
    * Create or Update a tenant.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type SlasAdmin.Tenant | SlasAdmin.Tenant otherwise.
    *
    */
    registerTenant<T extends boolean>(options: {
        parameters?: {
            tenantId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: object;
    }, rawResponse?: T): Promise<T extends true ? Response : SlasAdmin.Tenant | SlasAdmin.Tenant>;
    /**
    * Retrieve/Get all tenant clients
    *
    * If you would like to get a raw Response object use the other retrieveClients function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Object.
    *
    */
    retrieveClients(options?: {
        parameters?: {
            tenantId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Object>;
    /**
    * Retrieve/Get all tenant clients
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
    *
    */
    retrieveClients<T extends boolean>(options?: {
        parameters?: {
            tenantId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Object>;
    /**
    * Retrieve a client
    *
    * If you would like to get a raw Response object use the other retrieveClient function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param clientId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type SlasAdmin.Client.
    *
    */
    retrieveClient(options?: {
        parameters?: {
            tenantId: string;
            clientId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<SlasAdmin.Client>;
    /**
    * Retrieve a client
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param clientId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type SlasAdmin.Client otherwise.
    *
    */
    retrieveClient<T extends boolean>(options?: {
        parameters?: {
            tenantId: string;
            clientId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : SlasAdmin.Client>;
    /**
    * Create or Update a client.
    *
    * If you would like to get a raw Response object use the other registerClient function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param clientId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type SlasAdmin.Client | SlasAdmin.Client.
    *
    */
    registerClient(options: {
        parameters?: {
            tenantId: string;
            clientId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: SlasAdmin.ClientRequest;
    }): Promise<SlasAdmin.Client | SlasAdmin.Client>;
    /**
    * Create or Update a client.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param clientId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type SlasAdmin.Client | SlasAdmin.Client otherwise.
    *
    */
    registerClient<T extends boolean>(options: {
        parameters?: {
            tenantId: string;
            clientId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: SlasAdmin.ClientRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : SlasAdmin.Client | SlasAdmin.Client>;
    /**
    * Delete a client
    *
    * If you would like to get a raw Response object use the other deleteClient function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param clientId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    deleteClient(options?: {
        parameters?: {
            tenantId: string;
            clientId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Delete a client
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param clientId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    deleteClient<T extends boolean>(options?: {
        parameters?: {
            tenantId: string;
            clientId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Retrieve/Get all tenant identity providers
    *
    * If you would like to get a raw Response object use the other retrieveIdentityProviders function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type SlasAdmin.IdentityProviderListResponse.
    *
    */
    retrieveIdentityProviders(options?: {
        parameters?: {
            tenantId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<SlasAdmin.IdentityProviderListResponse>;
    /**
    * Retrieve/Get all tenant identity providers
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type SlasAdmin.IdentityProviderListResponse otherwise.
    *
    */
    retrieveIdentityProviders<T extends boolean>(options?: {
        parameters?: {
            tenantId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : SlasAdmin.IdentityProviderListResponse>;
    /**
    * Retrieve/Get a specific identity provider
    *
    * If you would like to get a raw Response object use the other retrieveIdentityProvider function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param idpId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type SlasAdmin.IdentityProvider.
    *
    */
    retrieveIdentityProvider(options?: {
        parameters?: {
            tenantId: string;
            idpId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<SlasAdmin.IdentityProvider>;
    /**
    * Retrieve/Get a specific identity provider
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param idpId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type SlasAdmin.IdentityProvider otherwise.
    *
    */
    retrieveIdentityProvider<T extends boolean>(options?: {
        parameters?: {
            tenantId: string;
            idpId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : SlasAdmin.IdentityProvider>;
    /**
    * Create or Update an identity provider
    *
    * If you would like to get a raw Response object use the other registerIdentityProvider function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param idpId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type SlasAdmin.IdentityProviderResponse | SlasAdmin.IdentityProviderResponse.
    *
    */
    registerIdentityProvider(options: {
        parameters?: {
            tenantId: string;
            idpId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: SlasAdmin.IdentityProvider;
    }): Promise<SlasAdmin.IdentityProviderResponse | SlasAdmin.IdentityProviderResponse>;
    /**
    * Create or Update an identity provider
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param idpId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type SlasAdmin.IdentityProviderResponse | SlasAdmin.IdentityProviderResponse otherwise.
    *
    */
    registerIdentityProvider<T extends boolean>(options: {
        parameters?: {
            tenantId: string;
            idpId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: SlasAdmin.IdentityProvider;
    }, rawResponse?: T): Promise<T extends true ? Response : SlasAdmin.IdentityProviderResponse | SlasAdmin.IdentityProviderResponse>;
    /**
    * Delete a identity provider
    *
    * If you would like to get a raw Response object use the other deleteIdentityProvider function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param idpId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    deleteIdentityProvider(options?: {
        parameters?: {
            tenantId: string;
            idpId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Delete a identity provider
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param idpId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    deleteIdentityProvider<T extends boolean>(options?: {
        parameters?: {
            tenantId: string;
            idpId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Completely deletes all shopper records associated with the shoppers customer id. The email id will be used if passed as a query parameter. This conforms to the GDPR regulations.
    *
    * If you would like to get a raw Response object use the other deleteShopper function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param customerId -
    * @param emailAddress - The shoppers email address.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    deleteShopper(options?: {
        parameters?: {
            tenantId: string;
            customerId: string;
            emailAddress?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Completely deletes all shopper records associated with the shoppers customer id. The email id will be used if passed as a query parameter. This conforms to the GDPR regulations.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param customerId -
    * @param emailAddress - The shoppers email address.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    deleteShopper<T extends boolean>(options?: {
        parameters?: {
            tenantId: string;
            customerId: string;
            emailAddress?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Retrieve credential quality statistics for a tenant.
    *
    * If you would like to get a raw Response object use the other retrieveCredQuailtyStats function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param action - Returns averages
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type SlasAdmin.CredQualityResponse.
    *
    */
    retrieveCredQuailtyStats(options?: {
        parameters?: {
            tenantId: string;
            action?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<SlasAdmin.CredQualityResponse>;
    /**
    * Retrieve credential quality statistics for a tenant.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param action - Returns averages
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type SlasAdmin.CredQualityResponse otherwise.
    *
    */
    retrieveCredQuailtyStats<T extends boolean>(options?: {
        parameters?: {
            tenantId: string;
            action?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : SlasAdmin.CredQualityResponse>;
    /**
    * Retrieve credential quality statistics for a user.
    *
    * If you would like to get a raw Response object use the other retrieveCredQuailtyUserStats function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param username - Login id or email address.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type SlasAdmin.CredQualityUserResponse.
    *
    */
    retrieveCredQuailtyUserStats(options?: {
        parameters?: {
            tenantId: string;
            username?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<SlasAdmin.CredQualityUserResponse>;
    /**
    * Retrieve credential quality statistics for a user.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param tenantId -
    * @param username - Login id or email address.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type SlasAdmin.CredQualityUserResponse otherwise.
    *
    */
    retrieveCredQuailtyUserStats<T extends boolean>(options?: {
        parameters?: {
            tenantId: string;
            username?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : SlasAdmin.CredQualityUserResponse>;
}
