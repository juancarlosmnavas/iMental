import { BaseClient, ClientConfig, Response } from "@commerce-apps/core";
import type { OperationOptions } from "retry";
import type { RequestInit } from "node-fetch";
export declare namespace ShopperContext {
    export type ShopperContext = {
        effectiveDateTime?: any;
        sourceCode?: any;
        customQualifiers?: {} & {
            [key: string]: any;
        };
        assignmentQualifiers?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    export type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    export type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {};
    export type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    export type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    export type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    export type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type SearchRequest = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    export type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    export type LocalizedString = {} & {
        [key: string]: any;
    };
    export type PaginatedSearchResult = {
        query: Query;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type ClosedObject = {} & {
        [key: string]: any;
    };
    export type OpenObject = {} & {
        [key: string]: any;
    };
    export type NoPropertiesAllowed = {};
    export type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    export type BoolFilter = {
        filters?: Array<Filter>;
        operator: string;
    } & {
        [key: string]: any;
    };
    export type PaginatedSearchResultBase = {
        query: Query;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type MatchAllQuery = {} & {
        [key: string]: any;
    };
    export type FilteredQuery = {
        filter: Filter;
        query: Query;
    } & {
        [key: string]: any;
    };
    export type QueryFilter = {
        query: Query;
    } & {
        [key: string]: any;
    };
    export type Query = {
        boolQuery?: BoolQuery;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery;
        termQuery?: TermQuery;
        textQuery?: TextQuery;
    } & {
        [key: string]: any;
    };
    export type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    export type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    export type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    export type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    export type BoolQuery = {
        must?: Array<Query>;
        mustNot?: Array<Query>;
        should?: Array<Query>;
    } & {
        [key: string]: any;
    };
    export type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type NestedQuery = {
        path: string;
        query: Query;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    export type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    export type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    export type SearchRequestBase = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    export type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    export type L10nString = {} & {
        [key: string]: any;
    };
    export type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    };
    export type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    export {};
}
/**
* [Shopper Context (Beta)](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-context:Summary)
* ==================================
*
* *The Shopper Context API enables developers to build highly contextualized shopping experiences for shoppers.*<br />
*
* Simple example:
*
* ```typescript
*   import { Customer, ClientConfig } from "commerce-sdk";
*   // or
*   const { Customer, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const shopperContextClient = new Customer.ShopperContext(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const shopperContextClient = new Customer.ShopperContext(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 0.0.15<br />
* Last Updated: <br />
* </span>
* @beta
*
*

*/
export declare class ShopperContext extends BaseClient {
    constructor(config: ClientConfig);
    /**
    * Gets the shopper's context based on the shopperJWT. ******** This method is currently a work in progress, and not available to use yet. ********
    *
    * If you would like to get a raw Response object use the other getShopperContext function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param usid - The Shopper's unique identifier, if known. This is an optional field, a new shopper ID will be generated if this field is empty.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type ShopperContext.ShopperContext.
    *
    * @beta
    *
    */
    getShopperContext(options?: {
        parameters?: {
            organizationId?: string;
            usid: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<ShopperContext.ShopperContext>;
    /**
    * Gets the shopper's context based on the shopperJWT. ******** This method is currently a work in progress, and not available to use yet. ********
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param usid - The Shopper's unique identifier, if known. This is an optional field, a new shopper ID will be generated if this field is empty.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperContext.ShopperContext otherwise.
    *
    * @beta
    *
    */
    getShopperContext<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            usid: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperContext.ShopperContext>;
    /**
    * Creates the shopper's context based on shopperJWT.
    *
    * If you would like to get a raw Response object use the other createShopperContext function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param usid - The Shopper's unique identifier, if known. This is an optional field, a new shopper ID will be generated if this field is empty.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type void | void.
    *
    * @beta
    *
    */
    createShopperContext(options: {
        parameters?: {
            organizationId?: string;
            usid: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperContext.ShopperContext;
    }): Promise<void | void>;
    /**
    * Creates the shopper's context based on shopperJWT.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param usid - The Shopper's unique identifier, if known. This is an optional field, a new shopper ID will be generated if this field is empty.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void | void otherwise.
    *
    * @beta
    *
    */
    createShopperContext<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            usid: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperContext.ShopperContext;
    }, rawResponse?: T): Promise<T extends true ? Response : void | void>;
    /**
    * Gets the shopper's context based on the shopperJWT.
    *
    * If you would like to get a raw Response object use the other deleteShopperContext function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param usid - The Shopper's unique identifier, if known. This is an optional field, a new shopper ID will be generated if this field is empty.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    * @beta
    *
    */
    deleteShopperContext(options?: {
        parameters?: {
            organizationId?: string;
            usid: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Gets the shopper's context based on the shopperJWT.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param usid - The Shopper's unique identifier, if known. This is an optional field, a new shopper ID will be generated if this field is empty.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    * @beta
    *
    */
    deleteShopperContext<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            usid: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Updates the shopper's context based on the Shopper JWT. If the shopper context exists, it's updated with the patch body. If a customer qualifier or an `effectiveDateTime` is already present in the existing shopper context, its value is replaced by the corresponding value from the patch body. If a customer qualifers' value is set to `null` it's deleted from existing shopper context. If `effectiveDateTime` value is set to set to an empty string (\"\"), it's deleted from existing shopper context. If `effectiveDateTime` value is set to `null` it's ignored. If an `effectiveDateTime` or customer qualifiiers' value is new, it's added to the existing Shopper context.
    *
    * If you would like to get a raw Response object use the other updateShopperContext function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param usid - The Shopper's unique identifier, if known. This is an optional field, a new shopper ID will be generated if this field is empty.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type ShopperContext.ShopperContext.
    *
    * @beta
    *
    */
    updateShopperContext(options: {
        parameters?: {
            organizationId?: string;
            usid: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperContext.ShopperContext;
    }): Promise<ShopperContext.ShopperContext>;
    /**
    * Updates the shopper's context based on the Shopper JWT. If the shopper context exists, it's updated with the patch body. If a customer qualifier or an `effectiveDateTime` is already present in the existing shopper context, its value is replaced by the corresponding value from the patch body. If a customer qualifers' value is set to `null` it's deleted from existing shopper context. If `effectiveDateTime` value is set to set to an empty string (\"\"), it's deleted from existing shopper context. If `effectiveDateTime` value is set to `null` it's ignored. If an `effectiveDateTime` or customer qualifiiers' value is new, it's added to the existing Shopper context.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param usid - The Shopper's unique identifier, if known. This is an optional field, a new shopper ID will be generated if this field is empty.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperContext.ShopperContext otherwise.
    *
    * @beta
    *
    */
    updateShopperContext<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            usid: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperContext.ShopperContext;
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperContext.ShopperContext>;
}
