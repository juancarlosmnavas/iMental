/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Customers = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@commerce-apps/core");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const USER_AGENT_HEADER = "user-agent";
const USER_AGENT_VALUE = "commerce-sdk@2.10.1;";
/**
* [Customers](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=customers:Summary)
* ==================================
*
* *Manage customer information within a customer list.*<br />
*
* Simple example:
*
* ```typescript
*   import { Customer, ClientConfig } from "commerce-sdk";
*   // or
*   const { Customer, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const customersClient = new Customer.Customers(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const customersClient = new Customer.Customers(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 0.0.19<br />
* Last Updated: <br />
* </span>

*

*/
class Customers extends core_1.BaseClient {
  /**
   *
   */
  constructor(config) {
    super(config);
    if (!!!config.baseUri) {
      this.clientConfig.baseUri =
        "https://{shortCode}.api.commercecloud.salesforce.com/customer/customers/{version}";
    }
  }
  /**
    * Action to search for customers in a customer list.
The query attribute specifies a complex query that can be used to narrow down the search. These are the list
of searchable attributes:
  
| Attribute | Type |
|-----------|--------|
| customerNo| String |
| firstName | String |
| secondName | String |
| lastName | String |
| suffix | String |
| salutation | String |
| title | String |
| fax| String |
| phoneHome | String |
| phoneBusiness | String |
| phoneMobile | String |
| email | String |
| gender | Integer |
| companyName | String |
| credentials.login | String |
| credentials.enabled | Boolean |

  
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param customerListId - The customer list ID to search in.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Customers.CustomerSearchResult otherwise.
    *
    */
  searchCustomerInCustomerList(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      customerListId: parameters["customerListId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.post(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/customer-lists/{customerListId}/customer-search",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
    * Action to create a new customer. The customer is created using the specified credentials and customer
information. This action verifies the following:

  - Login acceptance criteria and uniqueness.
  - Mandatory customer properties.

If the action fails to create the customer, it returns a 400 fault with an appropriate message.

    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param listId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Customers.Customer otherwise.
    *
    */
  createCustomerList(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      listId: parameters["listId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.post(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/customer-lists/{listId}/customers",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Deletes the customer, including all related information like the customer addresses.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param listId -
   * @param customerNo - The customer number.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  deleteCustomerFromCustomerList(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      listId: parameters["listId"],
      customerNo: parameters["customerNo"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.delete(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/customer-lists/{listId}/customers/{customerNo}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Action to get customer information.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param listId -
   * @param customerNo - The customer number.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Customers.Customer otherwise.
   *
   */
  getCustomerFromCustomerList(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      listId: parameters["listId"],
      customerNo: parameters["customerNo"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.get(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/customer-lists/{listId}/customers/{customerNo}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
    * Updates the customer with the specified information. The customer number is allowed to be updated but results in a
CustomerNumberAlreadyInUseException if there is another customer with the same customer number existing.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param listId -
    * @param customerNo - The customer number.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Customers.Customer otherwise.
    *
    */
  updateCustomerInCustomerList(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      listId: parameters["listId"],
      customerNo: parameters["customerNo"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.patch(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/customer-lists/{listId}/customers/{customerNo}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
    * Action to create a new customer. The customer is created using the specified customer number, credentials, and
customer information. This action verifies the following:

- Login acceptance criteria and uniqueness.
- Mandatory customer properties.

If the action fails to create the customer, it returns a 400 fault with an appropriate message.

    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param listId -
    * @param customerNo - The customer number.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Customers.Customer | Customers.Customer otherwise.
    *
    */
  createCustomerInCustomerList(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      listId: parameters["listId"],
      customerNo: parameters["customerNo"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.put(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/customer-lists/{listId}/customers/{customerNo}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
    * Action that returns a pageable list of all customer addresses. The
default page size is 10 customer addresses.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param listId -
    * @param customerNo - The customer number.
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Customers.CustomerAddressResult otherwise.
    *
    */
  getAddressesForCustomerFromCustomerList(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      listId: parameters["listId"],
      customerNo: parameters["customerNo"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.get(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/customer-lists/{listId}/customers/{customerNo}/addresses",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
    * The action creates a new customer address with the given address
information.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param listId -
    * @param customerNo - The customer number.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Customers.CustomerAddress otherwise.
    *
    */
  createAddressForCustomerInCustomerList(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      listId: parameters["listId"],
      customerNo: parameters["customerNo"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.post(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/customer-lists/{listId}/customers/{customerNo}/addresses",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Action that returns a single customer address from a customer list.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param listId -
   * @param customerNo - The customer number.
   * @param addressId - The address ID.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Customers.CustomerAddress otherwise.
   *
   */
  getAddressForCustomerFromCustomerList(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      listId: parameters["listId"],
      customerNo: parameters["customerNo"],
      addressId: parameters["addressId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.get(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/customer-lists/{listId}/customers/{customerNo}/addresses/{addressId}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Action which deletes a customer address.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param listId -
   * @param customerNo - The customer number.
   * @param addressId - The address ID.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  removeAddressForCustomerInCustomerList(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      listId: parameters["listId"],
      customerNo: parameters["customerNo"],
      addressId: parameters["addressId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.delete(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/customer-lists/{listId}/customers/{customerNo}/addresses/{addressId}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Action which updates an address of a customer with the given address information.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param listId -
   * @param customerNo - The customer number.
   * @param addressId - The address ID.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Customers.CustomerAddress otherwise.
   *
   */
  updateAddressForCustomerInCustomerList(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      listId: parameters["listId"],
      customerNo: parameters["customerNo"],
      addressId: parameters["addressId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.patch(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/customer-lists/{listId}/customers/{customerNo}/addresses/{addressId}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
}
exports.Customers = Customers;
//# sourceMappingURL=customers.js.map
