import { BaseClient, ClientConfig, Response } from "@commerce-apps/core";
import type { OperationOptions } from "retry";
import type { RequestInit } from "node-fetch";
export declare namespace CdnZones {
    export type FirewallRule = {
        firewallruleId?: string;
        zoneId: string;
        type: string;
        action: string;
        values: Array<string>;
    } & {
        [key: string]: any;
    };
    export type CachePurgeRequest = {
        path: string;
    } & {
        [key: string]: any;
    };
    export type CachePurgeResponseEnvelope = {
        data: CachePurgeResponse;
    } & {
        [key: string]: any;
    };
    export type CollectionResponseEnvelope = {
        data?: Array<any>;
    } & {
        [key: string]: any;
    };
    export type StorefrontZoneCreateResponse = {
        zoneId: string;
        zoneName: string;
        status: string;
        createdOn: any;
    } & {
        [key: string]: any;
    };
    export type WafGroupEnvelope = {
        data: WafGroup;
    } & {
        [key: string]: any;
    };
    export type SpeedSettingsEnvelope = {
        data: SpeedSetting;
    } & {
        [key: string]: any;
    };
    export type Zone = {
        zoneId: string;
        name: string;
        status: string;
    } & {
        [key: string]: any;
    };
    export type ZonesEnvelope = {
        data: Array<Zone>;
    } & {
        [key: string]: any;
    };
    export type ItemResponseEnvelope = {
        data?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    export type StorefrontZoneCreateRequest = {
        domainName: string;
    } & {
        [key: string]: any;
    };
    export type CertificatesEnvelope = {
        data: Array<Certificate>;
    } & {
        [key: string]: any;
    };
    export type ZoneEnvelope = {
        data: Zone;
    } & {
        [key: string]: any;
    };
    export type SpeedSetting = {
        brotliCompression?: string;
        http2Prioritization?: string;
        webp?: string;
        polish?: string;
        minifyJs?: string;
        minifyHtml?: string;
        minifyCss?: string;
    } & {
        [key: string]: any;
    };
    export type FirewallRuleEnvelope = {
        data: FirewallRule;
    } & {
        [key: string]: any;
    };
    export type FirewallRulesEnvelope = {
        data: Array<FirewallRule>;
    } & {
        [key: string]: any;
    };
    export type CertificateRequest = {
        hostname: string;
        certificate: string;
        privateKey: string;
    } & {
        [key: string]: any;
    };
    export type CustomHostnameValidationResponse = {
        customHostnameId: string;
        customHostname: string;
        customHostnameVerificationTXTName: string;
        customHostnameVerificationTXTValue: string;
        customHostnameStatus: string;
    } & {
        [key: string]: any;
    };
    export type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    export type WafGroupsEnvelope = {
        data: Array<WafGroup>;
    } & {
        [key: string]: any;
    };
    export type OCAPICachingToggleRequest = {
        enableOCAPICachingPageRule: boolean;
    } & {
        [key: string]: any;
    };
    export type WafRulesEnvelope = {
        data: Array<WafRule>;
    } & {
        [key: string]: any;
    };
    export type CertificateEnvelope = {
        data: Certificate;
    } & {
        [key: string]: any;
    };
    export type CustomHostnameValidationEnvelope = {
        data: CustomHostnameValidationResponse;
    } & {
        [key: string]: any;
    };
    export type StorefrontZoneCreateEnvelope = {
        data: StorefrontZoneCreateResponse;
    } & {
        [key: string]: any;
    };
    export type WafGroup = {
        groupId?: string;
        action?: string;
        mode: string;
        description?: string;
    } & {
        [key: string]: any;
    };
    export type Certificate = {
        certificateId: string;
        hosts: Array<string>;
        expiresOn: any;
        uploadedOn: any;
        issuer?: string;
        signature?: string;
        status: string;
        customHostnameVerificationTXTName?: string;
        customHostnameVerificationTXTValue?: string;
        customHostnameId?: string;
        customHostname?: string;
        customHostnameStatus?: string;
    } & {
        [key: string]: any;
    };
    export type WafRuleEnvelope = {
        data: WafRule;
    } & {
        [key: string]: any;
    };
    export type CachePurgeResponse = {
        cachePurged: boolean;
        details: string;
    } & {
        [key: string]: any;
    };
    export type WafRule = {
        ruleId?: string;
        groupId?: string;
        action: string;
        defaultAction?: string;
        description?: string;
    } & {
        [key: string]: any;
    };
    export type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {};
    export type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    export type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    export type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    export type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type SearchRequest = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    export type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    export type LocalizedString = {} & {
        [key: string]: any;
    };
    export type PaginatedSearchResult = {
        query: Query;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type ClosedObject = {} & {
        [key: string]: any;
    };
    export type OpenObject = {} & {
        [key: string]: any;
    };
    export type NoPropertiesAllowed = {};
    export type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    export type BoolFilter = {
        filters?: Array<Filter>;
        operator: string;
    } & {
        [key: string]: any;
    };
    export type PaginatedSearchResultBase = {
        query: Query;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type MatchAllQuery = {} & {
        [key: string]: any;
    };
    export type FilteredQuery = {
        filter: Filter;
        query: Query;
    } & {
        [key: string]: any;
    };
    export type QueryFilter = {
        query: Query;
    } & {
        [key: string]: any;
    };
    export type Query = {
        boolQuery?: BoolQuery;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery;
        termQuery?: TermQuery;
        textQuery?: TextQuery;
    } & {
        [key: string]: any;
    };
    export type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    export type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    export type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    export type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    export type BoolQuery = {
        must?: Array<Query>;
        mustNot?: Array<Query>;
        should?: Array<Query>;
    } & {
        [key: string]: any;
    };
    export type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type NestedQuery = {
        path: string;
        query: Query;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    export type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    export type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    export type SearchRequestBase = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    export type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    export type L10nString = {} & {
        [key: string]: any;
    };
    export type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    };
    export type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    export {};
}
/**
* [CDN Zones](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=cdn-api-process-apis:Summary)
* ==================================
*
* *Extend your eCDN beyond Business Manager configuration.*<br />
*
* Simple example:
*
* ```typescript
*   import { Cdn, ClientConfig } from "commerce-sdk";
*   // or
*   const { Cdn, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const cdnZonesClient = new Cdn.CdnZones(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const cdnZonesClient = new Cdn.CdnZones(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 1.0.19<br />
* Last Updated: <br />
* </span>

*

*/
export declare class CdnZones extends BaseClient {
    constructor(config: ClientConfig);
    /**
    * Create a new storefront zone.
    *
    * If you would like to get a raw Response object use the other createStorefrontZone function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type CdnZones.StorefrontZoneCreateEnvelope.
    *
    */
    createStorefrontZone(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.StorefrontZoneCreateRequest;
    }): Promise<CdnZones.StorefrontZoneCreateEnvelope>;
    /**
    * Create a new storefront zone.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.StorefrontZoneCreateEnvelope otherwise.
    *
    */
    createStorefrontZone<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.StorefrontZoneCreateRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.StorefrontZoneCreateEnvelope>;
    /**
    * Retrieves zone information.
    *
    * If you would like to get a raw Response object use the other getZonesInfo function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type CdnZones.ZonesEnvelope.
    *
    */
    getZonesInfo(options?: {
        parameters?: {
            organizationId?: string;
            offset?: any;
            limit?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<CdnZones.ZonesEnvelope>;
    /**
    * Retrieves zone information.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.ZonesEnvelope otherwise.
    *
    */
    getZonesInfo<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            offset?: any;
            limit?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.ZonesEnvelope>;
    /**
    * Retrieves all WAF groups accessible to the caller.
    *
    * If you would like to get a raw Response object use the other getWafGroups function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type CdnZones.WafGroupsEnvelope.
    *
    */
    getWafGroups(options?: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<CdnZones.WafGroupsEnvelope>;
    /**
    * Retrieves all WAF groups accessible to the caller.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.WafGroupsEnvelope otherwise.
    *
    */
    getWafGroups<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.WafGroupsEnvelope>;
    /**
    * Update action or mode of a specific WAF group.
    *
    * If you would like to get a raw Response object use the other updateWafGroup function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param groupId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type CdnZones.WafGroupEnvelope.
    *
    */
    updateWafGroup(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
            groupId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.WafGroup;
    }): Promise<CdnZones.WafGroupEnvelope>;
    /**
    * Update action or mode of a specific WAF group.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param groupId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.WafGroupEnvelope otherwise.
    *
    */
    updateWafGroup<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
            groupId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.WafGroup;
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.WafGroupEnvelope>;
    /**
    * Retrieve WAF rules under the waf group specified by the caller.
    *
    * If you would like to get a raw Response object use the other getWafRules function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param groupId - WAF Group that contains the WAF rules.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type CdnZones.WafRulesEnvelope.
    *
    */
    getWafRules(options?: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
            groupId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<CdnZones.WafRulesEnvelope>;
    /**
    * Retrieve WAF rules under the waf group specified by the caller.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param groupId - WAF Group that contains the WAF rules.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.WafRulesEnvelope otherwise.
    *
    */
    getWafRules<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
            groupId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.WafRulesEnvelope>;
    /**
    * Retrieve details of a specific WAF rule.
    *
    * If you would like to get a raw Response object use the other getWafRule function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param ruleId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type CdnZones.WafRuleEnvelope.
    *
    */
    getWafRule(options?: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<CdnZones.WafRuleEnvelope>;
    /**
    * Retrieve details of a specific WAF rule.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param ruleId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.WafRuleEnvelope otherwise.
    *
    */
    getWafRule<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.WafRuleEnvelope>;
    /**
    * Update action of a specific WAF rule.
    *
    * If you would like to get a raw Response object use the other updateWafRule function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param ruleId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type CdnZones.WafRuleEnvelope.
    *
    */
    updateWafRule(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.WafRule;
    }): Promise<CdnZones.WafRuleEnvelope>;
    /**
    * Update action of a specific WAF rule.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param ruleId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.WafRuleEnvelope otherwise.
    *
    */
    updateWafRule<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.WafRule;
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.WafRuleEnvelope>;
    /**
    * Retrieves existing firewall rules.
    *
    * If you would like to get a raw Response object use the other getFirewallRules function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type CdnZones.FirewallRulesEnvelope.
    *
    */
    getFirewallRules(options?: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<CdnZones.FirewallRulesEnvelope>;
    /**
    * Retrieves existing firewall rules.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.FirewallRulesEnvelope otherwise.
    *
    */
    getFirewallRules<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.FirewallRulesEnvelope>;
    /**
    * Creates a firewall rule.
    *
    * If you would like to get a raw Response object use the other createFirewallRule function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type CdnZones.FirewallRuleEnvelope.
    *
    */
    createFirewallRule(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.FirewallRule;
    }): Promise<CdnZones.FirewallRuleEnvelope>;
    /**
    * Creates a firewall rule.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.FirewallRuleEnvelope otherwise.
    *
    */
    createFirewallRule<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.FirewallRule;
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.FirewallRuleEnvelope>;
    /**
    * Retrieve a specific firewall rule.
    *
    * If you would like to get a raw Response object use the other getFirewallRule function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param firewallRuleId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type CdnZones.FirewallRuleEnvelope.
    *
    */
    getFirewallRule(options?: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
            firewallRuleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<CdnZones.FirewallRuleEnvelope>;
    /**
    * Retrieve a specific firewall rule.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param firewallRuleId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.FirewallRuleEnvelope otherwise.
    *
    */
    getFirewallRule<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
            firewallRuleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.FirewallRuleEnvelope>;
    /**
    * Update a specific firewall rule.
    *
    * If you would like to get a raw Response object use the other updateFirewallRule function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param firewallRuleId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type CdnZones.FirewallRuleEnvelope.
    *
    */
    updateFirewallRule(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
            firewallRuleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.FirewallRule;
    }): Promise<CdnZones.FirewallRuleEnvelope>;
    /**
    * Update a specific firewall rule.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param firewallRuleId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.FirewallRuleEnvelope otherwise.
    *
    */
    updateFirewallRule<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
            firewallRuleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.FirewallRule;
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.FirewallRuleEnvelope>;
    /**
    * Delete a specific firewall rule.
    *
    * If you would like to get a raw Response object use the other deleteFirewallRule function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param firewallRuleId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    deleteFirewallRule(options?: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
            firewallRuleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Delete a specific firewall rule.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param firewallRuleId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    deleteFirewallRule<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
            firewallRuleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Retrieve speed settings for a zone.
    *
    * If you would like to get a raw Response object use the other getSpeedSettings function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type CdnZones.SpeedSettingsEnvelope.
    *
    */
    getSpeedSettings(options?: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<CdnZones.SpeedSettingsEnvelope>;
    /**
    * Retrieve speed settings for a zone.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.SpeedSettingsEnvelope otherwise.
    *
    */
    getSpeedSettings<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.SpeedSettingsEnvelope>;
    /**
    * Update speed settings for a zone.
    *
    * If you would like to get a raw Response object use the other updateSpeedSettings function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type CdnZones.SpeedSettingsEnvelope.
    *
    */
    updateSpeedSettings(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.SpeedSetting;
    }): Promise<CdnZones.SpeedSettingsEnvelope>;
    /**
    * Update speed settings for a zone.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.SpeedSettingsEnvelope otherwise.
    *
    */
    updateSpeedSettings<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.SpeedSetting;
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.SpeedSettingsEnvelope>;
    /**
    * Request to purge the cache for the host given in the request body
    *
    * If you would like to get a raw Response object use the other cachePurge function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type CdnZones.CachePurgeResponseEnvelope.
    *
    */
    cachePurge(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.CachePurgeRequest;
    }): Promise<CdnZones.CachePurgeResponseEnvelope>;
    /**
    * Request to purge the cache for the host given in the request body
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.CachePurgeResponseEnvelope otherwise.
    *
    */
    cachePurge<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.CachePurgeRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.CachePurgeResponseEnvelope>;
    /**
    * Request to enable or disable OCAPI Caching page rule.
    *
    * If you would like to get a raw Response object use the other toggleOcapiCachingPageRule function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type CdnZones.OCAPICachingToggleRequest.
    *
    */
    toggleOcapiCachingPageRule(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.OCAPICachingToggleRequest;
    }): Promise<CdnZones.OCAPICachingToggleRequest>;
    /**
    * Request to enable or disable OCAPI Caching page rule.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.OCAPICachingToggleRequest otherwise.
    *
    */
    toggleOcapiCachingPageRule<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.OCAPICachingToggleRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.OCAPICachingToggleRequest>;
    /**
    * Retrieves a list of certificates information for a zone.
    *
    * If you would like to get a raw Response object use the other getCertificates function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type CdnZones.CertificatesEnvelope.
    *
    */
    getCertificates(options?: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<CdnZones.CertificatesEnvelope>;
    /**
    * Retrieves a list of certificates information for a zone.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.CertificatesEnvelope otherwise.
    *
    */
    getCertificates<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.CertificatesEnvelope>;
    /**
    * Add Certificates For Zone
    *
    * If you would like to get a raw Response object use the other addCertificateForZone function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type CdnZones.CertificateEnvelope.
    *
    */
    addCertificateForZone(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.CertificateRequest;
    }): Promise<CdnZones.CertificateEnvelope>;
    /**
    * Add Certificates For Zone
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.CertificateEnvelope otherwise.
    *
    */
    addCertificateForZone<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.CertificateRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.CertificateEnvelope>;
    /**
    * Updates the certificate for a given certificateId for a particular zone.
    *
    * If you would like to get a raw Response object use the other updateCertificate function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param certificateId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type CdnZones.CertificateEnvelope.
    *
    */
    updateCertificate(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
            certificateId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.CertificateRequest;
    }): Promise<CdnZones.CertificateEnvelope>;
    /**
    * Updates the certificate for a given certificateId for a particular zone.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param certificateId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.CertificateEnvelope otherwise.
    *
    */
    updateCertificate<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
            certificateId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: CdnZones.CertificateRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.CertificateEnvelope>;
    /**
    * Restart the validation checks for a given custom hostname for a particular zone.
    *
    * If you would like to get a raw Response object use the other validateCustomHostname function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param customHostnameId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type CdnZones.CustomHostnameValidationEnvelope.
    *
    */
    validateCustomHostname(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
            customHostnameId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: object;
    }): Promise<CdnZones.CustomHostnameValidationEnvelope>;
    /**
    * Restart the validation checks for a given custom hostname for a particular zone.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param zoneId -
    * @param customHostnameId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.CustomHostnameValidationEnvelope otherwise.
    *
    */
    validateCustomHostname<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            zoneId: string;
            customHostnameId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: object;
    }, rawResponse?: T): Promise<T extends true ? Response : CdnZones.CustomHostnameValidationEnvelope>;
}
