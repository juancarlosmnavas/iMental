/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShopperDiscoverySearch = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@commerce-apps/core");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const USER_AGENT_HEADER = "user-agent";
const USER_AGENT_VALUE = "commerce-sdk@2.10.1;";
/**
* [Shopper Discovery Search](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-discovery-search:Summary)
* ==================================
*
* *Einstein-powered product search and search suggestions.*<br />
*
* Simple example:
*
* ```typescript
*   import { Discovery, ClientConfig } from "commerce-sdk";
*   // or
*   const { Discovery, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const shopperDiscoverySearchClient = new Discovery.ShopperDiscoverySearch(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const shopperDiscoverySearchClient = new Discovery.ShopperDiscoverySearch(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 1.1.6<br />
* Last Updated: <br />
* </span>
* @beta
*
*

*/
class ShopperDiscoverySearch extends core_1.BaseClient {
  /**
   *
   */
  constructor(config) {
    super(config);
    if (!!!config.baseUri) {
      this.clientConfig.baseUri =
        "https://{shortCode}.api.commercecloud.salesforce.com/discovery/query/{version}";
    }
  }
  /**
   * This method retrieves search results for a Channel.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param channelId - The unique identifier of a Channel.
   * @param locale -
   * @param offset -
   * @param limit - Maximum records to retrieve per request, not to exceed 240. Defaults to 30.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperDiscoverySearch.QueryOutput otherwise.
   *
   * @beta
   *
   */
  retrieveResults(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      channelId: parameters["channelId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.post(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/channels/{channelId}/results",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * This method gets suggestions for the user's search activity for a channel.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param channelId - The unique identifier of a Channel.
   * @param suggestionTypes - The types of suggestions to return.
   * @param searchText - The optional text to retrieve suggestions for.
   * @param locale -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperDiscoverySearch.Suggestions otherwise.
   *
   * @beta
   *
   */
  getSuggestions(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      channelId: parameters["channelId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.get(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/channels/{channelId}/suggestions",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
}
exports.ShopperDiscoverySearch = ShopperDiscoverySearch;
//# sourceMappingURL=shopperDiscoverySearch.js.map
