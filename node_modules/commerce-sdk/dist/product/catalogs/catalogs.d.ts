import { BaseClient, ClientConfig, Response } from "@commerce-apps/core";
import type { OperationOptions } from "retry";
import type { RequestInit } from "node-fetch";
export declare namespace Catalogs {
    type Money = {
        currencyMnemonic: string;
        value: number;
    } & {
        [key: string]: any;
    };
    type RulesResult = {
        limit: number;
        data?: Array<Rule>;
        total: number;
    } & {
        [key: string]: any;
    };
    type ExecutionJobStatusResult = {
        type?: string;
        assignedCount?: number;
        unassignedCount?: number;
        matchedCount?: number;
        jobStatus: string;
        message?: string;
        lastRunDate?: any;
        productIds?: Array<string>;
        limit?: number;
        offset?: number;
    } & {
        [key: string]: any;
    };
    type CategoryProductAssignmentSearchResult = {
        hits: Array<CategoryProductAssignment>;
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type ProductOption = {
        customName: {} & {
            [key: string]: any;
        };
        defaultProductOptionValue: string;
        description: {} & {
            [key: string]: any;
        };
        id: string;
        image?: MediaFile;
        name: string;
        selectedOptionValue: string;
        shared: boolean;
        sortingMode: string;
        values: Array<ProductOptionValue>;
    } & {
        [key: string]: any;
    };
    type Master = {
        masterId: string;
        orderable?: boolean;
        price?: number;
        priceMax?: number;
        prices?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type CategorySearchResult = {
        hits: Array<Category>;
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type Category = {
        catalogId?: string;
        categories?: Array<Category>;
        creationDate?: any;
        description?: {} & {
            [key: string]: any;
        };
        id: string;
        image?: string;
        lastModified?: any;
        name?: {} & {
            [key: string]: any;
        };
        online?: boolean;
        pageDescription?: {} & {
            [key: string]: any;
        };
        pageKeywords?: {} & {
            [key: string]: any;
        };
        pageTitle?: {} & {
            [key: string]: any;
        };
        parentCategoryId?: string;
        paths?: Array<PathRecord>;
        position?: number;
        sortingRules?: Array<SortingRule>;
        thumbnail?: string;
    } & {
        [key: string]: any;
    };
    type Condition = {
        id: string;
        attributeKey: string;
        attributeName?: string;
        attributeValue: Array<string>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type RulesRequest = {
        data?: Array<Rule>;
    } & {
        [key: string]: any;
    };
    type VariationAttribute = {
        attributeDefinitionId: string;
        attributeDefinitionName?: {} & {
            [key: string]: any;
        };
        defaultValue?: string;
        id?: string;
        name?: {} & {
            [key: string]: any;
        };
        shared?: boolean;
        slicing?: boolean;
        values?: Array<VariationAttributeValue>;
        variationAttributeType?: string;
    } & {
        [key: string]: any;
    };
    type CatalogCategoryId = {
        catalogId: string;
        categoryId: string;
    } & {
        [key: string]: any;
    };
    type Categories = {
        limit: number;
        data: Array<Category>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type RuleRequest = {
        id: string;
        enabled: boolean;
        exclusion: boolean;
        categorizationLocaleId?: string;
        categorizationClassificationFlag?: boolean;
        categorizationPrimaryFlag?: boolean;
    } & {
        [key: string]: any;
    };
    type ConditionsResult = {
        limit: number;
        conditions?: Array<Condition>;
        total: number;
    } & {
        [key: string]: any;
    };
    type SortingRule = {
        creationDate: any;
        description: string;
        id: string;
        productSortingRuleSteps: Array<SortingRuleStep>;
        ruleContext: string;
        site: string;
    } & {
        [key: string]: any;
    };
    type ProductType = {
        bundle?: boolean;
        bundled?: boolean;
        item?: boolean;
        master: boolean;
        option?: boolean;
        partOfProductSet?: boolean;
        partOfRetailSet?: boolean;
        retailSet?: boolean;
        set?: boolean;
        variant?: boolean;
        variationGroup?: boolean;
    } & {
        [key: string]: any;
    };
    type Rule = {
        conditions?: Array<Condition>;
        id: string;
        enabled: boolean;
        exclusion: boolean;
        categorizationLocaleId?: string;
        categorizationClassificationFlag?: boolean;
        categorizationPrimaryFlag?: boolean;
    } & {
        [key: string]: any;
    };
    type Variant = {
        ats?: number;
        defaultProductVariation?: boolean;
        image?: MediaFile;
        inStock?: boolean;
        online?: boolean;
        orderable?: boolean;
        price?: number;
        priceCurrency?: string;
        productId: string;
        searchable?: {} & {
            [key: string]: any;
        };
        variationAttributes?: Array<VariationAttribute>;
        variationValues?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type VariationGroup = {
        orderable: boolean;
        price: number;
        productId: string;
        variationValues: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type ProductOptionValue = {
        defaultProductOptionValue: boolean;
        id: string;
        optionPrices: Array<Money>;
        skuExtension: string;
        value: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type VariationAttributes = {
        limit: number;
        data: Array<VariationAttribute>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type CategoryLinks = {
        limit: number;
        data: Array<CategoryLink>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type ExecutionRequest = {
        evaluation: boolean;
    } & {
        [key: string]: any;
    };
    type MarkupText = {
        markup: string;
        source: string;
    } & {
        [key: string]: any;
    };
    type ExcludedProduct = {
        productId: string;
    } & {
        [key: string]: any;
    };
    type ImageGroup = {
        images: Array<MediaFile>;
        variationAttributes: Array<VariationAttribute>;
        viewType: string;
    } & {
        [key: string]: any;
    };
    type Catalogs = {
        limit: number;
        data: Array<Catalog>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type CategoryLink = {
        lastModified: any;
        position: number;
        sourceCatalogId: string;
        sourceCatalogName: {} & {
            [key: string]: any;
        };
        sourceCategoryId: string;
        sourceCategoryName: {} & {
            [key: string]: any;
        };
        targetCatalogId: string;
        targetCatalogName: {} & {
            [key: string]: any;
        };
        targetCategoryId: string;
        targetCategoryName: {} & {
            [key: string]: any;
        };
        type: string;
    } & {
        [key: string]: any;
    };
    type MediaFile = {
        absUrl?: string;
        alt: {} & {
            [key: string]: any;
        };
        disBaseUrl?: string;
        path: string;
        title: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type VariationAttributeValues = {
        limit: number;
        data: Array<VariationAttributeValue>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type CatalogSearchResult = {
        hits: Array<Catalog>;
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type Site = {
        cartridges?: string;
        customerListLink?: CustomerListLink;
        description?: {} & {
            [key: string]: any;
        };
        displayName: {} & {
            [key: string]: any;
        };
        id: string;
        inDeletion?: boolean;
        storefrontStatus?: string;
    } & {
        [key: string]: any;
    };
    type ProductOptions = {
        limit: number;
        data: Array<ProductOption>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type Product = {
        assignedCategories?: Array<CatalogCategoryId>;
        ats?: number;
        brand?: string;
        bundledProducts?: Array<Product>;
        creationDate?: any;
        defaultVariantId?: string;
        ean?: string;
        id?: string;
        image?: MediaFile;
        imageGroups?: Array<ImageGroup>;
        inStock?: boolean;
        lastModified?: any;
        longDescription?: {} & {
            [key: string]: any;
        };
        manufacturerName?: string;
        manufacturerSku?: string;
        master?: Master;
        name?: {} & {
            [key: string]: any;
        };
        online?: boolean;
        onlineFlag?: {} & {
            [key: string]: any;
        };
        owningCatalogId?: string;
        owningCatalogName?: {} & {
            [key: string]: any;
        };
        pageDescription?: {} & {
            [key: string]: any;
        };
        pageKeywords?: {} & {
            [key: string]: any;
        };
        pageTitle?: {} & {
            [key: string]: any;
        };
        price?: number;
        priceCurrency?: string;
        primaryCategoryId?: string;
        productBundles?: Array<Product>;
        productOptions?: Array<ProductOption>;
        productSets?: Array<Product>;
        searchable?: {} & {
            [key: string]: any;
        };
        setProducts?: Array<Product>;
        shortDescription?: {} & {
            [key: string]: any;
        };
        type?: ProductType;
        unit?: string;
        upc?: string;
        variants?: Array<Variant>;
        variationAttributes?: Array<VariationAttribute>;
        variationGroups?: Array<VariationGroup>;
        variationValues?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type ExcludedProductsResult = {
        limit: number;
        data?: Array<ExcludedProduct>;
        total: number;
    } & {
        [key: string]: any;
    };
    type CategoryProductAssignment = {
        catalogId: string;
        categoryId: string;
        owningCatalogName?: {} & {
            [key: string]: any;
        };
        position?: number;
        product?: Product;
        productId: string;
        productName?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type VariationAttributeValue = {
        description?: {} & {
            [key: string]: any;
        };
        image?: MediaFile;
        imageSwatch?: MediaFile;
        name?: {} & {
            [key: string]: any;
        };
        orderable?: boolean;
        position?: number;
        value: string;
    } & {
        [key: string]: any;
    };
    type ProductOptionValues = {
        limit: number;
        data: Array<ProductOptionValue>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type CustomerListLink = {
        customerListId: string;
        title?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type PathRecord = {
        id: string;
        name?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type ExcludedProductRequest = {
        data: Array<ExcludedProduct>;
    } & {
        [key: string]: any;
    };
    type Catalog = {
        assignedProductCount?: number;
        assignedSites?: Array<Site>;
        categoryCount?: number;
        creationDate?: any;
        description?: {} & {
            [key: string]: any;
        };
        id: string;
        lastModified?: any;
        name?: {} & {
            [key: string]: any;
        };
        online?: boolean;
        ownedProductCount?: number;
        recommendationCount?: number;
        rootCategory?: string;
    } & {
        [key: string]: any;
    };
    type SortingRuleStep = {
        attributeId: string;
        direction: string;
        isSystem: boolean;
        position: number;
        textRelevanceIncluded: boolean;
        typeId: string;
    } & {
        [key: string]: any;
    };
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: any;
        sorts?: Array<Sort>;
        offset?: number;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<any>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: any;
        query: any;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: any;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery;
        termQuery?: TermQuery;
        textQuery?: TextQuery;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<any>;
        mustNot?: Array<any>;
        should?: Array<any>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: any;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        field: string;
        from?: any;
        fromInclusive?: boolean;
        to?: any;
        toInclusive?: boolean;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: any;
        sorts?: Array<Sort>;
        offset?: number;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
}
/**
* [Catalogs](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=catalogs:Summary)
* ==================================
*
* *Build searchable product categories and catalogs.*<br />
*
* Simple example:
*
* ```typescript
*   import { Product, ClientConfig } from "commerce-sdk";
*   // or
*   const { Product, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const catalogsClient = new Product.Catalogs(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const catalogsClient = new Product.Catalogs(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 0.0.27<br />
* Last Updated: <br />
* </span>

*

*/
export declare class Catalogs extends BaseClient {
    constructor(config: ClientConfig);
    /**
    * Action to get the list of catalog IDs with no filtering.
    *
    * If you would like to get a raw Response object use the other getCatalogs function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Catalogs.Catalogs.
    *
    */
    getCatalogs(options?: {
        parameters?: {
            organizationId?: string;
            offset?: number;
            limit?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Catalogs.Catalogs>;
    /**
    * Action to get the list of catalog IDs with no filtering.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.Catalogs otherwise.
    *
    */
    getCatalogs<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            offset?: number;
            limit?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.Catalogs>;
    /**
    * Gets the catalog with the specified information.
    *
    * If you would like to get a raw Response object use the other getCatalog function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Catalogs.Catalog.
    *
    */
    getCatalog(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Catalogs.Catalog>;
    /**
    * Gets the catalog with the specified information.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.Catalog otherwise.
    *
    */
    getCatalog<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.Catalog>;
    /**
    * Updates the catalog with the specified information.
    *
    * If you would like to get a raw Response object use the other updateCatalog function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Catalogs.Catalog.
    *
    */
    updateCatalog(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.Catalog;
    }): Promise<Catalogs.Catalog>;
    /**
    * Updates the catalog with the specified information.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.Catalog otherwise.
    *
    */
    updateCatalog<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.Catalog;
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.Catalog>;
    /**
    * Action to get all the categories with no filtering.
    *
    * If you would like to get a raw Response object use the other getCategoriesFromCatalog function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Catalogs.Categories.
    *
    */
    getCategoriesFromCatalog(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            offset?: number;
            limit?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Catalogs.Categories>;
    /**
    * Action to get all the categories with no filtering.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.Categories otherwise.
    *
    */
    getCategoriesFromCatalog<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            offset?: number;
            limit?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.Categories>;
    /**
    * Deletes the category by catalog ID and category ID.
    *
    * If you would like to get a raw Response object use the other deleteCategoryFromCatalog function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    deleteCategoryFromCatalog(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Deletes the category by catalog ID and category ID.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    deleteCategoryFromCatalog<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Action to read an existing category within a catalog. By default, the server
also returns the first level of sub-categories, but you can specify another level by setting the levels
parameter. Using a large value for levels may cause performance
issues in case of a large and deep category tree.
    *
    * If you would like to get a raw Response object use the other getCategoryFromCatalog function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param levels - The level number
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Catalogs.Category.
    *
    */
    getCategoryFromCatalog(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            levels?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Catalogs.Category>;
    /**
    * Action to read an existing category within a catalog. By default, the server
also returns the first level of sub-categories, but you can specify another level by setting the levels
parameter. Using a large value for levels may cause performance
issues in case of a large and deep category tree.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param levels - The level number
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.Category otherwise.
    *
    */
    getCategoryFromCatalog<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            levels?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.Category>;
    /**
    * Updates a catalog category using the information provided.
    *
    * If you would like to get a raw Response object use the other updateCategoryInCatalog function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Catalogs.Category.
    *
    */
    updateCategoryInCatalog(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.Category;
    }): Promise<Catalogs.Category>;
    /**
    * Updates a catalog category using the information provided.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.Category otherwise.
    *
    */
    updateCategoryInCatalog<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.Category;
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.Category>;
    /**
    * Creates a catalog category using the information provided.
    *
    * If you would like to get a raw Response object use the other createCategoryInCatalog function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Catalogs.Category | Catalogs.Category.
    *
    */
    createCategoryInCatalog(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.Category;
    }): Promise<Catalogs.Category | Catalogs.Category>;
    /**
    * Creates a catalog category using the information provided.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.Category | Catalogs.Category otherwise.
    *
    */
    createCategoryInCatalog<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.Category;
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.Category | Catalogs.Category>;
    /**
    * Searches for category product assignments. The query attribute specifies a complex query that can be used to narrow down the search.

The following are searchable attributes:

  | Attribute | Type |
  |-----------|--------|
  | productId| String |
  | productName | String |
  | onlineFlag | Boolean |
  | searchable | Boolean |
  | validFrom | DateTime |
  | validTo | DateTime |
  | creationDate | DateTime |


 Sortable Fields:

  | Attribute | Type |
  |-----------|--------|
  | productId| String |
  | productName | String |
  | position | Double |
  | creationDate | DateTime |

Expansions that can be applied for the search request:
  - productBase - String

The productBase expand will enable retrieval of the following basic product information:

  | Attribute | Type | Function |
  |-----------|--------|-----|
  | productImages| String | Fetch preview image and image groups specified for the given product. |
  | productAllImages | String | Fetch preview image, image groups specified for the product, and variant and variation group images. |
  | productVariations | String | Fetch variations related information. |
  | productAvailability | String | Fetch availability related information. |
  | productCategories | String | Fetch category related information. |
  | productPrices | String | Fetch price related information. |
  | productOptions | String | Fetch options related information. |
  | productAll | String | Fetch all expanded information. |

Note: productAll includes the following:
  - brand
  - ean
  - link
  - longDescription
  - manufacturerName
  - manufacturerSku
  - name
  - pageDescription
  - pageKeywords
  - pageTitle
  - searchable
  - shortDescription
  - type
  - unit
  - upc
  

    *
    * If you would like to get a raw Response object use the other searchProductsAssignedToCategory function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param siteId - The site ID of the context for the product being queried for in the request.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Catalogs.CategoryProductAssignmentSearchResult.
    *
    */
    searchProductsAssignedToCategory(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.SearchRequest;
    }): Promise<Catalogs.CategoryProductAssignmentSearchResult>;
    /**
    * Searches for category product assignments. The query attribute specifies a complex query that can be used to narrow down the search.

The following are searchable attributes:

  | Attribute | Type |
  |-----------|--------|
  | productId| String |
  | productName | String |
  | onlineFlag | Boolean |
  | searchable | Boolean |
  | validFrom | DateTime |
  | validTo | DateTime |
  | creationDate | DateTime |


 Sortable Fields:

  | Attribute | Type |
  |-----------|--------|
  | productId| String |
  | productName | String |
  | position | Double |
  | creationDate | DateTime |

Expansions that can be applied for the search request:
  - productBase - String

The productBase expand will enable retrieval of the following basic product information:

  | Attribute | Type | Function |
  |-----------|--------|-----|
  | productImages| String | Fetch preview image and image groups specified for the given product. |
  | productAllImages | String | Fetch preview image, image groups specified for the product, and variant and variation group images. |
  | productVariations | String | Fetch variations related information. |
  | productAvailability | String | Fetch availability related information. |
  | productCategories | String | Fetch category related information. |
  | productPrices | String | Fetch price related information. |
  | productOptions | String | Fetch options related information. |
  | productAll | String | Fetch all expanded information. |

Note: productAll includes the following:
  - brand
  - ean
  - link
  - longDescription
  - manufacturerName
  - manufacturerSku
  - name
  - pageDescription
  - pageKeywords
  - pageTitle
  - searchable
  - shortDescription
  - type
  - unit
  - upc
  

    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param siteId - The site ID of the context for the product being queried for in the request.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.CategoryProductAssignmentSearchResult otherwise.
    *
    */
    searchProductsAssignedToCategory<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.SearchRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.CategoryProductAssignmentSearchResult>;
    /**
    * Retrieves a category product assignment.


For example, if we have products A, B, C at positions 1, 2, 7.5, and delete assignment for product B,
  the products end up A, B, C at positions 1, null, 7.5.
    *
    * If you would like to get a raw Response object use the other getAssignedProductFromCategory function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param productId - The ID (SKU) of the requested product to assign.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Catalogs.CategoryProductAssignment.
    *
    */
    getAssignedProductFromCategory(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Catalogs.CategoryProductAssignment>;
    /**
    * Retrieves a category product assignment.


For example, if we have products A, B, C at positions 1, 2, 7.5, and delete assignment for product B,
  the products end up A, B, C at positions 1, null, 7.5.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param productId - The ID (SKU) of the requested product to assign.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.CategoryProductAssignment otherwise.
    *
    */
    getAssignedProductFromCategory<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.CategoryProductAssignment>;
    /**
    * Removes a category product assignment.


For example, if we have products A, B, C at positions 1, 2, 7.5 and delete assignment for product B,
the products end up A, B, C at positions 1, null, 7.5.
    *
    * If you would like to get a raw Response object use the other unassignProductFromCategory function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param productId - The ID (SKU) of the requested product to assign.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    unassignProductFromCategory(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Removes a category product assignment.


For example, if we have products A, B, C at positions 1, 2, 7.5 and delete assignment for product B,
the products end up A, B, C at positions 1, null, 7.5.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param productId - The ID (SKU) of the requested product to assign.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    unassignProductFromCategory<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Updates the category product assignment with the specified information, such as position.
  As the assigned position n is a normalized target position, we'll make sure that the product is assigned
to a position so that the order of positions are maintained.

For example, if we have products A, B, C, D at positions 1, 2, 3, 4 and update product A with a  new position of 3,
the end result is B, C, A, D with order of positions 1, 2, 3, 4. If we then update product C to no position,
the end result is B, A, D, C with order of positions 1, 2, 3, null.

If there are n existing positioned assignments, updating product to position \>= n will end with a new assignment with a position such that the order of positions is maintained.
    *
    * If you would like to get a raw Response object use the other updateProductCategoryAssignment function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param productId - The ID (SKU) of the requested product to assign.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Catalogs.CategoryProductAssignment.
    *
    */
    updateProductCategoryAssignment(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.CategoryProductAssignment;
    }): Promise<Catalogs.CategoryProductAssignment>;
    /**
    * Updates the category product assignment with the specified information, such as position.
  As the assigned position n is a normalized target position, we'll make sure that the product is assigned
to a position so that the order of positions are maintained.

For example, if we have products A, B, C, D at positions 1, 2, 3, 4 and update product A with a  new position of 3,
the end result is B, C, A, D with order of positions 1, 2, 3, 4. If we then update product C to no position,
the end result is B, A, D, C with order of positions 1, 2, 3, null.

If there are n existing positioned assignments, updating product to position \>= n will end with a new assignment with a position such that the order of positions is maintained.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param productId - The ID (SKU) of the requested product to assign.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.CategoryProductAssignment otherwise.
    *
    */
    updateProductCategoryAssignment<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.CategoryProductAssignment;
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.CategoryProductAssignment>;
    /**
    * Creates a category product assignment using the information provided.

As the assigned position n is a normalized target position, we'll make sure that the product is assigned
to a position so that the order of positions are maintained.

For example, if we have products A, B, C at positions 1, 2, 3, and product D is assigned to
position 2, the end result is A, D, B, C with order of positions 1, 2, 3, 4.

If there are n existing positioned assignment, assigning a new product to position \>= n+1 will end
with the new assignment with position n+1.
    *
    * If you would like to get a raw Response object use the other assignProductToCategory function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param productId - The ID (SKU) of the requested product to assign.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Catalogs.CategoryProductAssignment | Catalogs.CategoryProductAssignment.
    *
    */
    assignProductToCategory(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.CategoryProductAssignment;
    }): Promise<Catalogs.CategoryProductAssignment | Catalogs.CategoryProductAssignment>;
    /**
    * Creates a category product assignment using the information provided.

As the assigned position n is a normalized target position, we'll make sure that the product is assigned
to a position so that the order of positions are maintained.

For example, if we have products A, B, C at positions 1, 2, 3, and product D is assigned to
position 2, the end result is A, D, B, C with order of positions 1, 2, 3, 4.

If there are n existing positioned assignment, assigning a new product to position \>= n+1 will end
with the new assignment with position n+1.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param productId - The ID (SKU) of the requested product to assign.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.CategoryProductAssignment | Catalogs.CategoryProductAssignment otherwise.
    *
    */
    assignProductToCategory<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.CategoryProductAssignment;
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.CategoryProductAssignment | Catalogs.CategoryProductAssignment>;
    /**
    * Submits a job to evaluate or execute the rules. The evaluation returns a set of matching products based on the rules and conditions. The execution categorizes the products based on the evaluated results.
    *
    * If you would like to get a raw Response object use the other runCategoryRules function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type void.
    *
    */
    runCategoryRules(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.ExecutionRequest;
    }): Promise<void>;
    /**
    * Submits a job to evaluate or execute the rules. The evaluation returns a set of matching products based on the rules and conditions. The execution categorizes the products based on the evaluated results.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    runCategoryRules<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.ExecutionRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Gets the status of the latest categorization job which could be evaluation or execution. For evaluation, the matched count and a paginated list of product IDs are returned. For execution, the counts of the products which are assigned or unassigned are returned.
    *
    * If you would like to get a raw Response object use the other getCategorizationStatus function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param limit -
    * @param offset -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Catalogs.ExecutionJobStatusResult.
    *
    */
    getCategorizationStatus(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            limit?: number;
            offset?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Catalogs.ExecutionJobStatusResult>;
    /**
    * Gets the status of the latest categorization job which could be evaluation or execution. For evaluation, the matched count and a paginated list of product IDs are returned. For execution, the counts of the products which are assigned or unassigned are returned.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param limit -
    * @param offset -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.ExecutionJobStatusResult otherwise.
    *
    */
    getCategorizationStatus<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            limit?: number;
            offset?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.ExecutionJobStatusResult>;
    /**
    * Gets the list of excluded products for a given catalog and category.
    *
    * If you would like to get a raw Response object use the other getExclusionList function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Catalogs.ExcludedProductsResult.
    *
    */
    getExclusionList(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Catalogs.ExcludedProductsResult>;
    /**
    * Gets the list of excluded products for a given catalog and category.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.ExcludedProductsResult otherwise.
    *
    */
    getExclusionList<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.ExcludedProductsResult>;
    /**
    * Adds the product to the excluded product list for a given catalog and category. Once a product is added as an excluded product for the category, then the the categorization process does not categorize that product for that category.
    *
    * If you would like to get a raw Response object use the other addProductsToExclusionList function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Catalogs.ExcludedProductsResult.
    *
    */
    addProductsToExclusionList(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.ExcludedProductRequest;
    }): Promise<Catalogs.ExcludedProductsResult>;
    /**
    * Adds the product to the excluded product list for a given catalog and category. Once a product is added as an excluded product for the category, then the the categorization process does not categorize that product for that category.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.ExcludedProductsResult otherwise.
    *
    */
    addProductsToExclusionList<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.ExcludedProductRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.ExcludedProductsResult>;
    /**
    * Deletes products from the excluded products list for a catalog category.
    *
    * If you would like to get a raw Response object use the other removeProductsFromExclusionList function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    removeProductsFromExclusionList(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Deletes products from the excluded products list for a catalog category.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    removeProductsFromExclusionList<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Gets all the rules for given catalog and category.
    *
    * If you would like to get a raw Response object use the other getCategoryRules function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Catalogs.RulesResult.
    *
    */
    getCategoryRules(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Catalogs.RulesResult>;
    /**
    * Gets all the rules for given catalog and category.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.RulesResult otherwise.
    *
    */
    getCategoryRules<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.RulesResult>;
    /**
    * Deletes all the rules along with conditions for given catalog and category.
    *
    * If you would like to get a raw Response object use the other deleteCategoryRules function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    deleteCategoryRules(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Deletes all the rules along with conditions for given catalog and category.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    deleteCategoryRules<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Creates all rules and conditions within the catalog and category. This deletes any existing rules and conditions for that catalog-category and recreates them based on the new request. The LocaleID, PrimaryFlag, and ClassificationFlag can be set on any of the individual rules, but they apply to entire ruleset.  For simplicity, those values can just be provided with one of the rules.  If they are provided with multiple rules, then they must all have the same value for all rules or it could have undesired effects.
    *
    * If you would like to get a raw Response object use the other createCategoryRules function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Catalogs.RulesResult.
    *
    */
    createCategoryRules(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.RulesRequest;
    }): Promise<Catalogs.RulesResult>;
    /**
    * Creates all rules and conditions within the catalog and category. This deletes any existing rules and conditions for that catalog-category and recreates them based on the new request. The LocaleID, PrimaryFlag, and ClassificationFlag can be set on any of the individual rules, but they apply to entire ruleset.  For simplicity, those values can just be provided with one of the rules.  If they are provided with multiple rules, then they must all have the same value for all rules or it could have undesired effects.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.RulesResult otherwise.
    *
    */
    createCategoryRules<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.RulesRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.RulesResult>;
    /**
    * Gets rule by ID.
    *
    * If you would like to get a raw Response object use the other getRuleById function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param ruleId - The Id of the rule
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Catalogs.Rule.
    *
    */
    getRuleById(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Catalogs.Rule>;
    /**
    * Gets rule by ID.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param ruleId - The Id of the rule
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.Rule otherwise.
    *
    */
    getRuleById<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.Rule>;
    /**
    * Creates or updates a rule.
    *
    * If you would like to get a raw Response object use the other createUpdateRule function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param ruleId - The Id of the rule
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Catalogs.Rule | Catalogs.Rule.
    *
    */
    createUpdateRule(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.RuleRequest;
    }): Promise<Catalogs.Rule | Catalogs.Rule>;
    /**
    * Creates or updates a rule.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param ruleId - The Id of the rule
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.Rule | Catalogs.Rule otherwise.
    *
    */
    createUpdateRule<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.RuleRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.Rule | Catalogs.Rule>;
    /**
    * Deletes a rule.
    *
    * If you would like to get a raw Response object use the other deleteRule function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param ruleId - The Id of the rule
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    deleteRule(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Deletes a rule.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param ruleId - The Id of the rule
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    deleteRule<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Gets the conditions for a given rule, catalog and category.
    *
    * If you would like to get a raw Response object use the other getCategoryRuleConditions function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param ruleId - The Id of the rule
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Catalogs.ConditionsResult.
    *
    */
    getCategoryRuleConditions(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Catalogs.ConditionsResult>;
    /**
    * Gets the conditions for a given rule, catalog and category.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param ruleId - The Id of the rule
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.ConditionsResult otherwise.
    *
    */
    getCategoryRuleConditions<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.ConditionsResult>;
    /**
    * Deletes all the conditions for a given rule, catalog and category.
    *
    * If you would like to get a raw Response object use the other deleteCategoryRuleConditions function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param ruleId - The Id of the rule
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    deleteCategoryRuleConditions(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Deletes all the conditions for a given rule, catalog and category.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param ruleId - The Id of the rule
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    deleteCategoryRuleConditions<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            categoryId: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Gets a condition By ID.
    *
    * If you would like to get a raw Response object use the other getCategoryRuleCondition function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param categoryId - The ID of the category to be created.
    * @param conditionId - The Id of the condition.
    * @param catalogId - The ID of the requested catalog.
    * @param organizationId -
    * @param ruleId - The Id of the rule
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Catalogs.Condition.
    *
    */
    getCategoryRuleCondition(options?: {
        parameters?: {
            categoryId: string;
            conditionId: string;
            catalogId: string;
            organizationId?: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Catalogs.Condition>;
    /**
    * Gets a condition By ID.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param categoryId - The ID of the category to be created.
    * @param conditionId - The Id of the condition.
    * @param catalogId - The ID of the requested catalog.
    * @param organizationId -
    * @param ruleId - The Id of the rule
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.Condition otherwise.
    *
    */
    getCategoryRuleCondition<T extends boolean>(options?: {
        parameters?: {
            categoryId: string;
            conditionId: string;
            catalogId: string;
            organizationId?: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.Condition>;
    /**
    * Creates or updates a condition.
    *
    * If you would like to get a raw Response object use the other createOrUpdateCategoryRuleCondition function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param categoryId - The ID of the category to be created.
    * @param conditionId - The Id of the condition.
    * @param catalogId - The ID of the requested catalog.
    * @param organizationId -
    * @param ruleId - The Id of the rule
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Catalogs.Condition | Catalogs.Condition.
    *
    */
    createOrUpdateCategoryRuleCondition(options: {
        parameters?: {
            categoryId: string;
            conditionId: string;
            catalogId: string;
            organizationId?: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.Condition;
    }): Promise<Catalogs.Condition | Catalogs.Condition>;
    /**
    * Creates or updates a condition.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param categoryId - The ID of the category to be created.
    * @param conditionId - The Id of the condition.
    * @param catalogId - The ID of the requested catalog.
    * @param organizationId -
    * @param ruleId - The Id of the rule
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.Condition | Catalogs.Condition otherwise.
    *
    */
    createOrUpdateCategoryRuleCondition<T extends boolean>(options: {
        parameters?: {
            categoryId: string;
            conditionId: string;
            catalogId: string;
            organizationId?: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.Condition;
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.Condition | Catalogs.Condition>;
    /**
    * Deletes a condition.
    *
    * If you would like to get a raw Response object use the other deleteCategoryRuleCondition function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param categoryId - The ID of the category to be created.
    * @param conditionId - The Id of the condition.
    * @param catalogId - The ID of the requested catalog.
    * @param organizationId -
    * @param ruleId - The Id of the rule
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    deleteCategoryRuleCondition(options?: {
        parameters?: {
            categoryId: string;
            conditionId: string;
            catalogId: string;
            organizationId?: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Deletes a condition.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param categoryId - The ID of the category to be created.
    * @param conditionId - The Id of the condition.
    * @param catalogId - The ID of the requested catalog.
    * @param organizationId -
    * @param ruleId - The Id of the rule
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    deleteCategoryRuleCondition<T extends boolean>(options?: {
        parameters?: {
            categoryId: string;
            conditionId: string;
            catalogId: string;
            organizationId?: string;
            ruleId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Searches for catalog categories in the scope of catalog.
By default, the server also returns the first level of subcategories,
  but you can specify another level by setting the levels parameter.
  Using a large value for levels may cause performance
  issues with a large and deep category tree.

The query attribute specifies a complex query that can be used to narrow down the search with the following searchable attributes:

| Attribute | Type |
|-----------|--------|
|id | String |
|name | String |
|description | String |
|creationDate | DateTime |
|online | Boolean |
|parentCategoryId | String|


The output of the query can also be sorted with the following sortable attributes:

| Attribute | Type |
|-----------|--------|
|id | String |
|name | String |
|description | String |
|creationDate | DateTime |
|online | Boolean |
|position | Double|
    *
    * If you would like to get a raw Response object use the other searchCategoriesInCatalog function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param levels - The level number.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Catalogs.CategorySearchResult.
    *
    */
    searchCategoriesInCatalog(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            levels?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.SearchRequest;
    }): Promise<Catalogs.CategorySearchResult>;
    /**
    * Searches for catalog categories in the scope of catalog.
By default, the server also returns the first level of subcategories,
  but you can specify another level by setting the levels parameter.
  Using a large value for levels may cause performance
  issues with a large and deep category tree.

The query attribute specifies a complex query that can be used to narrow down the search with the following searchable attributes:

| Attribute | Type |
|-----------|--------|
|id | String |
|name | String |
|description | String |
|creationDate | DateTime |
|online | Boolean |
|parentCategoryId | String|


The output of the query can also be sorted with the following sortable attributes:

| Attribute | Type |
|-----------|--------|
|id | String |
|name | String |
|description | String |
|creationDate | DateTime |
|online | Boolean |
|position | Double|
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param levels - The level number.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.CategorySearchResult otherwise.
    *
    */
    searchCategoriesInCatalog<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            catalogId: string;
            levels?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.SearchRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.CategorySearchResult>;
    /**
    * Searches for catalogs.

The query attribute specifies a complex query that can be used to narrow down the search with the following searchable attributes:
   
| Attribute | Type |
|-----------|--------|
|id | String |
|name | String |
|description | String |
|creationDate | DateTime |

There are two additional fields that can be used as search filters. They are not attributes in CatalogWO object,
but can be used as filters to query catalogs based on site assignments.

| Attribute | Type |
|-----------|--------|
|isMasterCatalog | Boolean |
|isStorefrontCatalog | Boolean |
|description | String |
|creationDate | DateTime |
|online | Boolean |
|position | Double|


On using isMasterCatalog in the search query, catalogs without any site assignments are returned.
On using isStorefrontCatalog in the search query, catalogs with one or more site assignments are returned.

The output of the query can also be sorted with the following sortable attributes:

| Attribute | Type |
|-----------|--------|
|id | String |
|name | String |
|description | String |
|creationDate | DateTime |
    *
    * If you would like to get a raw Response object use the other searchCatalogs function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Catalogs.CatalogSearchResult.
    *
    */
    searchCatalogs(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.SearchRequest;
    }): Promise<Catalogs.CatalogSearchResult>;
    /**
    * Searches for catalogs.

The query attribute specifies a complex query that can be used to narrow down the search with the following searchable attributes:
   
| Attribute | Type |
|-----------|--------|
|id | String |
|name | String |
|description | String |
|creationDate | DateTime |

There are two additional fields that can be used as search filters. They are not attributes in CatalogWO object,
but can be used as filters to query catalogs based on site assignments.

| Attribute | Type |
|-----------|--------|
|isMasterCatalog | Boolean |
|isStorefrontCatalog | Boolean |
|description | String |
|creationDate | DateTime |
|online | Boolean |
|position | Double|


On using isMasterCatalog in the search query, catalogs without any site assignments are returned.
On using isStorefrontCatalog in the search query, catalogs with one or more site assignments are returned.

The output of the query can also be sorted with the following sortable attributes:

| Attribute | Type |
|-----------|--------|
|id | String |
|name | String |
|description | String |
|creationDate | DateTime |
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.CatalogSearchResult otherwise.
    *
    */
    searchCatalogs<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.SearchRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.CatalogSearchResult>;
    /**
    * Searches for catalog categories anywhere they appear.
By default, the server also returns the first level of subcategories,
  but you can specify another level by setting the levels parameter.
  Please note, using a large value for levels may cause performance
  issues with a large and deep category tree.

The query attribute specifies a complex query that can be used to narrow down the search with the following searchable attributes:

| Attribute | Type |
|-----------|--------|
|id | String |
|name | String |
|description | String |
|creationDate | DateTime |
|online | Boolean |
|catalogId | String|

The output of the query can also be sorted with the following sortable attributes:

| Attribute | Type |
|-----------|--------|
|id | String |
|name | String |
|description | String |
|creationDate | DateTime |
|online | Boolean |
|position | Double|
    *
    * If you would like to get a raw Response object use the other searchCategories function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param levels - The level number.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Catalogs.CategorySearchResult.
    *
    */
    searchCategories(options: {
        parameters?: {
            organizationId?: string;
            levels?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.SearchRequest;
    }): Promise<Catalogs.CategorySearchResult>;
    /**
    * Searches for catalog categories anywhere they appear.
By default, the server also returns the first level of subcategories,
  but you can specify another level by setting the levels parameter.
  Please note, using a large value for levels may cause performance
  issues with a large and deep category tree.

The query attribute specifies a complex query that can be used to narrow down the search with the following searchable attributes:

| Attribute | Type |
|-----------|--------|
|id | String |
|name | String |
|description | String |
|creationDate | DateTime |
|online | Boolean |
|catalogId | String|

The output of the query can also be sorted with the following sortable attributes:

| Attribute | Type |
|-----------|--------|
|id | String |
|name | String |
|description | String |
|creationDate | DateTime |
|online | Boolean |
|position | Double|
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param levels - The level number.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.CategorySearchResult otherwise.
    *
    */
    searchCategories<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            levels?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Catalogs.SearchRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : Catalogs.CategorySearchResult>;
}
