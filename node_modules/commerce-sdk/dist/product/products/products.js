/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Products = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@commerce-apps/core");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const USER_AGENT_HEADER = "user-agent";
const USER_AGENT_VALUE = "commerce-sdk@2.10.1;";
/**
* [Products](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=products:Summary)
* ==================================
*
* *Add and manage searchable products within a merchandizing system.*<br />
*
* Simple example:
*
* ```typescript
*   import { Product, ClientConfig } from "commerce-sdk";
*   // or
*   const { Product, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const productsClient = new Product.Products(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const productsClient = new Product.Products(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 0.0.26<br />
* Last Updated: <br />
* </span>

*

*/
class Products extends core_1.BaseClient {
  /**
   *
   */
  constructor(config) {
    super(config);
    if (!!!config.baseUri) {
      this.clientConfig.baseUri =
        "https://{shortCode}.api.commercecloud.salesforce.com/product/products/{version}";
    }
  }
  /**
   * Deletes the product by ID.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param productId - The product ID.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  deleteProduct(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.delete(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Action to get product information.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param productId - The product ID.
   * @param siteId - The site context.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.Product otherwise.
   *
   */
  getProduct(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.get(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
    * Update a product using the information provided.

Fields that can be updated:
name, pageDescription, longDescripton, pageTitle,
pageKeywords, brand, ean, upc, manufactureSku,
manufactureName, searchable, unit, searchable,
onlineFlag, defaultVariantId.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The product ID.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.Product otherwise.
    *
    */
  updateProduct(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.patch(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Creates a product using the information provided. If a product with the same unique identifier exists, it is cleaned and overwritten unless the header x-dw-validate-existing=true is passed in with the request.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param productId - The product ID.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.Product | Products.Product otherwise.
   *
   */
  createProduct(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.put(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
    * Searches product variations for master product or variation group product. The query attribute specifies a complex query that can be used to narrow down the search.

This is the list of searchable attributes:

  | Attribute | Type |
  |-----------|--------|
  | id | String |
  | productId | String |
  | name | String |
  | online |  SiteSpecific Boolean |
  | inStock | Boolean  |
  | searchable | SiteSpecific Boolean  |
  | ats - Actual available quantity to sell | Double |
  | variationAttribute.ATTRIBUTE_ID (Ex:variation_attribute.color) | String |

Sortable Fields:

  | Attribute | Type |
  |-----------|--------|
  | id | String |
  | productId | String |
  | name | String |
  | online |  SiteSpecific Boolean |
  | inStock | Boolean  |
  | searchable | SiteSpecific Boolean  |
  | ats - Actual available quantity to sell | Double |

  Note: The calculated value of \"online\" and \"searchable\" is used in the search/sort. A search/sort by the site-specific attributes require the Site ID query parameter to be set. They are \"online\", \"inStock\", \"searchable\" and \"ats\". We assume that every field that starts with variationAttribute. is searchable and dot is followed by \"ATTRIBUTE_ID\".

  The list of expansions to retrieve product information. The expand values available are:

  - _base - Basic product information is retrieved. This expand is included by default.

  - all - All product information, including the following properties are retrieved:
   - image
   - price - siteId must be provided to see this property
   - priceCurrency - siteId has to be provided to see this property

  - availability - Information related to the availability of the product variation.  This expand is not included by default.
   - ats - siteId must be provided to see this property
   - inStock - siteId has to be provided to see this property
   - online - siteId has to be provided to see this property
   - searchable

  - variations - Information related to product variation is retrieved. This expand is included by default.

  - attributes - Information related to product variation attributes is retrieved. This expand is not included by default.

    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The product ID.
    * @param siteId - The site context
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariantSearchResult otherwise.
    *
    */
  searchProductVariations(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.post(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/variant-search",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Reads variation groups for a product master.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param masterProductId -
   * @param siteId - The site context.
   * @param offset -
   * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationGroups otherwise.
   *
   */
  getVariationGroupsForMasterProduct(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      masterProductId: parameters["masterProductId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.get(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{masterProductId}/variation-groups",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
    * Unassign a variation group product from a product master. The variation group product is not
  deleted: it remains as a normal product after unsassign.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation group product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
  unassignVariationGroupFromMasterProduct(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      masterProductId: parameters["masterProductId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.delete(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{masterProductId}/variation-groups/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Read a variation group for a product master.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param masterProductId - The ID of the master product that contains the variation group.
   * @param id - The ID of the variation group product.
   * @param siteId - The site context.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationGroup otherwise.
   *
   */
  getVariationGroupForMasterProduct(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      masterProductId: parameters["masterProductId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.get(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{masterProductId}/variation-groups/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Update a variation group for a product master.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param masterProductId - The ID of the master product that contains the variation group.
   * @param id - The ID of the variation group product.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationGroup otherwise.
   *
   */
  updateVariationGroupForMasterProduct(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      masterProductId: parameters["masterProductId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.patch(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{masterProductId}/variation-groups/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
    * Assign a variation group for a product master. If the variation group product does not initially exist,
  one is created using the body passed in.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation group product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationGroup otherwise.
    *
    */
  assignVariationGroupToMasterProduct(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      masterProductId: parameters["masterProductId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.put(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{masterProductId}/variation-groups/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Reads variation for a product master.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param masterProductId -
   * @param siteId - The site context.
   * @param offset -
   * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.Variants otherwise.
   *
   */
  getVariationsForMasterProduct(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      masterProductId: parameters["masterProductId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.get(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{masterProductId}/variations",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
    * Unassign a variation product from a product master.  The variation product is not deleted: it remains as a
  normal product after unsassign.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
  unassignVariationFromMasterProduct(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      masterProductId: parameters["masterProductId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.delete(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{masterProductId}/variations/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Read a variation for a product master.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param masterProductId - The ID of the master product that contains the variation group.
   * @param id - The ID of the variation product.
   * @param siteId - The site context.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.Variant otherwise.
   *
   */
  getVariationForMasterProduct(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      masterProductId: parameters["masterProductId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.get(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{masterProductId}/variations/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Update a variation for a product master.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param masterProductId - The ID of the master product that contains the variation group.
   * @param id - The ID of the variation product.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.Variant otherwise.
   *
   */
  updateVariationForMasterProduct(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      masterProductId: parameters["masterProductId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.patch(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{masterProductId}/variations/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
    * Assign a variation for a product master.  If the variation product does not initially exist,
  one is created using the body passed in.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.Variant otherwise.
    *
    */
  assignVariationForMasterProduct(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      masterProductId: parameters["masterProductId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.put(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{masterProductId}/variations/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Read local and shared product options of a product.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param productId -
   * @param currency -
   * @param offset -
   * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.ProductOptions otherwise.
   *
   */
  getProductOptions(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.get(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/product-options",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Deletes a local product option or unbinds a shared product option from the product.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param productId - The ID of the product.
   * @param id - The ID of the local or shared product option.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  deleteProductOption(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.delete(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/product-options/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Read a local or shared product option of a product.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param productId - The ID of the product.
   * @param id - The ID of the local or shared product option.
   * @param currency -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.ProductOption otherwise.
   *
   */
  getProductOption(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.get(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/product-options/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Updates a local product option with the information provided.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param productId - The ID of the product.
   * @param id - The ID of the local or shared product option.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.ProductOption otherwise.
   *
   */
  updateProductOption(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.patch(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/product-options/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Creates a local product option using the information provided or binds a shared product option to the product.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param productId - The ID of the product.
   * @param id - The ID of the local or shared product option.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.ProductOption | Products.ProductOption otherwise.
   *
   */
  createProductOption(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.put(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/product-options/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Deletes a local product option value by ID.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param id - The ID of the local product option value.
   * @param optionId - The ID of the local product option.
   * @param productId - The ID of the product.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  deleteProductOptionValue(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      id: parameters["id"],
      optionId: parameters["optionId"],
      productId: parameters["productId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.delete(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/product-options/{optionId}/values/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Read a local product option value of a local product option in a product.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param id - The ID of the local product option value.
   * @param optionId - The ID of the local product option.
   * @param productId - The ID of the product.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.ProductOptionValue otherwise.
   *
   */
  getProductOptionValue(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      id: parameters["id"],
      optionId: parameters["optionId"],
      productId: parameters["productId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.get(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/product-options/{optionId}/values/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Updates a local product option value with the information provided.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param id - The ID of the local product option value.
   * @param optionId - The ID of the local product option.
   * @param productId - The ID of the product.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.ProductOptionValue otherwise.
   *
   */
  updateProductOptionValue(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      id: parameters["id"],
      optionId: parameters["optionId"],
      productId: parameters["productId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.patch(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/product-options/{optionId}/values/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Creates a local product option value using the information provided.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param id - The ID of the local product option value.
   * @param optionId - The ID of the local product option.
   * @param productId - The ID of the product.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.ProductOptionValue | Products.ProductOptionValue otherwise.
   *
   */
  createProductOptionValue(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      id: parameters["id"],
      optionId: parameters["optionId"],
      productId: parameters["productId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.put(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/product-options/{optionId}/values/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Action to get product variation attribute value information.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param productId - The ID of the product.
   * @param attributeId - The variation attribute ID.
   * @param id - The ID of the variation attribute value.
   * @param siteId - The site context.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationAttributeValue otherwise.
   *
   */
  getVariationAttributeValue(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
      attributeId: parameters["attributeId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.get(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/variation-attributes/{attributeId}/values/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Deletes the variation attribute value of a variation attribute bound to a master product.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param productId - The ID of the product.
   * @param attributeId - The variation attribute ID.
   * @param id - The ID of the variation attribute value.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  deleteVariationAttributeValue(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
      attributeId: parameters["attributeId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.delete(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/variation-attributes/{attributeId}/values/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Updates the variation attribute value of a variation attribute of a master product.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param productId - The ID of the product.
   * @param attributeId - The variation attribute ID.
   * @param id - The ID of the variation attribute value.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationAttributeValue otherwise.
   *
   */
  updateVariationAttributeValue(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
      attributeId: parameters["attributeId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.patch(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/variation-attributes/{attributeId}/values/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Action to create a product variation attribute value.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param productId - The ID of the product.
   * @param attributeId - The variation attribute ID.
   * @param id - The ID of the variation attribute value.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationAttributeValue | Products.VariationAttributeValue otherwise.
   *
   */
  createVariationAttributeValue(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
      attributeId: parameters["attributeId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.put(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/variation-attributes/{attributeId}/values/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Reads variation attributes of a product of type variant, variation master, or variation group.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param productId -
   * @param offset -
   * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationAttributes otherwise.
   *
   */
  getVariationAttributes(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.get(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/variation-attributes",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Action to get variation attribute information only for master product.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param productId - The ID of the product.
   * @param id - The ID of the variation attribute to create.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationAttribute otherwise.
   *
   */
  getVariationAttribute(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.get(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/variation-attributes/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Deletes the variation attribute by ID.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param productId - The ID of the product.
   * @param id - The ID of the variation attribute to create.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  deleteVariationAttribute(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.delete(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/variation-attributes/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
    * Updates the variation attribute with the specified information.
  name
  slicing
  
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param id - The ID of the variation attribute to create.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationAttribute otherwise.
    *
    */
  updateVariationAttribute(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.patch(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/variation-attributes/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Creates a variation attribute using the information provided.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param productId - The ID of the product.
   * @param id - The ID of the variation attribute to create.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationAttribute | Products.VariationAttribute otherwise.
   *
   */
  createVariationAttribute(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      productId: parameters["productId"],
      id: parameters["id"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.put(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/products/{productId}/variation-attributes/{id}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
    * Gets the list of allowed attributes, values, and operators for creating rule-based categorization conditions.

    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param locale - The display locale context for Attribute names and Attribute Value names.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.CategorizationAttributeDefinitonsResult otherwise.
    *
    */
  getCategorizationAttributeDefinitions(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.get(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/categorization-attribute-definitions",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
    * Searches for products. The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped into different buckets.

The following is a list of searchable attributes with their corresponding buckets:
  
Main:

  | Attribute | Type |
  |-----------|--------|
  | id | String |
  | name | String |
  | online |  SiteSpecific Boolean |
  | searchable |  SiteSpecific Boolean |
  | validFrom | SiteSpecfic DateTime  |
  | validTo | SiteSpecfic DateTime  |
  | type | ProductType |
  | creationDate | DateTime |

Catalog:

  | Attribute | Type |
  |-----------|--------|
  | catalogId | String |

  Category:

  | Attribute | Type |
  |-----------|--------|
  | categoryId | String |

  Special:
   
  type - \{\"item\", \"set, \"bundle\", \"master\", \"partOfProductSet\", \"bundled\", \"variant\", \"variationGroup\", \"option\", \"retailSet\", \"partOfRetailSet\"\}

  The sortable properties are:

  | Attribute | Type |
  |-----------|--------|
  | id | String |
  | name | String |
  | creationDate |  DateTime |

Note that catalogId is the ID of the catalog to which products are assigned to

Only attributes in the same bucket can be joined using a disjunction (OR). For instance, when joining id and catalogId, only a conjunction is allowed (AND), whereas id and searchable can be joined using a disjunction because they are in the same bucket. If an attribute is used in a disjunction (OR) that violates this rule, an exception is thrown. The product search retrieves additional properties of the product when expansions are used.

The available expand attribute values are:

- ‘all' retrieves all the product properties.

- ‘availability' retrieves the following properties:
   - ats
   - inStock
   - online

- ‘categories' retrieves the assignedCategories property.

- ‘images' retrieves the image property.

- ‘allImages' used with images retrieves the following properties:
   - image
   - imageGroups

- 'prices' retrieves the following properties:
   - price
   - priceCurrency

- ‘sets' retrieves the following properties:
   - setProducts
   - productSets

- ‘bundles' retrieves the following properties:
   - productBundles
   - bundledProduct

    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param siteId - The site context.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.ProductSearchResult otherwise.
    *
    */
  searchProducts(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.post(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/product-search",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
}
exports.Products = Products;
//# sourceMappingURL=products.js.map
