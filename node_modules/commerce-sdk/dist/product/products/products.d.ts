import { BaseClient, ClientConfig, Response } from "@commerce-apps/core";
import type { OperationOptions } from "retry";
import type { RequestInit } from "node-fetch";
export declare namespace Products {
    type Money = {
        currencyMnemonic: string;
        value: number;
    } & {
        [key: string]: any;
    };
    type Variants = {
        limit: number;
        data: Array<Variant>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type ProductOption = {
        customName?: {} & {
            [key: string]: any;
        };
        defaultProductOptionValue?: string;
        description?: {} & {
            [key: string]: any;
        };
        id: string;
        image?: MediaFile;
        name?: string;
        selectedOptionValue?: string;
        shared?: boolean;
        sortingMode?: string;
        values?: Array<ProductOptionValue>;
    } & {
        [key: string]: any;
    };
    type Master = {
        masterId: string;
        orderable?: boolean;
        price?: number;
        priceMax?: number;
        prices?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type VariantSearchResult = {
        hits: Array<Variant>;
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type VariationAttribute = {
        attributeDefinitionId: string;
        attributeDefinitionName?: {} & {
            [key: string]: any;
        };
        defaultValue?: string;
        id?: string;
        name?: {} & {
            [key: string]: any;
        };
        shared?: boolean;
        slicing?: boolean;
        values?: Array<VariationAttributeValue>;
        variationAttributeType?: string;
    } & {
        [key: string]: any;
    };
    type CatalogCategoryId = {
        catalogId: string;
        categoryId: string;
    } & {
        [key: string]: any;
    };
    type CategorizationAttributeDefinitonsResult = {
        limit: number;
        data?: Array<CategorizationAttributeDefiniton>;
        total: number;
    } & {
        [key: string]: any;
    };
    type ProductType = {
        bundle?: boolean;
        bundled?: boolean;
        item?: boolean;
        master: boolean;
        option?: boolean;
        partOfProductSet?: boolean;
        partOfRetailSet?: boolean;
        retailSet?: boolean;
        set?: boolean;
        variant?: boolean;
        variationGroup?: boolean;
    } & {
        [key: string]: any;
    };
    type Variant = {
        ats?: number;
        defaultProductVariation?: boolean;
        image?: MediaFile;
        inStock?: boolean;
        online?: boolean;
        orderable?: boolean;
        price?: number;
        priceCurrency?: string;
        productId: string;
        searchable?: {} & {
            [key: string]: any;
        };
        variationAttributes?: Array<VariationAttribute>;
        variationValues?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type VariationGroup = {
        orderable?: boolean;
        price?: number;
        productId: string;
        variationValues?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type ProductOptionValue = {
        defaultProductOptionValue?: boolean;
        id: string;
        optionPrices?: Array<Money>;
        skuExtension?: string;
        value: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type VariationAttributes = {
        limit: number;
        data: Array<VariationAttribute>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type MarkupText = {
        markup: string;
        source: string;
    } & {
        [key: string]: any;
    };
    type ImageGroup = {
        images: Array<MediaFile>;
        variationAttributes?: Array<VariationAttribute>;
        viewType: string;
    } & {
        [key: string]: any;
    };
    type MediaFile = {
        absUrl?: string;
        alt?: {} & {
            [key: string]: any;
        };
        disBaseUrl?: string;
        path: string;
        title?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type VariationAttributeValues = {
        limit: number;
        data: Array<VariationAttributeValue>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type ProductSearchResult = {
        hits: Array<Product>;
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type ProductOptions = {
        limit: number;
        data: Array<ProductOption>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type Product = {
        assignedCategories?: Array<CatalogCategoryId>;
        ats?: number;
        brand?: string;
        bundledProducts?: Array<Product>;
        classificationCategory?: CatalogCategoryId;
        creationDate?: any;
        defaultVariantId?: string;
        ean?: string;
        id: string;
        image?: MediaFile;
        imageGroups?: Array<ImageGroup>;
        inStock?: boolean;
        lastModified?: any;
        localizedTaxClassId?: {} & {
            [key: string]: any;
        };
        longDescription?: {} & {
            [key: string]: any;
        };
        manufacturerName?: string;
        manufacturerSku?: string;
        master?: Master;
        name?: {} & {
            [key: string]: any;
        };
        online?: boolean;
        onlineFlag?: {} & {
            [key: string]: any;
        };
        owningCatalogId?: string;
        owningCatalogName?: {} & {
            [key: string]: any;
        };
        pageDescription?: {} & {
            [key: string]: any;
        };
        pageKeywords?: {} & {
            [key: string]: any;
        };
        pageTitle?: {} & {
            [key: string]: any;
        };
        price?: number;
        priceCurrency?: string;
        pricePerUnit?: number;
        primaryCategories?: Array<CatalogCategoryId>;
        primaryCategoryId?: string;
        productBundles?: Array<Product>;
        productOptions?: Array<ProductOption>;
        productSets?: Array<Product>;
        searchable?: {} & {
            [key: string]: any;
        };
        setProducts?: Array<Product>;
        shortDescription?: {} & {
            [key: string]: any;
        };
        taxClassId?: string;
        type?: ProductType;
        unit?: string;
        unitMeasure?: string;
        unitQuantity?: number;
        upc?: string;
        validFrom?: {} & {
            [key: string]: any;
        };
        validTo?: {} & {
            [key: string]: any;
        };
        variants?: Array<Variant>;
        variationAttributes?: Array<VariationAttribute>;
        variationGroups?: Array<VariationGroup>;
        variationValues?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type CategorizationAttributeDefiniton = {
        id: string;
        attributeName?: string;
        attributeType: string;
        valueType: string;
        allowedOperators: Array<string>;
        allowedValues?: Array<string>;
        allowedDisplayValues?: Array<string>;
    } & {
        [key: string]: any;
    };
    type VariationAttributeValue = {
        description?: {} & {
            [key: string]: any;
        };
        image?: MediaFile;
        imageSwatch?: MediaFile;
        name?: {} & {
            [key: string]: any;
        };
        orderable?: boolean;
        position?: number;
        value: string;
    } & {
        [key: string]: any;
    };
    type ProductOptionValues = {
        limit: number;
        data: Array<ProductOptionValue>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type VariationGroups = {
        limit: number;
        data: Array<VariationGroup>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: any;
        sorts?: Array<Sort>;
        offset?: number;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<any>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: any;
        query: any;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: any;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery;
        termQuery?: TermQuery;
        textQuery?: TextQuery;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<any>;
        mustNot?: Array<any>;
        should?: Array<any>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: any;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        field: string;
        from?: any;
        fromInclusive?: boolean;
        to?: any;
        toInclusive?: boolean;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: any;
        sorts?: Array<Sort>;
        offset?: number;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
}
/**
* [Products](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=products:Summary)
* ==================================
*
* *Add and manage searchable products within a merchandizing system.*<br />
*
* Simple example:
*
* ```typescript
*   import { Product, ClientConfig } from "commerce-sdk";
*   // or
*   const { Product, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const productsClient = new Product.Products(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const productsClient = new Product.Products(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 0.0.26<br />
* Last Updated: <br />
* </span>

*

*/
export declare class Products extends BaseClient {
    constructor(config: ClientConfig);
    /**
    * Deletes the product by ID.
    *
    * If you would like to get a raw Response object use the other deleteProduct function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The product ID.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    deleteProduct(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Deletes the product by ID.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The product ID.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    deleteProduct<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Action to get product information.
    *
    * If you would like to get a raw Response object use the other getProduct function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The product ID.
    * @param siteId - The site context.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Products.Product.
    *
    */
    getProduct(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Products.Product>;
    /**
    * Action to get product information.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The product ID.
    * @param siteId - The site context.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.Product otherwise.
    *
    */
    getProduct<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Products.Product>;
    /**
    * Update a product using the information provided.

Fields that can be updated:
name, pageDescription, longDescripton, pageTitle,
pageKeywords, brand, ean, upc, manufactureSku,
manufactureName, searchable, unit, searchable,
onlineFlag, defaultVariantId.
    *
    * If you would like to get a raw Response object use the other updateProduct function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The product ID.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Products.Product.
    *
    */
    updateProduct(options: {
        parameters?: {
            organizationId?: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.Product;
    }): Promise<Products.Product>;
    /**
    * Update a product using the information provided.

Fields that can be updated:
name, pageDescription, longDescripton, pageTitle,
pageKeywords, brand, ean, upc, manufactureSku,
manufactureName, searchable, unit, searchable,
onlineFlag, defaultVariantId.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The product ID.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.Product otherwise.
    *
    */
    updateProduct<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.Product;
    }, rawResponse?: T): Promise<T extends true ? Response : Products.Product>;
    /**
    * Creates a product using the information provided. If a product with the same unique identifier exists, it is cleaned and overwritten unless the header x-dw-validate-existing=true is passed in with the request.
    *
    * If you would like to get a raw Response object use the other createProduct function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The product ID.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Products.Product | Products.Product.
    *
    */
    createProduct(options: {
        parameters?: {
            organizationId?: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.Product;
    }): Promise<Products.Product | Products.Product>;
    /**
    * Creates a product using the information provided. If a product with the same unique identifier exists, it is cleaned and overwritten unless the header x-dw-validate-existing=true is passed in with the request.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The product ID.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.Product | Products.Product otherwise.
    *
    */
    createProduct<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.Product;
    }, rawResponse?: T): Promise<T extends true ? Response : Products.Product | Products.Product>;
    /**
    * Searches product variations for master product or variation group product. The query attribute specifies a complex query that can be used to narrow down the search.

This is the list of searchable attributes:

  | Attribute | Type |
  |-----------|--------|
  | id | String |
  | productId | String |
  | name | String |
  | online |  SiteSpecific Boolean |
  | inStock | Boolean  |
  | searchable | SiteSpecific Boolean  |
  | ats - Actual available quantity to sell | Double |
  | variationAttribute.ATTRIBUTE_ID (Ex:variation_attribute.color) | String |

Sortable Fields:

  | Attribute | Type |
  |-----------|--------|
  | id | String |
  | productId | String |
  | name | String |
  | online |  SiteSpecific Boolean |
  | inStock | Boolean  |
  | searchable | SiteSpecific Boolean  |
  | ats - Actual available quantity to sell | Double |

  Note: The calculated value of \"online\" and \"searchable\" is used in the search/sort. A search/sort by the site-specific attributes require the Site ID query parameter to be set. They are \"online\", \"inStock\", \"searchable\" and \"ats\". We assume that every field that starts with variationAttribute. is searchable and dot is followed by \"ATTRIBUTE_ID\".

  The list of expansions to retrieve product information. The expand values available are:

  - _base - Basic product information is retrieved. This expand is included by default.

  - all - All product information, including the following properties are retrieved:
   - image
   - price - siteId must be provided to see this property
   - priceCurrency - siteId has to be provided to see this property

  - availability - Information related to the availability of the product variation.  This expand is not included by default.
   - ats - siteId must be provided to see this property
   - inStock - siteId has to be provided to see this property
   - online - siteId has to be provided to see this property
   - searchable

  - variations - Information related to product variation is retrieved. This expand is included by default.

  - attributes - Information related to product variation attributes is retrieved. This expand is not included by default.

    *
    * If you would like to get a raw Response object use the other searchProductVariations function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The product ID.
    * @param siteId - The site context
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Products.VariantSearchResult.
    *
    */
    searchProductVariations(options: {
        parameters?: {
            organizationId?: string;
            productId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.SearchRequest;
    }): Promise<Products.VariantSearchResult>;
    /**
    * Searches product variations for master product or variation group product. The query attribute specifies a complex query that can be used to narrow down the search.

This is the list of searchable attributes:

  | Attribute | Type |
  |-----------|--------|
  | id | String |
  | productId | String |
  | name | String |
  | online |  SiteSpecific Boolean |
  | inStock | Boolean  |
  | searchable | SiteSpecific Boolean  |
  | ats - Actual available quantity to sell | Double |
  | variationAttribute.ATTRIBUTE_ID (Ex:variation_attribute.color) | String |

Sortable Fields:

  | Attribute | Type |
  |-----------|--------|
  | id | String |
  | productId | String |
  | name | String |
  | online |  SiteSpecific Boolean |
  | inStock | Boolean  |
  | searchable | SiteSpecific Boolean  |
  | ats - Actual available quantity to sell | Double |

  Note: The calculated value of \"online\" and \"searchable\" is used in the search/sort. A search/sort by the site-specific attributes require the Site ID query parameter to be set. They are \"online\", \"inStock\", \"searchable\" and \"ats\". We assume that every field that starts with variationAttribute. is searchable and dot is followed by \"ATTRIBUTE_ID\".

  The list of expansions to retrieve product information. The expand values available are:

  - _base - Basic product information is retrieved. This expand is included by default.

  - all - All product information, including the following properties are retrieved:
   - image
   - price - siteId must be provided to see this property
   - priceCurrency - siteId has to be provided to see this property

  - availability - Information related to the availability of the product variation.  This expand is not included by default.
   - ats - siteId must be provided to see this property
   - inStock - siteId has to be provided to see this property
   - online - siteId has to be provided to see this property
   - searchable

  - variations - Information related to product variation is retrieved. This expand is included by default.

  - attributes - Information related to product variation attributes is retrieved. This expand is not included by default.

    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The product ID.
    * @param siteId - The site context
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariantSearchResult otherwise.
    *
    */
    searchProductVariations<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            productId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.SearchRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : Products.VariantSearchResult>;
    /**
    * Reads variation groups for a product master.
    *
    * If you would like to get a raw Response object use the other getVariationGroupsForMasterProduct function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId -
    * @param siteId - The site context.
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Products.VariationGroups.
    *
    */
    getVariationGroupsForMasterProduct(options?: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            siteId?: string;
            offset?: number;
            limit?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Products.VariationGroups>;
    /**
    * Reads variation groups for a product master.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId -
    * @param siteId - The site context.
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationGroups otherwise.
    *
    */
    getVariationGroupsForMasterProduct<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            siteId?: string;
            offset?: number;
            limit?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Products.VariationGroups>;
    /**
    * Unassign a variation group product from a product master. The variation group product is not
  deleted: it remains as a normal product after unsassign.
    *
    * If you would like to get a raw Response object use the other unassignVariationGroupFromMasterProduct function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation group product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    unassignVariationGroupFromMasterProduct(options?: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Unassign a variation group product from a product master. The variation group product is not
  deleted: it remains as a normal product after unsassign.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation group product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    unassignVariationGroupFromMasterProduct<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Read a variation group for a product master.
    *
    * If you would like to get a raw Response object use the other getVariationGroupForMasterProduct function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation group product.
    * @param siteId - The site context.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Products.VariationGroup.
    *
    */
    getVariationGroupForMasterProduct(options?: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            id: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Products.VariationGroup>;
    /**
    * Read a variation group for a product master.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation group product.
    * @param siteId - The site context.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationGroup otherwise.
    *
    */
    getVariationGroupForMasterProduct<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            id: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Products.VariationGroup>;
    /**
    * Update a variation group for a product master.
    *
    * If you would like to get a raw Response object use the other updateVariationGroupForMasterProduct function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation group product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Products.VariationGroup.
    *
    */
    updateVariationGroupForMasterProduct(options: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.VariationGroup;
    }): Promise<Products.VariationGroup>;
    /**
    * Update a variation group for a product master.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation group product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationGroup otherwise.
    *
    */
    updateVariationGroupForMasterProduct<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.VariationGroup;
    }, rawResponse?: T): Promise<T extends true ? Response : Products.VariationGroup>;
    /**
    * Assign a variation group for a product master. If the variation group product does not initially exist,
  one is created using the body passed in.
    *
    * If you would like to get a raw Response object use the other assignVariationGroupToMasterProduct function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation group product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Products.VariationGroup.
    *
    */
    assignVariationGroupToMasterProduct(options: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.VariationGroup;
    }): Promise<Products.VariationGroup>;
    /**
    * Assign a variation group for a product master. If the variation group product does not initially exist,
  one is created using the body passed in.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation group product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationGroup otherwise.
    *
    */
    assignVariationGroupToMasterProduct<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.VariationGroup;
    }, rawResponse?: T): Promise<T extends true ? Response : Products.VariationGroup>;
    /**
    * Reads variation for a product master.
    *
    * If you would like to get a raw Response object use the other getVariationsForMasterProduct function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId -
    * @param siteId - The site context.
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Products.Variants.
    *
    */
    getVariationsForMasterProduct(options?: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            siteId?: string;
            offset?: number;
            limit?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Products.Variants>;
    /**
    * Reads variation for a product master.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId -
    * @param siteId - The site context.
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.Variants otherwise.
    *
    */
    getVariationsForMasterProduct<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            siteId?: string;
            offset?: number;
            limit?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Products.Variants>;
    /**
    * Unassign a variation product from a product master.  The variation product is not deleted: it remains as a
  normal product after unsassign.
    *
    * If you would like to get a raw Response object use the other unassignVariationFromMasterProduct function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    unassignVariationFromMasterProduct(options?: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Unassign a variation product from a product master.  The variation product is not deleted: it remains as a
  normal product after unsassign.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    unassignVariationFromMasterProduct<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Read a variation for a product master.
    *
    * If you would like to get a raw Response object use the other getVariationForMasterProduct function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation product.
    * @param siteId - The site context.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Products.Variant.
    *
    */
    getVariationForMasterProduct(options?: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            id: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Products.Variant>;
    /**
    * Read a variation for a product master.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation product.
    * @param siteId - The site context.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.Variant otherwise.
    *
    */
    getVariationForMasterProduct<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            id: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Products.Variant>;
    /**
    * Update a variation for a product master.
    *
    * If you would like to get a raw Response object use the other updateVariationForMasterProduct function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Products.Variant.
    *
    */
    updateVariationForMasterProduct(options: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.Variant;
    }): Promise<Products.Variant>;
    /**
    * Update a variation for a product master.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.Variant otherwise.
    *
    */
    updateVariationForMasterProduct<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.Variant;
    }, rawResponse?: T): Promise<T extends true ? Response : Products.Variant>;
    /**
    * Assign a variation for a product master.  If the variation product does not initially exist,
  one is created using the body passed in.
    *
    * If you would like to get a raw Response object use the other assignVariationForMasterProduct function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Products.Variant.
    *
    */
    assignVariationForMasterProduct(options: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.Variant;
    }): Promise<Products.Variant>;
    /**
    * Assign a variation for a product master.  If the variation product does not initially exist,
  one is created using the body passed in.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param masterProductId - The ID of the master product that contains the variation group.
    * @param id - The ID of the variation product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.Variant otherwise.
    *
    */
    assignVariationForMasterProduct<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            masterProductId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.Variant;
    }, rawResponse?: T): Promise<T extends true ? Response : Products.Variant>;
    /**
    * Read local and shared product options of a product.
    *
    * If you would like to get a raw Response object use the other getProductOptions function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId -
    * @param currency -
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Products.ProductOptions.
    *
    */
    getProductOptions(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
            currency?: string;
            offset?: number;
            limit?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Products.ProductOptions>;
    /**
    * Read local and shared product options of a product.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId -
    * @param currency -
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.ProductOptions otherwise.
    *
    */
    getProductOptions<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
            currency?: string;
            offset?: number;
            limit?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Products.ProductOptions>;
    /**
    * Deletes a local product option or unbinds a shared product option from the product.
    *
    * If you would like to get a raw Response object use the other deleteProductOption function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param id - The ID of the local or shared product option.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    deleteProductOption(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Deletes a local product option or unbinds a shared product option from the product.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param id - The ID of the local or shared product option.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    deleteProductOption<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Read a local or shared product option of a product.
    *
    * If you would like to get a raw Response object use the other getProductOption function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param id - The ID of the local or shared product option.
    * @param currency -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Products.ProductOption.
    *
    */
    getProductOption(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
            id: string;
            currency?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Products.ProductOption>;
    /**
    * Read a local or shared product option of a product.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param id - The ID of the local or shared product option.
    * @param currency -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.ProductOption otherwise.
    *
    */
    getProductOption<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
            id: string;
            currency?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Products.ProductOption>;
    /**
    * Updates a local product option with the information provided.
    *
    * If you would like to get a raw Response object use the other updateProductOption function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param id - The ID of the local or shared product option.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Products.ProductOption.
    *
    */
    updateProductOption(options: {
        parameters?: {
            organizationId?: string;
            productId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.ProductOption;
    }): Promise<Products.ProductOption>;
    /**
    * Updates a local product option with the information provided.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param id - The ID of the local or shared product option.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.ProductOption otherwise.
    *
    */
    updateProductOption<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            productId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.ProductOption;
    }, rawResponse?: T): Promise<T extends true ? Response : Products.ProductOption>;
    /**
    * Creates a local product option using the information provided or binds a shared product option to the product.
    *
    * If you would like to get a raw Response object use the other createProductOption function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param id - The ID of the local or shared product option.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Products.ProductOption | Products.ProductOption.
    *
    */
    createProductOption(options: {
        parameters?: {
            organizationId?: string;
            productId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.ProductOption;
    }): Promise<Products.ProductOption | Products.ProductOption>;
    /**
    * Creates a local product option using the information provided or binds a shared product option to the product.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param id - The ID of the local or shared product option.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.ProductOption | Products.ProductOption otherwise.
    *
    */
    createProductOption<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            productId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.ProductOption;
    }, rawResponse?: T): Promise<T extends true ? Response : Products.ProductOption | Products.ProductOption>;
    /**
    * Deletes a local product option value by ID.
    *
    * If you would like to get a raw Response object use the other deleteProductOptionValue function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param id - The ID of the local product option value.
    * @param optionId - The ID of the local product option.
    * @param productId - The ID of the product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    deleteProductOptionValue(options?: {
        parameters?: {
            organizationId?: string;
            id: string;
            optionId: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Deletes a local product option value by ID.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param id - The ID of the local product option value.
    * @param optionId - The ID of the local product option.
    * @param productId - The ID of the product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    deleteProductOptionValue<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            id: string;
            optionId: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Read a local product option value of a local product option in a product.
    *
    * If you would like to get a raw Response object use the other getProductOptionValue function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param id - The ID of the local product option value.
    * @param optionId - The ID of the local product option.
    * @param productId - The ID of the product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Products.ProductOptionValue.
    *
    */
    getProductOptionValue(options?: {
        parameters?: {
            organizationId?: string;
            id: string;
            optionId: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Products.ProductOptionValue>;
    /**
    * Read a local product option value of a local product option in a product.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param id - The ID of the local product option value.
    * @param optionId - The ID of the local product option.
    * @param productId - The ID of the product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.ProductOptionValue otherwise.
    *
    */
    getProductOptionValue<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            id: string;
            optionId: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Products.ProductOptionValue>;
    /**
    * Updates a local product option value with the information provided.
    *
    * If you would like to get a raw Response object use the other updateProductOptionValue function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param id - The ID of the local product option value.
    * @param optionId - The ID of the local product option.
    * @param productId - The ID of the product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Products.ProductOptionValue.
    *
    */
    updateProductOptionValue(options: {
        parameters?: {
            organizationId?: string;
            id: string;
            optionId: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.ProductOptionValue;
    }): Promise<Products.ProductOptionValue>;
    /**
    * Updates a local product option value with the information provided.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param id - The ID of the local product option value.
    * @param optionId - The ID of the local product option.
    * @param productId - The ID of the product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.ProductOptionValue otherwise.
    *
    */
    updateProductOptionValue<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            id: string;
            optionId: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.ProductOptionValue;
    }, rawResponse?: T): Promise<T extends true ? Response : Products.ProductOptionValue>;
    /**
    * Creates a local product option value using the information provided.
    *
    * If you would like to get a raw Response object use the other createProductOptionValue function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param id - The ID of the local product option value.
    * @param optionId - The ID of the local product option.
    * @param productId - The ID of the product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Products.ProductOptionValue | Products.ProductOptionValue.
    *
    */
    createProductOptionValue(options: {
        parameters?: {
            organizationId?: string;
            id: string;
            optionId: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.ProductOptionValue;
    }): Promise<Products.ProductOptionValue | Products.ProductOptionValue>;
    /**
    * Creates a local product option value using the information provided.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param id - The ID of the local product option value.
    * @param optionId - The ID of the local product option.
    * @param productId - The ID of the product.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.ProductOptionValue | Products.ProductOptionValue otherwise.
    *
    */
    createProductOptionValue<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            id: string;
            optionId: string;
            productId: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.ProductOptionValue;
    }, rawResponse?: T): Promise<T extends true ? Response : Products.ProductOptionValue | Products.ProductOptionValue>;
    /**
    * Action to get product variation attribute value information.
    *
    * If you would like to get a raw Response object use the other getVariationAttributeValue function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param attributeId - The variation attribute ID.
    * @param id - The ID of the variation attribute value.
    * @param siteId - The site context.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Products.VariationAttributeValue.
    *
    */
    getVariationAttributeValue(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
            attributeId: string;
            id: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Products.VariationAttributeValue>;
    /**
    * Action to get product variation attribute value information.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param attributeId - The variation attribute ID.
    * @param id - The ID of the variation attribute value.
    * @param siteId - The site context.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationAttributeValue otherwise.
    *
    */
    getVariationAttributeValue<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
            attributeId: string;
            id: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Products.VariationAttributeValue>;
    /**
    * Deletes the variation attribute value of a variation attribute bound to a master product.
    *
    * If you would like to get a raw Response object use the other deleteVariationAttributeValue function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param attributeId - The variation attribute ID.
    * @param id - The ID of the variation attribute value.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    deleteVariationAttributeValue(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
            attributeId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Deletes the variation attribute value of a variation attribute bound to a master product.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param attributeId - The variation attribute ID.
    * @param id - The ID of the variation attribute value.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    deleteVariationAttributeValue<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
            attributeId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Updates the variation attribute value of a variation attribute of a master product.
    *
    * If you would like to get a raw Response object use the other updateVariationAttributeValue function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param attributeId - The variation attribute ID.
    * @param id - The ID of the variation attribute value.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Products.VariationAttributeValue.
    *
    */
    updateVariationAttributeValue(options: {
        parameters?: {
            organizationId?: string;
            productId: string;
            attributeId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.VariationAttributeValue;
    }): Promise<Products.VariationAttributeValue>;
    /**
    * Updates the variation attribute value of a variation attribute of a master product.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param attributeId - The variation attribute ID.
    * @param id - The ID of the variation attribute value.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationAttributeValue otherwise.
    *
    */
    updateVariationAttributeValue<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            productId: string;
            attributeId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.VariationAttributeValue;
    }, rawResponse?: T): Promise<T extends true ? Response : Products.VariationAttributeValue>;
    /**
    * Action to create a product variation attribute value.
    *
    * If you would like to get a raw Response object use the other createVariationAttributeValue function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param attributeId - The variation attribute ID.
    * @param id - The ID of the variation attribute value.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Products.VariationAttributeValue | Products.VariationAttributeValue.
    *
    */
    createVariationAttributeValue(options: {
        parameters?: {
            organizationId?: string;
            productId: string;
            attributeId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.VariationAttributeValue;
    }): Promise<Products.VariationAttributeValue | Products.VariationAttributeValue>;
    /**
    * Action to create a product variation attribute value.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param attributeId - The variation attribute ID.
    * @param id - The ID of the variation attribute value.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationAttributeValue | Products.VariationAttributeValue otherwise.
    *
    */
    createVariationAttributeValue<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            productId: string;
            attributeId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.VariationAttributeValue;
    }, rawResponse?: T): Promise<T extends true ? Response : Products.VariationAttributeValue | Products.VariationAttributeValue>;
    /**
    * Reads variation attributes of a product of type variant, variation master, or variation group.
    *
    * If you would like to get a raw Response object use the other getVariationAttributes function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId -
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Products.VariationAttributes.
    *
    */
    getVariationAttributes(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
            offset?: number;
            limit?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Products.VariationAttributes>;
    /**
    * Reads variation attributes of a product of type variant, variation master, or variation group.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId -
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationAttributes otherwise.
    *
    */
    getVariationAttributes<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
            offset?: number;
            limit?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Products.VariationAttributes>;
    /**
    * Action to get variation attribute information only for master product.
    *
    * If you would like to get a raw Response object use the other getVariationAttribute function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param id - The ID of the variation attribute to create.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Products.VariationAttribute.
    *
    */
    getVariationAttribute(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Products.VariationAttribute>;
    /**
    * Action to get variation attribute information only for master product.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param id - The ID of the variation attribute to create.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationAttribute otherwise.
    *
    */
    getVariationAttribute<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Products.VariationAttribute>;
    /**
    * Deletes the variation attribute by ID.
    *
    * If you would like to get a raw Response object use the other deleteVariationAttribute function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param id - The ID of the variation attribute to create.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    deleteVariationAttribute(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Deletes the variation attribute by ID.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param id - The ID of the variation attribute to create.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    deleteVariationAttribute<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            productId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Updates the variation attribute with the specified information.
  name
  slicing
  
    *
    * If you would like to get a raw Response object use the other updateVariationAttribute function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param id - The ID of the variation attribute to create.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Products.VariationAttribute.
    *
    */
    updateVariationAttribute(options: {
        parameters?: {
            organizationId?: string;
            productId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.VariationAttribute;
    }): Promise<Products.VariationAttribute>;
    /**
    * Updates the variation attribute with the specified information.
  name
  slicing
  
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param id - The ID of the variation attribute to create.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationAttribute otherwise.
    *
    */
    updateVariationAttribute<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            productId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.VariationAttribute;
    }, rawResponse?: T): Promise<T extends true ? Response : Products.VariationAttribute>;
    /**
    * Creates a variation attribute using the information provided.
    *
    * If you would like to get a raw Response object use the other createVariationAttribute function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param id - The ID of the variation attribute to create.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Products.VariationAttribute | Products.VariationAttribute.
    *
    */
    createVariationAttribute(options: {
        parameters?: {
            organizationId?: string;
            productId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.VariationAttribute;
    }): Promise<Products.VariationAttribute | Products.VariationAttribute>;
    /**
    * Creates a variation attribute using the information provided.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param productId - The ID of the product.
    * @param id - The ID of the variation attribute to create.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.VariationAttribute | Products.VariationAttribute otherwise.
    *
    */
    createVariationAttribute<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            productId: string;
            id: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.VariationAttribute;
    }, rawResponse?: T): Promise<T extends true ? Response : Products.VariationAttribute | Products.VariationAttribute>;
    /**
    * Gets the list of allowed attributes, values, and operators for creating rule-based categorization conditions.

    *
    * If you would like to get a raw Response object use the other getCategorizationAttributeDefinitions function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param locale - The display locale context for Attribute names and Attribute Value names.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Products.CategorizationAttributeDefinitonsResult.
    *
    */
    getCategorizationAttributeDefinitions(options?: {
        parameters?: {
            organizationId?: string;
            locale?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Products.CategorizationAttributeDefinitonsResult>;
    /**
    * Gets the list of allowed attributes, values, and operators for creating rule-based categorization conditions.

    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param locale - The display locale context for Attribute names and Attribute Value names.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.CategorizationAttributeDefinitonsResult otherwise.
    *
    */
    getCategorizationAttributeDefinitions<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            locale?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Products.CategorizationAttributeDefinitonsResult>;
    /**
    * Searches for products. The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped into different buckets.

The following is a list of searchable attributes with their corresponding buckets:
  
Main:

  | Attribute | Type |
  |-----------|--------|
  | id | String |
  | name | String |
  | online |  SiteSpecific Boolean |
  | searchable |  SiteSpecific Boolean |
  | validFrom | SiteSpecfic DateTime  |
  | validTo | SiteSpecfic DateTime  |
  | type | ProductType |
  | creationDate | DateTime |

Catalog:

  | Attribute | Type |
  |-----------|--------|
  | catalogId | String |

  Category:

  | Attribute | Type |
  |-----------|--------|
  | categoryId | String |

  Special:
   
  type - \{\"item\", \"set, \"bundle\", \"master\", \"partOfProductSet\", \"bundled\", \"variant\", \"variationGroup\", \"option\", \"retailSet\", \"partOfRetailSet\"\}

  The sortable properties are:

  | Attribute | Type |
  |-----------|--------|
  | id | String |
  | name | String |
  | creationDate |  DateTime |

Note that catalogId is the ID of the catalog to which products are assigned to

Only attributes in the same bucket can be joined using a disjunction (OR). For instance, when joining id and catalogId, only a conjunction is allowed (AND), whereas id and searchable can be joined using a disjunction because they are in the same bucket. If an attribute is used in a disjunction (OR) that violates this rule, an exception is thrown. The product search retrieves additional properties of the product when expansions are used.

The available expand attribute values are:

- ‘all' retrieves all the product properties.

- ‘availability' retrieves the following properties:
   - ats
   - inStock
   - online

- ‘categories' retrieves the assignedCategories property.

- ‘images' retrieves the image property.

- ‘allImages' used with images retrieves the following properties:
   - image
   - imageGroups

- 'prices' retrieves the following properties:
   - price
   - priceCurrency

- ‘sets' retrieves the following properties:
   - setProducts
   - productSets

- ‘bundles' retrieves the following properties:
   - productBundles
   - bundledProduct

    *
    * If you would like to get a raw Response object use the other searchProducts function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param siteId - The site context.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Products.ProductSearchResult.
    *
    */
    searchProducts(options: {
        parameters?: {
            organizationId?: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.SearchRequest;
    }): Promise<Products.ProductSearchResult>;
    /**
    * Searches for products. The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped into different buckets.

The following is a list of searchable attributes with their corresponding buckets:
  
Main:

  | Attribute | Type |
  |-----------|--------|
  | id | String |
  | name | String |
  | online |  SiteSpecific Boolean |
  | searchable |  SiteSpecific Boolean |
  | validFrom | SiteSpecfic DateTime  |
  | validTo | SiteSpecfic DateTime  |
  | type | ProductType |
  | creationDate | DateTime |

Catalog:

  | Attribute | Type |
  |-----------|--------|
  | catalogId | String |

  Category:

  | Attribute | Type |
  |-----------|--------|
  | categoryId | String |

  Special:
   
  type - \{\"item\", \"set, \"bundle\", \"master\", \"partOfProductSet\", \"bundled\", \"variant\", \"variationGroup\", \"option\", \"retailSet\", \"partOfRetailSet\"\}

  The sortable properties are:

  | Attribute | Type |
  |-----------|--------|
  | id | String |
  | name | String |
  | creationDate |  DateTime |

Note that catalogId is the ID of the catalog to which products are assigned to

Only attributes in the same bucket can be joined using a disjunction (OR). For instance, when joining id and catalogId, only a conjunction is allowed (AND), whereas id and searchable can be joined using a disjunction because they are in the same bucket. If an attribute is used in a disjunction (OR) that violates this rule, an exception is thrown. The product search retrieves additional properties of the product when expansions are used.

The available expand attribute values are:

- ‘all' retrieves all the product properties.

- ‘availability' retrieves the following properties:
   - ats
   - inStock
   - online

- ‘categories' retrieves the assignedCategories property.

- ‘images' retrieves the image property.

- ‘allImages' used with images retrieves the following properties:
   - image
   - imageGroups

- 'prices' retrieves the following properties:
   - price
   - priceCurrency

- ‘sets' retrieves the following properties:
   - setProducts
   - productSets

- ‘bundles' retrieves the following properties:
   - productBundles
   - bundledProduct

    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param siteId - The site context.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Products.ProductSearchResult otherwise.
    *
    */
    searchProducts<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Products.SearchRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : Products.ProductSearchResult>;
}
