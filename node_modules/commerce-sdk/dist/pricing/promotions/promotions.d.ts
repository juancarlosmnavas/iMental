import { BaseClient, ClientConfig, Response } from "@commerce-apps/core";
import type { OperationOptions } from "retry";
import type { RequestInit } from "node-fetch";
export declare namespace Promotions {
    export type PromotionSearchResult = {
        hits: Array<Promotion>;
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type TimeOfDay = {
        timeFrom: string;
        timeTo: string;
    } & {
        [key: string]: any;
    };
    export type Campaign = {
        campaignId: string;
        coupons?: Array<string>;
        creationDate?: any;
        customerGroups?: Array<string>;
        description?: string;
        enabled?: boolean;
        endDate?: any;
        lastModified?: any;
        sourceCodeGroups?: Array<string>;
        startDate?: any;
    } & {
        [key: string]: any;
    };
    export type PromotionCampaignAssignment = {
        campaign?: Campaign;
        campaignId: string;
        coupons?: Array<string>;
        customerGroups?: Array<string>;
        description: string;
        enabled: boolean;
        promotion?: Promotion;
        promotionId: string;
        rank?: number;
        schedule: Schedule;
        sourceCodeGroups?: Array<string>;
    } & {
        [key: string]: any;
    };
    export type Tag = {
        tagId: string;
    } & {
        [key: string]: any;
    };
    export type Promotion = {
        archived?: boolean;
        assignmentInformation?: PromotionAssignmentInformation;
        creationDate?: any;
        currencyCode?: string;
        disableGloballyExcluded?: boolean;
        enabled?: boolean;
        exclusivity?: string;
        id?: string;
        lastModified?: any;
        name?: {} & {
            [key: string]: any;
        };
        promotionClass?: string;
        tags?: Array<Tag>;
        siteId?: string;
    } & {
        [key: string]: any;
    };
    export type PromotionAssignmentInformation = {
        abtestId?: string;
        abtestSegmentId?: string;
        active: boolean;
        activeAbtestAssignments?: Array<PromotionAbtestGroupAssignment>;
        activeCampaignAssignments: Array<PromotionCampaignAssignment>;
        campaignId: string;
        enabled: boolean;
        endDate?: any;
        schedule: Schedule;
        scheduleType: string;
        startDate?: any;
        upcomingAbtestAssignments?: Array<PromotionAbtestGroupAssignment>;
        upcomingCampaignAssignments?: Array<PromotionCampaignAssignment>;
    } & {
        [key: string]: any;
    };
    export type Schedule = {
        endDate?: any;
        recurrence?: Recurrence;
        startDate?: any;
    } & {
        [key: string]: any;
    };
    export type Recurrence = {
        dayOfWeek: Array<string>;
        timeOfDay: TimeOfDay;
    } & {
        [key: string]: any;
    };
    export type PromotionAbtestGroupAssignment = {
        abtestDescription: string;
        abtestId: string;
        enabled: boolean;
        schedule: Schedule;
        segmentDescription: string;
        segmentId: string;
    } & {
        [key: string]: any;
    };
    export type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    export type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {};
    export type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    export type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    export type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    export type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type SearchRequest = {
        limit?: number;
        query: any;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    export type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    export type LocalizedString = {} & {
        [key: string]: any;
    };
    export type PaginatedSearchResult = {
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type ClosedObject = {} & {
        [key: string]: any;
    };
    export type OpenObject = {} & {
        [key: string]: any;
    };
    export type NoPropertiesAllowed = {};
    export type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    export type BoolFilter = {
        filters?: Array<any>;
        operator: string;
    } & {
        [key: string]: any;
    };
    export type PaginatedSearchResultBase = {
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type MatchAllQuery = {} & {
        [key: string]: any;
    };
    export type FilteredQuery = {
        filter: any;
        query: any;
    } & {
        [key: string]: any;
    };
    export type QueryFilter = {
        query: any;
    } & {
        [key: string]: any;
    };
    export type Query = {
        boolQuery?: BoolQuery;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery;
        termQuery?: TermQuery;
        textQuery?: TextQuery;
    } & {
        [key: string]: any;
    };
    export type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    export type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    export type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    export type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    export type BoolQuery = {
        must?: Array<any>;
        mustNot?: Array<any>;
        should?: Array<any>;
    } & {
        [key: string]: any;
    };
    export type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type NestedQuery = {
        path: string;
        query: any;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    export type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    export type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    export type SearchRequestBase = {
        limit?: number;
        query: any;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    export type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    export type L10nString = {} & {
        [key: string]: any;
    };
    export type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    };
    export type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    export {};
}
/**
* [Promotions](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=promotions:Summary)
* ==================================
*
* *Launch and manage promotions across your storefront.*<br />
*
* Simple example:
*
* ```typescript
*   import { Pricing, ClientConfig } from "commerce-sdk";
*   // or
*   const { Pricing, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const promotionsClient = new Pricing.Promotions(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const promotionsClient = new Pricing.Promotions(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 1.0.19<br />
* Last Updated: <br />
* </span>

*

*/
export declare class Promotions extends BaseClient {
    constructor(config: ClientConfig);
    /**
    * Searches for promotions.
 
 The SearchRequest document contains a search object that allows filtering on various attributes.
 
 The query attribute specifies a complex query that can be used to narrow down the search using the following searchable
 attributes:
 
  | Attribute | Type |
  |-----------|--------|
  | id | String |
  | name | String |
  | currecyCode |  String |
  | exclusivity |  String |
  | enabled | Boolean |
 
 Note that only searchable attributes can be used in sorting. Additionally, the following attribute can be used to
 sort:
 
  | Attribute | Type |
  |-----------|--------|
  | promotionClass | String |
    *
    * If you would like to get a raw Response object use the other promotionsSearch function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Promotions.PromotionSearchResult.
    *
    */
    promotionsSearch(options: {
        parameters?: {
            organizationId?: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Promotions.SearchRequest;
    }): Promise<Promotions.PromotionSearchResult>;
    /**
    * Searches for promotions.
 
 The SearchRequest document contains a search object that allows filtering on various attributes.
 
 The query attribute specifies a complex query that can be used to narrow down the search using the following searchable
 attributes:
 
  | Attribute | Type |
  |-----------|--------|
  | id | String |
  | name | String |
  | currecyCode |  String |
  | exclusivity |  String |
  | enabled | Boolean |
 
 Note that only searchable attributes can be used in sorting. Additionally, the following attribute can be used to
 sort:
 
  | Attribute | Type |
  |-----------|--------|
  | promotionClass | String |
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Promotions.PromotionSearchResult otherwise.
    *
    */
    promotionsSearch<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Promotions.SearchRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : Promotions.PromotionSearchResult>;
    /**
    * Deletes the promotion by ID.
    *
    * If you would like to get a raw Response object use the other deletePromotion function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param id - The ID of the promotion to create.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    deletePromotion(options?: {
        parameters?: {
            organizationId?: string;
            id: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Deletes the promotion by ID.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param id - The ID of the promotion to create.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    deletePromotion<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            id: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Action to get promotion information.
    *
    * If you would like to get a raw Response object use the other getPromotion function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param id - The ID of the promotion to create.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Promotions.Promotion.
    *
    */
    getPromotion(options?: {
        parameters?: {
            organizationId?: string;
            id: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Promotions.Promotion>;
    /**
    * Action to get promotion information.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param id - The ID of the promotion to create.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Promotions.Promotion otherwise.
    *
    */
    getPromotion<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            id: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Promotions.Promotion>;
    /**
    * Updates the promotion with the specified information.
    *
    * If you would like to get a raw Response object use the other updatePromotion function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param id - The ID of the promotion to create.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Promotions.Promotion.
    *
    */
    updatePromotion(options: {
        parameters?: {
            organizationId?: string;
            id: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Promotions.Promotion;
    }): Promise<Promotions.Promotion>;
    /**
    * Updates the promotion with the specified information.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param id - The ID of the promotion to create.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Promotions.Promotion otherwise.
    *
    */
    updatePromotion<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            id: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Promotions.Promotion;
    }, rawResponse?: T): Promise<T extends true ? Response : Promotions.Promotion>;
    /**
    * Creates a promotion using the information provided.
    *
    * If you would like to get a raw Response object use the other createPromotion function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param id - The ID of the promotion to create.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Promotions.Promotion.
    *
    */
    createPromotion(options: {
        parameters?: {
            organizationId?: string;
            id: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Promotions.Promotion;
    }): Promise<Promotions.Promotion>;
    /**
    * Creates a promotion using the information provided.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param id - The ID of the promotion to create.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Promotions.Promotion otherwise.
    *
    */
    createPromotion<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            id: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Promotions.Promotion;
    }, rawResponse?: T): Promise<T extends true ? Response : Promotions.Promotion>;
}
