import { BaseClient, ClientConfig, Response } from "@commerce-apps/core";
import type { OperationOptions } from "retry";
import type { RequestInit } from "node-fetch";
export declare namespace GiftCertificates {
    export type Money = {
        currencyMnemonic: string;
        value: number;
    } & {
        [key: string]: any;
    };
    export type GiftCertificate = {
        amount?: Money;
        balance?: Money;
        creationDate?: any;
        description?: string;
        enabled?: boolean;
        lastModified?: any;
        maskedGiftCertificateCode?: string;
        merchantId?: string;
        message?: string;
        orderNo?: string;
        recipientEmail?: string;
        recipientName?: string;
        senderName?: string;
        status?: string;
        transactions?: Array<AccountTransaction>;
    } & {
        [key: string]: any;
    };
    export type GiftCertificateSearchResult = {
        hits: Array<GiftCertificate>;
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type AccountTransaction = {
        amount: Money;
        orderNo: string;
        timestamp: any;
        typeCode: string;
    } & {
        [key: string]: any;
    };
    export type GiftCertificates = {
        offset: any;
        data?: Array<GiftCertificate>;
        limit: number;
        total?: number;
    } & {
        [key: string]: any;
    };
    export type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    export type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {};
    export type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    export type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    export type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type SearchRequest = {
        limit?: number;
        query: any;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    export type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    export type LocalizedString = {} & {
        [key: string]: any;
    };
    export type PaginatedSearchResult = {
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type ClosedObject = {} & {
        [key: string]: any;
    };
    export type OpenObject = {} & {
        [key: string]: any;
    };
    export type NoPropertiesAllowed = {};
    export type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    export type BoolFilter = {
        filters?: Array<any>;
        operator: string;
    } & {
        [key: string]: any;
    };
    export type PaginatedSearchResultBase = {
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type MatchAllQuery = {} & {
        [key: string]: any;
    };
    export type FilteredQuery = {
        filter: any;
        query: any;
    } & {
        [key: string]: any;
    };
    export type QueryFilter = {
        query: any;
    } & {
        [key: string]: any;
    };
    export type Query = {
        boolQuery?: BoolQuery;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery;
        termQuery?: TermQuery;
        textQuery?: TextQuery;
    } & {
        [key: string]: any;
    };
    export type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    export type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    export type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    export type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    export type BoolQuery = {
        must?: Array<any>;
        mustNot?: Array<any>;
        should?: Array<any>;
    } & {
        [key: string]: any;
    };
    export type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type NestedQuery = {
        path: string;
        query: any;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    export type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    export type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    export type SearchRequestBase = {
        limit?: number;
        query: any;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    export type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    export type L10nString = {} & {
        [key: string]: any;
    };
    export type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    };
    export type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    export {};
}
/**
* [Gift Certificates](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=gift-certificates:Summary)
* ==================================
*
* *Manage your gift certificates.*<br />
*
* Simple example:
*
* ```typescript
*   import { Pricing, ClientConfig } from "commerce-sdk";
*   // or
*   const { Pricing, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const giftCertificatesClient = new Pricing.GiftCertificates(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const giftCertificatesClient = new Pricing.GiftCertificates(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 1.0.24<br />
* Last Updated: <br />
* </span>

*

*/
export declare class GiftCertificates extends BaseClient {
    constructor(config: ClientConfig);
    /**
    * Creates a gift certificate using the information provided. If a gift certificate with
 the same unique identifier is generated, it is deleted and a new one is created.
    *
    * If you would like to get a raw Response object use the other createGiftCertificate function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type GiftCertificates.GiftCertificate.
    *
    */
    createGiftCertificate(options: {
        parameters?: {
            organizationId?: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: GiftCertificates.GiftCertificate;
    }): Promise<GiftCertificates.GiftCertificate>;
    /**
    * Creates a gift certificate using the information provided. If a gift certificate with
 the same unique identifier is generated, it is deleted and a new one is created.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type GiftCertificates.GiftCertificate otherwise.
    *
    */
    createGiftCertificate<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: GiftCertificates.GiftCertificate;
    }, rawResponse?: T): Promise<T extends true ? Response : GiftCertificates.GiftCertificate>;
    /**
    * Searches for gift certificates. The query attribute specifies a complex query that can be used to narrow down the search. These are the list of searchable attributes:
 
| Attribute | Type | Sortable |
|-----------|--------|----------|
| merchantId | String | yes |
| maskedGiftCertificateCode * | String | no |
| orderNo | String | yes |
| senderName | String | yes |
| recipientName | String | yes |
| recipientEmail | String | yes |
| status | String | yes |
| enabled | Boolean | yes |
| message | String | yes |
| description | String | yes |
| creationDate | Date | yes |
| currencyMnemonic ** | String | yes |
 
## Notes:
  * *`maskedGiftCertificateCode`, also known as just code, can only be used in a term query.  If a
 four-character code is supplied, it is assumed that the search is on the unmasked portion of the code, otherwise
 the full code must be matched.  Text queries are not allowed.
  * **`currencyMnemonic` can only be joined with other attributes using a conjunction (`AND`).
  * Only searchable attributes can be used in sorting.
    *
    * If you would like to get a raw Response object use the other giftCertificatesSearch function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type GiftCertificates.GiftCertificateSearchResult.
    *
    */
    giftCertificatesSearch(options: {
        parameters?: {
            organizationId?: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: GiftCertificates.SearchRequest;
    }): Promise<GiftCertificates.GiftCertificateSearchResult>;
    /**
    * Searches for gift certificates. The query attribute specifies a complex query that can be used to narrow down the search. These are the list of searchable attributes:
 
| Attribute | Type | Sortable |
|-----------|--------|----------|
| merchantId | String | yes |
| maskedGiftCertificateCode * | String | no |
| orderNo | String | yes |
| senderName | String | yes |
| recipientName | String | yes |
| recipientEmail | String | yes |
| status | String | yes |
| enabled | Boolean | yes |
| message | String | yes |
| description | String | yes |
| creationDate | Date | yes |
| currencyMnemonic ** | String | yes |
 
## Notes:
  * *`maskedGiftCertificateCode`, also known as just code, can only be used in a term query.  If a
 four-character code is supplied, it is assumed that the search is on the unmasked portion of the code, otherwise
 the full code must be matched.  Text queries are not allowed.
  * **`currencyMnemonic` can only be joined with other attributes using a conjunction (`AND`).
  * Only searchable attributes can be used in sorting.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type GiftCertificates.GiftCertificateSearchResult otherwise.
    *
    */
    giftCertificatesSearch<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: GiftCertificates.SearchRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : GiftCertificates.GiftCertificateSearchResult>;
    /**
    * Deletes the gift certificate by merchant ID.
    *
    * If you would like to get a raw Response object use the other deleteGiftCertificate function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param merchantId - The merchant ID of the requested gift certificate.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type GiftCertificates.GiftCertificate.
    *
    */
    deleteGiftCertificate(options?: {
        parameters?: {
            organizationId?: string;
            merchantId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<GiftCertificates.GiftCertificate>;
    /**
    * Deletes the gift certificate by merchant ID.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param merchantId - The merchant ID of the requested gift certificate.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type GiftCertificates.GiftCertificate otherwise.
    *
    */
    deleteGiftCertificate<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            merchantId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : GiftCertificates.GiftCertificate>;
    /**
    * Action to get gift certificate information using merchant ID.
    *
    * If you would like to get a raw Response object use the other getGiftCertificate function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param merchantId - The merchant ID of the requested gift certificate.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type GiftCertificates.GiftCertificate.
    *
    */
    getGiftCertificate(options?: {
        parameters?: {
            organizationId?: string;
            merchantId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<GiftCertificates.GiftCertificate>;
    /**
    * Action to get gift certificate information using merchant ID.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param merchantId - The merchant ID of the requested gift certificate.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type GiftCertificates.GiftCertificate otherwise.
    *
    */
    getGiftCertificate<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            merchantId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : GiftCertificates.GiftCertificate>;
    /**
    * Updates the gift certificate with the specified information using merchant ID.
    *
    * If you would like to get a raw Response object use the other updateGiftCertificate function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param merchantId - The merchant ID of the requested gift certificate.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type GiftCertificates.GiftCertificate.
    *
    */
    updateGiftCertificate(options: {
        parameters?: {
            organizationId?: string;
            merchantId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: GiftCertificates.GiftCertificate;
    }): Promise<GiftCertificates.GiftCertificate>;
    /**
    * Updates the gift certificate with the specified information using merchant ID.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param merchantId - The merchant ID of the requested gift certificate.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type GiftCertificates.GiftCertificate otherwise.
    *
    */
    updateGiftCertificate<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            merchantId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: GiftCertificates.GiftCertificate;
    }, rawResponse?: T): Promise<T extends true ? Response : GiftCertificates.GiftCertificate>;
}
