import { BaseClient, ClientConfig, Response } from "@commerce-apps/core";
import type { OperationOptions } from "retry";
import type { RequestInit } from "node-fetch";
export declare namespace Coupons {
    export type CouponRedemptionSearchResult = {
        hits: Array<CouponRedemption>;
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type CouponCodes = {
        limit?: number;
        data: Array<CouponCode>;
        offset?: any;
        total: number;
    } & {
        [key: string]: any;
    };
    export type RedemptionLimits = {
        limitPerCode: number;
        limitPerCustomer: number;
        limitPerTimeFrame: RedemptionLimitPerPeriod;
    } & {
        [key: string]: any;
    };
    export type CouponRedemption = {
        code: string;
        couponId: string;
        creationDate: any;
        customerEmail: string;
        orderNo: string;
        viewOrderUrl: string;
    } & {
        [key: string]: any;
    };
    export type RedemptionLimitPerPeriod = {
        limit: number;
        redemptionTimeFrame: number;
    } & {
        [key: string]: any;
    };
    export type CouponCode = {
        code: string;
        issued: boolean;
        redemptionCount: number;
    } & {
        [key: string]: any;
    };
    export type CouponSearchResult = {
        hits: Array<Coupon>;
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type Coupon = {
        couponId: string;
        creationDate?: any;
        description?: string;
        enabled: boolean;
        exportedCodeCount?: number;
        lastModified?: any;
        redemptionCount?: number;
        redemptionLimits?: RedemptionLimits;
        singleCode?: string;
        systemCodesConfig?: CouponSystemCodeConfig;
        totalCodesCount?: number;
        type: string;
    } & {
        [key: string]: any;
    };
    export type CouponMultiCodesRequest = {
        codes: Array<string>;
    } & {
        [key: string]: any;
    };
    export type CouponSystemCodeConfig = {
        codePrefix: string;
        numberOfCodes: number;
    } & {
        [key: string]: any;
    };
    export type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    export type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {};
    export type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    export type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    export type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    export type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type SearchRequest = {
        limit?: number;
        query: any;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    export type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    export type LocalizedString = {} & {
        [key: string]: any;
    };
    export type PaginatedSearchResult = {
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type ClosedObject = {} & {
        [key: string]: any;
    };
    export type OpenObject = {} & {
        [key: string]: any;
    };
    export type NoPropertiesAllowed = {};
    export type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    export type BoolFilter = {
        filters?: Array<any>;
        operator: string;
    } & {
        [key: string]: any;
    };
    export type PaginatedSearchResultBase = {
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type MatchAllQuery = {} & {
        [key: string]: any;
    };
    export type FilteredQuery = {
        filter: any;
        query: any;
    } & {
        [key: string]: any;
    };
    export type QueryFilter = {
        query: any;
    } & {
        [key: string]: any;
    };
    export type Query = {
        boolQuery?: BoolQuery;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery;
        termQuery?: TermQuery;
        textQuery?: TextQuery;
    } & {
        [key: string]: any;
    };
    export type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    export type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    export type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    export type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    export type BoolQuery = {
        must?: Array<any>;
        mustNot?: Array<any>;
        should?: Array<any>;
    } & {
        [key: string]: any;
    };
    export type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    export type NestedQuery = {
        path: string;
        query: any;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    export type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    export type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    export type SearchRequestBase = {
        limit?: number;
        query: any;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    export type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    export type L10nString = {} & {
        [key: string]: any;
    };
    export type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    };
    export type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    export {};
}
/**
* [Coupons](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=coupons:Summary)
* ==================================
*
* *Manage coupons for use in your storefront.*<br />
*
* Simple example:
*
* ```typescript
*   import { Pricing, ClientConfig } from "commerce-sdk";
*   // or
*   const { Pricing, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const couponsClient = new Pricing.Coupons(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const couponsClient = new Pricing.Coupons(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 1.0.22<br />
* Last Updated: <br />
* </span>

*

*/
export declare class Coupons extends BaseClient {
    constructor(config: ClientConfig);
    /**
    * Searches for coupons.

 The Coupon Search document contains a search object that allows filtering on various attributes.

 The query attribute specifies a complex query that can be used to narrow down the search with the following searchable attributes:
 
| Attribute | Type |
|-----------|--------|
| couponId| String |
| description | String |
| type | one of \{\"single_code\", \"multiple_codes\", \"system_codes\"\} |
| enabled | Boolean |

 Note that only searchable attributes can be used in sorting.
    *
    * If you would like to get a raw Response object use the other couponsSearch function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Coupons.CouponSearchResult.
    *
    */
    couponsSearch(options: {
        parameters?: {
            organizationId?: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Coupons.SearchRequest;
    }): Promise<Coupons.CouponSearchResult>;
    /**
    * Searches for coupons.

 The Coupon Search document contains a search object that allows filtering on various attributes.

 The query attribute specifies a complex query that can be used to narrow down the search with the following searchable attributes:
 
| Attribute | Type |
|-----------|--------|
| couponId| String |
| description | String |
| type | one of \{\"single_code\", \"multiple_codes\", \"system_codes\"\} |
| enabled | Boolean |

 Note that only searchable attributes can be used in sorting.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Coupons.CouponSearchResult otherwise.
    *
    */
    couponsSearch<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Coupons.SearchRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : Coupons.CouponSearchResult>;
    /**
    * Searches for coupon redemptions.

The Coupon Redemption Search document contains a search object that allows filtering on various attributes.


The query attribute specifies a complex query that can be used to narrow down the search with the following searchable attributes:

  | Attribute | Type |
  |-----------|--------|
  | code| String |
  | couponId | String |
  | customerEmail | String |
  | orderNo | String |

Note that only searchable attributes can be used in sorting.

If the user role does not have the `View_Coupon_Codes` permission, then the coupon codes returned are masked.
    *
    * If you would like to get a raw Response object use the other couponRedemptionsSearch function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Coupons.CouponRedemptionSearchResult.
    *
    */
    couponRedemptionsSearch(options: {
        parameters?: {
            organizationId?: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Coupons.SearchRequest;
    }): Promise<Coupons.CouponRedemptionSearchResult>;
    /**
    * Searches for coupon redemptions.

The Coupon Redemption Search document contains a search object that allows filtering on various attributes.


The query attribute specifies a complex query that can be used to narrow down the search with the following searchable attributes:

  | Attribute | Type |
  |-----------|--------|
  | code| String |
  | couponId | String |
  | customerEmail | String |
  | orderNo | String |

Note that only searchable attributes can be used in sorting.

If the user role does not have the `View_Coupon_Codes` permission, then the coupon codes returned are masked.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Coupons.CouponRedemptionSearchResult otherwise.
    *
    */
    couponRedemptionsSearch<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Coupons.SearchRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : Coupons.CouponRedemptionSearchResult>;
    /**
    * Delete a coupon by ID.
    *
    * If you would like to get a raw Response object use the other deleteCoupon function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param couponId - The ID of the coupon to create.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type void.
    *
    */
    deleteCoupon(options?: {
        parameters?: {
            organizationId?: string;
            couponId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<void>;
    /**
    * Delete a coupon by ID.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param couponId - The ID of the coupon to create.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    deleteCoupon<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            couponId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
    * Returns coupon information for the given coupon ID.
 If the user role does not have the View_Coupon_Codes permission, then the coupon codes returned are masked.
    *
    * If you would like to get a raw Response object use the other getCoupon function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param couponId - The ID of the coupon to create.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Coupons.Coupon.
    *
    */
    getCoupon(options?: {
        parameters?: {
            organizationId?: string;
            couponId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Coupons.Coupon>;
    /**
    * Returns coupon information for the given coupon ID.
 If the user role does not have the View_Coupon_Codes permission, then the coupon codes returned are masked.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param couponId - The ID of the coupon to create.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Coupons.Coupon otherwise.
    *
    */
    getCoupon<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            couponId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Coupons.Coupon>;
    /**
    * Updates the coupon with the specified information.
    *
    * If you would like to get a raw Response object use the other updateCoupon function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param couponId - The ID of the coupon to create.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Coupons.Coupon.
    *
    */
    updateCoupon(options: {
        parameters?: {
            organizationId?: string;
            couponId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Coupons.Coupon;
    }): Promise<Coupons.Coupon>;
    /**
    * Updates the coupon with the specified information.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param couponId - The ID of the coupon to create.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Coupons.Coupon otherwise.
    *
    */
    updateCoupon<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            couponId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Coupons.Coupon;
    }, rawResponse?: T): Promise<T extends true ? Response : Coupons.Coupon>;
    /**
    * Creates a coupon using the information provided. If a coupon exists with the same unique identifier,
 the coupon is replaced completely.
    *
    * If you would like to get a raw Response object use the other createCoupon function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param couponId - The ID of the coupon to create.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Coupons.Coupon.
    *
    */
    createCoupon(options: {
        parameters?: {
            organizationId?: string;
            couponId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Coupons.Coupon;
    }): Promise<Coupons.Coupon>;
    /**
    * Creates a coupon using the information provided. If a coupon exists with the same unique identifier,
 the coupon is replaced completely.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param couponId - The ID of the coupon to create.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Coupons.Coupon otherwise.
    *
    */
    createCoupon<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            couponId: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Coupons.Coupon;
    }, rawResponse?: T): Promise<T extends true ? Response : Coupons.Coupon>;
    /**
    * Get the coupon codes for the given coupon.

 If the user role does not have the View_Coupon_Codes permission, then the coupon codes returned are masked.
    *
    * If you would like to get a raw Response object use the other getCouponCodes function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param couponId - The ID of the coupon to create.
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Coupons.CouponCodes.
    *
    */
    getCouponCodes(options?: {
        parameters?: {
            organizationId?: string;
            couponId: string;
            offset?: any;
            limit?: number;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<Coupons.CouponCodes>;
    /**
    * Get the coupon codes for the given coupon.

 If the user role does not have the View_Coupon_Codes permission, then the coupon codes returned are masked.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param couponId - The ID of the coupon to create.
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Coupons.CouponCodes otherwise.
    *
    */
    getCouponCodes<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            couponId: string;
            offset?: any;
            limit?: number;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : Coupons.CouponCodes>;
    /**
    * Add or delete (modify) multiple codes to and from the supplied coupon.
    *
    * If you would like to get a raw Response object use the other updateCouponCodes function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param couponId - The ID of the coupon to create.
    * @param delete - Pass as true to delete the passed codes.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type void.
    *
    */
    updateCouponCodes(options: {
        parameters?: {
            organizationId?: string;
            couponId: string;
            delete?: boolean;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Coupons.CouponMultiCodesRequest;
    }): Promise<void>;
    /**
    * Add or delete (modify) multiple codes to and from the supplied coupon.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param couponId - The ID of the coupon to create.
    * @param delete - Pass as true to delete the passed codes.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
    updateCouponCodes<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            couponId: string;
            delete?: boolean;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: Coupons.CouponMultiCodesRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : void>;
}
