/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Assignments = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@commerce-apps/core");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const USER_AGENT_HEADER = "user-agent";
const USER_AGENT_VALUE = "commerce-sdk@2.10.1;";
/**
* [Assignments](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=assignments:Summary)
* ==================================
*
* *Search for promotions associated with campaigns.*<br />
*
* Simple example:
*
* ```typescript
*   import { Pricing, ClientConfig } from "commerce-sdk";
*   // or
*   const { Pricing, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const assignmentsClient = new Pricing.Assignments(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const assignmentsClient = new Pricing.Assignments(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 1.0.20<br />
* Last Updated: <br />
* </span>

*

*/
class Assignments extends core_1.BaseClient {
  /**
   *
   */
  constructor(config) {
    super(config);
    if (!!!config.baseUri) {
      this.clientConfig.baseUri =
        "https://{shortCode}.api.commercecloud.salesforce.com/pricing/assignments/{version}";
    }
  }
  /**
    * Searches for promotion campaign assignments.

The promotion campaign assignment search document contains a search object that allows filtering on various attributes.

The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped into different buckets.

The following is a list of searchable attributes with their corresponding buckets:
  
  main:
  
  | Attribute | Type |
  |-----------|--------|
  | rank| Integer |
  | startDate | Date |
  | endDate | Date |
   
  campaign:
  
  | Attribute | Type |
  |-----------|--------|
  | campaign| String |
   
  promotion:
  
  | Attribute | Type |
  |-----------|--------|
  | promotionId| String |
  | description | String |
  | enabled | Boolean |
   
  special handling:
  
  | Attribute | Type |
  |-----------|--------|
  | couponId| String |
   
Only fields in the same bucket can be joined using a disjunction (or). For instance, when joining campaignId and rank, only a conjunction (and) is allowed, whereas promotionId and description can be joined to each other using a disjunction because they are in the same bucket. Special handling fields must always use conjunctions. If the field is used in a disjunction that violates this rule, an exception is thrown.

   
Note that only searchable attributes can be used in sorting.

    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Assignments.PromotionCampaignAssignmentSearchResult otherwise.
    *
    */
  assignmentsSearch(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.post(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/assignments",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
}
exports.Assignments = Assignments;
//# sourceMappingURL=assignments.js.map
