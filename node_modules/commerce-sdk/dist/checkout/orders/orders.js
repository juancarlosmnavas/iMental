/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Orders = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@commerce-apps/core");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const USER_AGENT_HEADER = "user-agent";
const USER_AGENT_VALUE = "commerce-sdk@2.10.1;";
/**
* [Orders](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=orders:Summary)
* ==================================
*
* *Manage order and order payment status.*<br />
*
* Simple example:
*
* ```typescript
*   import { Checkout, ClientConfig } from "commerce-sdk";
*   // or
*   const { Checkout, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const ordersClient = new Checkout.Orders(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const ordersClient = new Checkout.Orders(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 1.3.5<br />
* Last Updated: <br />
* </span>

*

*/
class Orders extends core_1.BaseClient {
  /**
   *
   */
  constructor(config) {
    super(config);
    if (!!!config.baseUri) {
      this.clientConfig.baseUri =
        "https://{shortCode}.api.commercecloud.salesforce.com/checkout/orders/{version}";
    }
  }
  /**
   * Returns the details of orders that match the query filters. By default, calling this API with no filter returns the 100 most recently created orders. To return up to 200 orders, use the limit parameter. To return a page of results past the first page, use a resource offset.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param sortBy - Sort results by creation date or last modified date. The default is creation date.
   * @param sortOrder - Sort results in ascending or descending order. The default is descending.
   * @param status - Filter results by status. Valid statuses are 'new', 'completed', and 'cancelled'. You can include up to two statuses as a comma-separated string.
   * @param exportStatus - Filter results by export status. Valid export statuses are 'not_exported', 'exported', 'ready', and 'failed'. You can include up to three export statuses as a comma-separated string.
   * @param externalStatus - Filter results by external status.
   * @param confirmationStatus - Filter results by confirmation status. Valid confirmation statuses are 'confirmed' and 'not_confirmed'.
   * @param paymentStatus - Filter results by payment status. Valid payment statuses are 'not_paid', 'part_paid', and 'paid'. You can include up to two payment statuses as a comma-separated string.
   * @param shippingStatus - Filter results by shipping status. Valid shipping statuses are 'not_shipped', 'part_shipped', and 'shipped'. You can include up to two shipping statuses as a comma-separated string.
   * @param siteId -
   * @param offset -
   * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 100.
   * @param creationDateFrom - If passed, will return records where the `creationDate` is equal to or greater than the passed `datetime`.
   * @param creationDateTo - If passed, will return records where the `creationDate` is less than the passed `datetime`.
   * @param lastModifiedDateFrom - If passed, will return records where the `lastModifiedDate` is equal to or greater than the passed `datetime`.
   * @param lastModifiedDateTo - If passed, will return records where the `lastModifiedDate` is less than the passed `datetime`.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Orders.OrdersResponse otherwise.
   *
   */
  getOrders(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.get(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/orders",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
    * ## Overview
The Create Order API (GA summer 2022) should be used when a fully calculated and paid or authorized order is created in any third-party system.

This API offers the possibility to create an order on-the-fly in the Commerce Cloud platform by passing the order as json payload in the body of the POST request.

Other than the Basket API this API decouples any relation to other system domains, such as:
- Products
- Inventory
- Promotions
- Gift certificates
- Coupons

The order isn't treated differently than any other orders in the Commerce Cloud platform, and any status updates or order exports behave the same.

## Preconditions
The checkout should happen before the POST Order API is called. That means all sanity checks *are* applied, the inventory *is* reserved, the payment *is* authorized, and the Basket *is* fully calculated (including all promotions).

When meeting these conditions, it's possible to create the order in the Commerce Cloud platform.

## Decoupling
This API can create an order with unknown products, with different pricing for known products, any unplanned price-adjustments (unrelated to the system's configured promotions), passing unknown payment, and shipping methods.

\>There's no lookup or calculation, even if the passed object is configured in the platform.

## Still Coupled
The API is still coupled to the following:

- the taxation policy (gross or net) is used from the site's preferences.
- the passed currency must be defined in the site.

## Calculation
There's no multiplying or dividing operations performed by the platform on this order.

The following fields are summed up during runtime on the platform:

### Order Level
- `adjustedMerchandizeTotalTax`
- `adjustedShippingTotalTax`
- `merchandizeTotalTax`
- `adjustedTax`
- `productSubTotal`
- `productTotal`
- `shippingTotalTax`
- `orderTotal`
- `taxTotal`


### Line Item Level
- `priceAfterItemDiscount`
- `priceAfterOrderDiscount`
- `adjustedTax`

### Shipment
- `merchandizeTotalTax`
- `productSubTotal`
- `productTotal`
- `shippingTotalTax`

To make sure the fields are summed up correctly, the passed `orderTotal` and `taxTotal` are compared to the platform's summed up `orderTotal` and `taxTotal`.

An `InvalidOrderTotalException` or `InvalidTaxTotalException` is thrown if the calculation doesn't match.

The `orderTotal` and `taxTotal` are calculated as follows:
- `orderTotal` = sum(`ProductLineItems.grossPrice`) + sum(`Shipments.shipmentTotal`) - sum(`ProductLineItems.PriceAdjustments.grossPrice` + `Order.PriceAdjustments.grossPrice`)
- `taxTotal` = sum (`ProductLineItems.tax`) + sum(`Shipments.taxTotal`) - sum(`ProductLineItems.PriceAdjustments.tax` + `Order.PriceAdjustments.tax`)


## Order Status
The order is automatically placed after creation.

The payment status can be set via payload.

All other status can be set via PATCH `orders/\{orderNo\}/status`.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
  createOrders(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.post(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/orders",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Returns the details of the order with the specified order number.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Orders.Order otherwise.
   *
   */
  getOrder(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      orderNo: parameters["orderNo"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.get(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/orders/{orderNo}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Updates the order.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrder(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      orderNo: parameters["orderNo"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.patch(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/orders/{orderNo}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Updates the order confirmation status.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrderConfirmationStatus(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      orderNo: parameters["orderNo"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.put(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/orders/{orderNo}/confirmation-status",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Updates the order export status. If on-order inventory is turned on for the associated inventory list, then setting the export status to EXPORTED finalizes on-order inventory transactions for this order by changing their type from on-order to final.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrderExportStatus(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      orderNo: parameters["orderNo"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.put(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/orders/{orderNo}/export-status",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Updates the order external status.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrderExternalStatus(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      orderNo: parameters["orderNo"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.put(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/orders/{orderNo}/external-status",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Updates the order payment status.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrderPaymentStatus(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      orderNo: parameters["orderNo"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.put(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/orders/{orderNo}/payment-status",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Updates the order shipping status.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrderShippingStatus(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      orderNo: parameters["orderNo"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.put(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/orders/{orderNo}/shipping-status",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
    * Updates the order status. Orders in status NEW, COMPLETED or CANCELLED can't be changed to status CREATED or FAILED.

Changing the status processes different actions on inventory, coupons, wishlists and the order itself. Here are the supported actions:

Fail Order: Release inventory and remove coupon redemptions. (CREATED -\> FAILED)
Undo Fail Order: Reserve inventory and recreate coupon redemptions. (FAILED -\> CREATED)
Place Order: Generate Shipment and Invoice numbers. (CREATED -\> NEW, COMPLETED or CANCELLED)
Cancel Order: Release inventory, remove wishlist purchases, and remove coupon redemptions. (NEW, COMPLETED -\> CANCELLED)
Undo Cancel Order: Reserve inventory, add wishlist purchases, and recreate coupon redemptions. (CANCELLED -\> NEW, COMPLETED)

Actions can fail for example when inventory is not available anymore.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param orderNo - The order number.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
  updateOrderStatus(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      orderNo: parameters["orderNo"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.put(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/orders/{orderNo}/status",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Updates the payment instrument of an order.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param paymentInstrumentId - ID of the payment instrument.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrderPaymentInstrument(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      orderNo: parameters["orderNo"],
      paymentInstrumentId: parameters["paymentInstrumentId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.patch(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/orders/{orderNo}/payment-instruments/{paymentInstrumentId}",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Updates the transaction of an order payment instrument.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param paymentInstrumentId - ID of the payment instrument.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrderPaymentTransaction(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      orderNo: parameters["orderNo"],
      paymentInstrumentId: parameters["paymentInstrumentId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.patch(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/orders/{orderNo}/payment-instruments/{paymentInstrumentId}/transaction",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
  /**
   * Creates or replaces the shipping address.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param shipmentId - ID of the shipment.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrderShippingAddress(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      orderNo: parameters["orderNo"],
      shipmentId: parameters["shipmentId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    const headers = core_1.mergeHeaders(core_1.getHeaders(options), {
      "Content-Type": "application/json",
      [USER_AGENT_HEADER]: USER_AGENT_VALUE,
    });
    // @ts-ignore
    return core_1.StaticClient.put(
      Object.assign(
        {
          client: this,
          rawResponse: rawResponse,
          path: "/organizations/{organizationId}/orders/{orderNo}/shipments/{shipmentId}/shipping-address",
          pathParameters: pathParameters,
          queryParameters: queryParameters,
          retrySettings: (options || {}).retrySettings,
          headers: headers,
          body: (options || {}).body,
        },
        options.fetchOptions && { fetchOptions: options.fetchOptions }
      )
    );
  }
}
exports.Orders = Orders;
//# sourceMappingURL=orders.js.map
