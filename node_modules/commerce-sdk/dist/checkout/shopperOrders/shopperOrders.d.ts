import { BaseClient, ClientConfig, Response } from "@commerce-apps/core";
import type { OperationOptions } from "retry";
import type { RequestInit } from "node-fetch";
export declare namespace ShopperOrders {
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    type LocalizedString = {} & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: Query;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<Filter>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: Query;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: Filter;
        query: Query;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: Query;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery;
        termQuery?: TermQuery;
        textQuery?: TextQuery;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<Query>;
        mustNot?: Array<Query>;
        should?: Array<Query>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: Query;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        field: string;
        from?: any;
        fromInclusive?: boolean;
        to?: any;
        toInclusive?: boolean;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type L10nString = {} & {
        [key: string]: any;
    };
    type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    };
    type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    type TaxItems = {
        taxItems?: Array<TaxItem>;
    } & {
        [key: string]: any;
    };
    type PaymentCardSpec = {
        cardType?: string;
        checksumVerificationEnabled?: boolean;
        description?: string;
        image?: string;
        name?: string;
        numberLengths?: Array<string>;
        numberPrefixes?: Array<string>;
    } & {
        [key: string]: any;
    };
    type OrderAddress = {
        address1?: string;
        address2?: string;
        city?: string;
        companyName?: string;
        countryCode?: string;
        firstName?: string;
        fullName?: string;
        id?: string;
        jobTitle?: string;
        lastName?: string;
        phone?: string;
        postBox?: string;
        postalCode?: string;
        salutation?: string;
        secondName?: string;
        stateCode?: string;
        suffix?: string;
        suite?: string;
        title?: string;
    } & {
        [key: string]: any;
    };
    type BasketsResult = {
        baskets: Array<Basket>;
        total: number;
    } & {
        [key: string]: any;
    };
    type PaymentCard = {
        cardType?: string;
        creditCardExpired?: boolean;
        creditCardToken?: string;
        expirationMonth?: number;
        expirationYear?: number;
        holder?: string;
        issueNumber?: string;
        maskedNumber?: string;
        numberLastDigits?: string;
        validFromMonth?: number;
        validFromYear?: number;
    };
    type NotesResult = {
        notes?: Array<Note>;
    } & {
        [key: string]: any;
    };
    type ShippingItem = {
        adjustedTax?: number;
        basePrice?: number;
        itemId?: string;
        itemText?: string;
        price?: number;
        priceAdjustments?: Array<PriceAdjustment>;
        priceAfterItemDiscount?: number;
        shipmentId?: string;
        tax?: number;
        taxBasis?: number;
        taxClassId?: string;
        taxRate?: number;
    } & {
        [key: string]: any;
    };
    type Discount = {
        amount?: number;
        percentage?: number;
        priceBookId?: string;
        type: string;
    } & {
        [key: string]: any;
    };
    type Note = {
        createdBy?: string;
        creationDate?: any;
        id?: string;
        subject?: string;
        text?: string;
    };
    type CouponItem = {
        code: string;
        couponItemId?: string;
        statusCode?: string;
        valid?: boolean;
    } & {
        [key: string]: any;
    };
    type PromotionLink = {
        calloutMsg?: string;
        name?: string;
        promotionId?: string;
        title?: string;
    };
    type PriceBookIds = Array<string>;
    type ShippingPromotion = {
        calloutMsg?: string;
        promotionId?: string;
        promotionName?: string;
    } & {
        [key: string]: any;
    };
    type ProductItem = {
        adjustedTax?: number;
        basePrice?: number;
        bonusDiscountLineItemId?: string;
        bonusProductLineItem?: boolean;
        bundledProductItems?: Array<ProductItem>;
        gift?: boolean;
        giftMessage?: string;
        inventoryId?: string;
        itemId?: string;
        itemText?: string;
        optionItems?: Array<OptionItem>;
        price?: number;
        priceAdjustments?: Array<PriceAdjustment>;
        priceAfterItemDiscount?: number;
        priceAfterOrderDiscount?: number;
        productId?: string;
        productListItem?: ProductListItemReference;
        productName?: string;
        quantity?: number;
        shipmentId?: string;
        shippingItemId?: string;
        tax?: number;
        taxBasis?: number;
        taxClassId?: string;
        taxRate?: number;
    } & {
        [key: string]: any;
    };
    type BasketPaymentInstrumentRequest = {
        amount?: number;
        bankRoutingNumber?: string;
        giftCertificateCode?: string;
        paymentCard?: OrderPaymentCardRequest;
        paymentMethodId?: string;
    } & {
        [key: string]: any;
    };
    type Taxes = {
        taxes: {} & {
            [key: string]: any;
        };
    };
    type OrderPaymentInstrument = {
        amount?: number;
        authorizationStatus?: Status;
        bankRoutingNumber?: string;
        maskedGiftCertificateCode?: string;
        paymentCard?: PaymentCard;
        paymentInstrumentId?: string;
        paymentMethodId?: string;
    } & {
        [key: string]: any;
    };
    type BonusDiscountLineItem = {
        bonusProducts?: Array<ProductDetailsLink>;
        couponCode?: string;
        id?: string;
        maxBonusItems?: number;
        promotionId?: string;
    } & {
        [key: string]: any;
    };
    type PaymentMethodResult = {
        applicablePaymentMethods?: Array<PaymentMethod>;
    } & {
        [key: string]: any;
    };
    type Shipment = {
        adjustedMerchandizeTotalTax?: number;
        adjustedShippingTotalTax?: number;
        gift?: boolean;
        giftMessage?: string;
        merchandizeTotalTax?: number;
        productSubTotal?: number;
        productTotal?: number;
        shipmentId?: string;
        shipmentNo?: string;
        shipmentTotal?: number;
        shippingAddress?: OrderAddress;
        shippingMethod?: ShippingMethod;
        shippingStatus?: string;
        shippingTotal?: number;
        shippingTotalTax?: number;
        taxTotal?: number;
        trackingNumber?: string;
    } & {
        [key: string]: any;
    };
    type CustomerInfo = {
        customerId?: string;
        customerName?: string;
        customerNo?: string;
        email: string;
    } & {
        [key: string]: any;
    };
    type SimpleLink = {};
    type PriceAdjustment = {
        appliedDiscount?: Discount;
        couponCode?: string;
        createdBy?: string;
        creationDate?: any;
        custom?: boolean;
        itemText?: string;
        lastModified?: any;
        manual?: boolean;
        price?: number;
        priceAdjustmentId?: string;
        promotionId?: string;
        promotionLink?: string;
        reasonCode?: string;
    } & {
        [key: string]: any;
    };
    type ShippingMethodResult = {
        applicableShippingMethods?: Array<ShippingMethod>;
        defaultShippingMethodId?: string;
    } & {
        [key: string]: any;
    };
    type ProductDetailsLink = {
        productDescription?: string;
        productId: string;
        productName?: string;
        title?: string;
    };
    type OptionItem = {
        adjustedTax?: number;
        basePrice?: number;
        bonusDiscountLineItemId?: string;
        bonusProductLineItem?: boolean;
        bundledProductItems?: Array<ProductItem>;
        gift?: boolean;
        giftMessage?: string;
        inventoryId?: string;
        itemId?: string;
        itemText?: string;
        optionId: string;
        optionItems?: Array<OptionItem>;
        optionValueId: string;
        price?: number;
        priceAdjustments?: Array<PriceAdjustment>;
        priceAfterItemDiscount?: number;
        priceAfterOrderDiscount?: number;
        productId?: string;
        productListItem?: ProductListItemReference;
        productName?: string;
        quantity?: number;
        shipmentId?: string;
        shippingItemId?: string;
        tax?: number;
        taxBasis?: number;
        taxClassId?: string;
        taxRate?: number;
    } & {
        [key: string]: any;
    };
    type ShippingMethod = {
        description?: string;
        externalShippingMethod?: string;
        id: string;
        name?: string;
        price?: number;
        shippingPromotions?: Array<ShippingPromotion>;
    } & {
        [key: string]: any;
    };
    type Basket = {
        adjustedMerchandizeTotalTax?: number;
        adjustedShippingTotalTax?: number;
        agentBasket?: boolean;
        basketId?: string;
        billingAddress?: OrderAddress;
        bonusDiscountLineItems?: Array<BonusDiscountLineItem>;
        channelType?: string;
        couponItems?: Array<CouponItem>;
        creationDate?: any;
        currency?: string;
        customerInfo?: CustomerInfo;
        giftCertificateItems?: Array<GiftCertificateItem>;
        inventoryReservationExpiry?: any;
        lastModified?: any;
        merchandizeTotalTax?: number;
        notes?: SimpleLink;
        orderPriceAdjustments?: Array<PriceAdjustment>;
        orderTotal?: number;
        paymentInstruments?: Array<OrderPaymentInstrument>;
        productItems?: Array<ProductItem>;
        productSubTotal?: number;
        productTotal?: number;
        shipments?: Array<Shipment>;
        shippingItems?: Array<ShippingItem>;
        shippingTotal?: number;
        shippingTotalTax?: number;
        sourceCode?: string;
        taxTotal?: number;
        taxation?: string;
    } & {
        [key: string]: any;
    };
    type OrderPaymentInstrumentRequest = {
        amount?: number;
        bankRoutingNumber?: string;
        giftCertificateCode?: string;
        paymentCard?: OrderPaymentCardRequest;
        paymentMethodId?: string;
    } & {
        [key: string]: any;
    };
    type GiftCertificateItem = {
        amount: number;
        giftCertificateItemId?: string;
        message?: string;
        recipientEmail: string;
        recipientName?: string;
        senderName?: string;
        shipmentId?: string;
    } & {
        [key: string]: any;
    };
    type ProductListLink = {
        description?: string;
        name?: string;
        public?: boolean;
        title?: string;
        type?: string;
    } & {
        [key: string]: any;
    };
    type Order = {
        adjustedMerchandizeTotalTax?: number;
        adjustedShippingTotalTax?: number;
        billingAddress?: OrderAddress;
        bonusDiscountLineItems?: Array<BonusDiscountLineItem>;
        channelType?: string;
        confirmationStatus?: string;
        couponItems?: Array<CouponItem>;
        createdBy?: string;
        creationDate?: any;
        currency?: string;
        customerInfo?: CustomerInfo;
        customerName?: string;
        exportStatus?: string;
        externalOrderStatus?: string;
        giftCertificateItems?: Array<GiftCertificateItem>;
        globalPartyId?: string;
        lastModified?: any;
        merchandizeTotalTax?: number;
        notes?: SimpleLink;
        orderNo?: string;
        orderPriceAdjustments?: Array<PriceAdjustment>;
        orderToken?: string;
        orderTotal?: number;
        paymentInstruments?: Array<OrderPaymentInstrument>;
        paymentStatus?: string;
        productItems?: Array<ProductItem>;
        productSubTotal?: number;
        productTotal?: number;
        shipments?: Array<Shipment>;
        shippingItems?: Array<ShippingItem>;
        shippingStatus?: string;
        shippingTotal?: number;
        shippingTotalTax?: number;
        siteId?: string;
        sourceCode?: string;
        status?: string;
        taxTotal?: number;
        taxation?: string;
    } & {
        [key: string]: any;
    };
    type OrderPaymentCardRequest = {
        cardType?: string;
        creditCardToken?: string;
        expirationMonth?: number;
        expirationYear?: number;
        holder?: string;
        issueNumber?: string;
        maskedNumber?: string;
        validFromMonth?: number;
        validFromYear?: number;
    };
    type PaymentMethod = {
        cards?: Array<PaymentCardSpec>;
        description?: string;
        id: string;
        image?: string;
        name?: string;
        paymentProcessorId?: string;
    } & {
        [key: string]: any;
    };
    type TaxItem = {
        id: string;
        rate: number;
        value?: number;
    };
    type Status = {
        code?: string;
        message?: string;
        status?: number;
    };
    type ProductListItemReference = {
        id: string;
        priority?: number;
        productDetailsLink?: ProductDetailsLink;
        productList?: ProductListLink;
        public?: boolean;
        purchasedQuantity?: number;
        quantity?: number;
        type?: string;
    };
    type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
}
/**
* [Shopper Orders](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-orders:Summary)
* ==================================
*
* *Finish the shopper checkout experience resulting in an order.*<br />
*
* Simple example:
*
* ```typescript
*   import { Checkout, ClientConfig } from "commerce-sdk";
*   // or
*   const { Checkout, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const shopperOrdersClient = new Checkout.ShopperOrders(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const shopperOrdersClient = new Checkout.ShopperOrders(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 0.3.1<br />
* Last Updated: <br />
* </span>

*

*/
export declare class ShopperOrders extends BaseClient {
    constructor(config: ClientConfig);
    /**
    * Submits an order based on a prepared basket. The only considered value from the request body is basketId.
    *
    * If you would like to get a raw Response object use the other createOrder function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param siteId -
    * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
Below are some valid examples:
- en-US
- de-AT
- de
- default
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type ShopperOrders.Order.
    *
    */
    createOrder(options: {
        parameters?: {
            organizationId?: string;
            siteId?: string;
            locale?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperOrders.Basket;
    }): Promise<ShopperOrders.Order>;
    /**
    * Submits an order based on a prepared basket. The only considered value from the request body is basketId.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param siteId -
    * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
Below are some valid examples:
- en-US
- de-AT
- de
- default
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperOrders.Order otherwise.
    *
    */
    createOrder<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            siteId?: string;
            locale?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperOrders.Basket;
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperOrders.Order>;
    /**
    * Gets information for an order.
    *
    * If you would like to get a raw Response object use the other getOrder function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param orderNo - The order number of the order to be modified.
    * @param siteId -
    * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
Below are some valid examples:
- en-US
- de-AT
- de
- default
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type ShopperOrders.Order.
    *
    */
    getOrder(options?: {
        parameters?: {
            organizationId?: string;
            orderNo: string;
            siteId?: string;
            locale?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<ShopperOrders.Order>;
    /**
    * Gets information for an order.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param orderNo - The order number of the order to be modified.
    * @param siteId -
    * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
Below are some valid examples:
- en-US
- de-AT
- de
- default
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperOrders.Order otherwise.
    *
    */
    getOrder<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            orderNo: string;
            siteId?: string;
            locale?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperOrders.Order>;
    /**
    * Adds a payment instrument to an order.

Details:

The payment instrument is added with the provided details. The payment method must be applicable for the order see GET
/baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a paymentCard must be specified in the request.
    *
    * If you would like to get a raw Response object use the other createPaymentInstrumentForOrder function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param orderNo - The order number of the order to be modified.
    * @param siteId -
    * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
Below are some valid examples:
- en-US
- de-AT
- de
- default
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type ShopperOrders.Order.
    *
    */
    createPaymentInstrumentForOrder(options: {
        parameters?: {
            organizationId?: string;
            orderNo: string;
            siteId?: string;
            locale?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperOrders.OrderPaymentInstrumentRequest;
    }): Promise<ShopperOrders.Order>;
    /**
    * Adds a payment instrument to an order.

Details:

The payment instrument is added with the provided details. The payment method must be applicable for the order see GET
/baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a paymentCard must be specified in the request.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param orderNo - The order number of the order to be modified.
    * @param siteId -
    * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
Below are some valid examples:
- en-US
- de-AT
- de
- default
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperOrders.Order otherwise.
    *
    */
    createPaymentInstrumentForOrder<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            orderNo: string;
            siteId?: string;
            locale?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperOrders.OrderPaymentInstrumentRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperOrders.Order>;
    /**
    * Removes a payment instrument of an order.
    *
    * If you would like to get a raw Response object use the other removePaymentInstrumentFromOrder function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param orderNo - The order number of the order to be modified.
    * @param paymentInstrumentId - The ID of the payment instrument to be updated.
    * @param siteId -
    * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
Below are some valid examples:
- en-US
- de-AT
- de
- default
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type ShopperOrders.Order.
    *
    */
    removePaymentInstrumentFromOrder(options?: {
        parameters?: {
            organizationId?: string;
            orderNo: string;
            paymentInstrumentId: string;
            siteId?: string;
            locale?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<ShopperOrders.Order>;
    /**
    * Removes a payment instrument of an order.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param orderNo - The order number of the order to be modified.
    * @param paymentInstrumentId - The ID of the payment instrument to be updated.
    * @param siteId -
    * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
Below are some valid examples:
- en-US
- de-AT
- de
- default
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperOrders.Order otherwise.
    *
    */
    removePaymentInstrumentFromOrder<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            orderNo: string;
            paymentInstrumentId: string;
            siteId?: string;
            locale?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperOrders.Order>;
    /**
    * Updates a payment instrument of an order.

Details:

The payment instrument is updated with the provided details. The payment method must be applicable for the
order see GET /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a
paymentCard must be specified in the request.
    *
    * If you would like to get a raw Response object use the other updatePaymentInstrumentForOrder function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param orderNo - The order number of the order to be modified.
    * @param paymentInstrumentId - The ID of the payment instrument to be updated.
    * @param siteId -
    * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
Below are some valid examples:
- en-US
- de-AT
- de
- default
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type ShopperOrders.Order.
    *
    */
    updatePaymentInstrumentForOrder(options: {
        parameters?: {
            organizationId?: string;
            orderNo: string;
            paymentInstrumentId: string;
            siteId?: string;
            locale?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperOrders.OrderPaymentInstrumentRequest;
    }): Promise<ShopperOrders.Order>;
    /**
    * Updates a payment instrument of an order.

Details:

The payment instrument is updated with the provided details. The payment method must be applicable for the
order see GET /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a
paymentCard must be specified in the request.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param orderNo - The order number of the order to be modified.
    * @param paymentInstrumentId - The ID of the payment instrument to be updated.
    * @param siteId -
    * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
Below are some valid examples:
- en-US
- de-AT
- de
- default
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperOrders.Order otherwise.
    *
    */
    updatePaymentInstrumentForOrder<T extends boolean>(options: {
        parameters?: {
            organizationId?: string;
            orderNo: string;
            paymentInstrumentId: string;
            siteId?: string;
            locale?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
        body: ShopperOrders.OrderPaymentInstrumentRequest;
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperOrders.Order>;
    /**
    * Gets the applicable payment methods for an existing order considering the open payment amount only.
    *
    * If you would like to get a raw Response object use the other getPaymentMethodsForOrder function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param orderNo - The order number of the order to be modified.
    * @param siteId -
    * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
Below are some valid examples:
- en-US
- de-AT
- de
- default
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type ShopperOrders.PaymentMethodResult.
    *
    */
    getPaymentMethodsForOrder(options?: {
        parameters?: {
            organizationId?: string;
            orderNo: string;
            siteId?: string;
            locale?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<ShopperOrders.PaymentMethodResult>;
    /**
    * Gets the applicable payment methods for an existing order considering the open payment amount only.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param orderNo - The order number of the order to be modified.
    * @param siteId -
    * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
Below are some valid examples:
- en-US
- de-AT
- de
- default
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperOrders.PaymentMethodResult otherwise.
    *
    */
    getPaymentMethodsForOrder<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            orderNo: string;
            siteId?: string;
            locale?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperOrders.PaymentMethodResult>;
    /**
    * This method gives you the external taxation data of the order transferred from the basket during
order creation. This endpoint can be called only if external taxation was used. See POST /baskets
for more information.
    *
    * If you would like to get a raw Response object use the other getTaxesFromOrder function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param orderNo - The order number of the order to be modified.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type ShopperOrders.Taxes.
    *
    */
    getTaxesFromOrder(options?: {
        parameters?: {
            organizationId?: string;
            orderNo: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<ShopperOrders.Taxes>;
    /**
    * This method gives you the external taxation data of the order transferred from the basket during
order creation. This endpoint can be called only if external taxation was used. See POST /baskets
for more information.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param orderNo - The order number of the order to be modified.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperOrders.Taxes otherwise.
    *
    */
    getTaxesFromOrder<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            orderNo: string;
            siteId?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperOrders.Taxes>;
}
