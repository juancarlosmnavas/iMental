import { BaseClient, ClientConfig, Response } from "@commerce-apps/core";
import type { OperationOptions } from "retry";
import type { RequestInit } from "node-fetch";
export declare namespace ShopperSearch {
    type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: any;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<any>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: any;
        query: any;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: any;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery;
        termQuery?: TermQuery;
        textQuery?: TextQuery;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<any>;
        mustNot?: Array<any>;
        should?: Array<any>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: any;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        field: string;
        from?: any;
        fromInclusive?: boolean;
        to?: any;
        toInclusive?: boolean;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: any;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type ProductRef = {
        id: string;
    } & {
        [key: string]: any;
    };
    type SuggestedTerms = {
        originalTerm: string;
        terms?: Array<SuggestedTerm>;
    } & {
        [key: string]: any;
    };
    type CategorySuggestions = {
        categories?: Array<SuggestedCategory>;
        suggestedPhrases?: Array<SuggestedPhrase>;
        suggestedTerms: Array<SuggestedTerms>;
    } & {
        [key: string]: any;
    };
    type SuggestedProduct = {
        currency: string;
        image?: Image;
        price: number;
        productId: string;
        productName: string;
    } & {
        [key: string]: any;
    };
    type SuggestedPhrase = {
        exactMatch: boolean;
        phrase: string;
    } & {
        [key: string]: any;
    };
    type VariationAttribute = {
        id: string;
        name?: string;
        values?: Array<VariationAttributeValue>;
    } & {
        [key: string]: any;
    };
    type ProductSuggestions = {
        products?: Array<SuggestedProduct>;
        suggestedPhrases?: Array<SuggestedPhrase>;
        suggestedTerms: Array<SuggestedTerms>;
    } & {
        [key: string]: any;
    };
    type SuggestedCategory = {
        id: string;
        name: string;
        parentCategoryName: string;
    } & {
        [key: string]: any;
    };
    type ProductType = {
        bundle?: boolean;
        item?: boolean;
        master?: boolean;
        option?: boolean;
        set?: boolean;
        variant?: boolean;
        variationGroup?: boolean;
    } & {
        [key: string]: any;
    };
    type BrandSuggestions = {} & {
        [key: string]: any;
    };
    type ProductSearchRefinementValue = {
        description?: string;
        hitCount: number;
        label: string;
        presentationId?: string;
        value: string;
        values?: Array<ProductSearchRefinementValue>;
    } & {
        [key: string]: any;
    };
    type ProductSearchSortingOption = {
        id: string;
        label: string;
    } & {
        [key: string]: any;
    };
    type SuggestedTerm = {
        completed: boolean;
        corrected: boolean;
        exactMatch: boolean;
        value: string;
    } & {
        [key: string]: any;
    };
    type ProductSearchRefinement = {
        attributeId: string;
        label?: string;
        values?: Array<ProductSearchRefinementValue>;
    } & {
        [key: string]: any;
    };
    type CustomSuggestions = {
        customSuggestion?: string;
        suggestedPhrases?: Array<SuggestedPhrase>;
        suggestedTerms: Array<SuggestedTerms>;
    } & {
        [key: string]: any;
    };
    type ProductSearchHit = {
        currency?: string;
        hitType?: string;
        image?: Image;
        orderable?: boolean;
        price?: number;
        priceMax?: number;
        prices?: {} & {
            [key: string]: any;
        };
        productId: string;
        productName?: string;
        productType?: ProductType;
        representedProduct?: ProductRef;
        representedProducts?: Array<ProductRef>;
        variationAttributes?: Array<VariationAttribute>;
    } & {
        [key: string]: any;
    };
    type ProductSearchResult = {
        limit: number;
        hits: Array<ProductSearchHit>;
        query: string;
        refinements: Array<ProductSearchRefinement>;
        searchPhraseSuggestions: Suggestion;
        selectedRefinements?: {} & {
            [key: string]: any;
        };
        selectedSortingOption?: string;
        sortingOptions: Array<ProductSearchSortingOption>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type Image = {
        alt?: string;
        disBaseLink?: string;
        link: string;
        title?: string;
    } & {
        [key: string]: any;
    };
    type VariationAttributeValue = {
        description?: string;
        image?: Image;
        imageSwatch?: Image;
        name?: string;
        orderable?: boolean;
        value: string;
    } & {
        [key: string]: any;
    };
    type Suggestion = {
        suggestedPhrases?: Array<SuggestedPhrase>;
        suggestedTerms: Array<SuggestedTerms>;
    } & {
        [key: string]: any;
    };
    type SuggestionResult = {
        brandSuggestions?: BrandSuggestions;
        categorySuggestions?: CategorySuggestions;
        productSuggestions?: ProductSuggestions;
        customSuggestion?: CustomSuggestions;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
}
/**
* [Shopper Search](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-search:Summary)
* ==================================
*
* *Search for products and provide search suggestions.*<br />
*
* Simple example:
*
* ```typescript
*   import { Search, ClientConfig } from "commerce-sdk";
*   // or
*   const { Search, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const shopperSearchClient = new Search.ShopperSearch(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const shopperSearchClient = new Search.ShopperSearch(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 1.0.23<br />
* Last Updated: <br />
* </span>

*

*/
export declare class ShopperSearch extends BaseClient {
    constructor(config: ClientConfig);
    /**
    * Provides keyword and refinement search functionality for products. Only returns the product ID, link, and name in
the product search hit. The search result contains only products that are online and assigned to site catalog.
    *
    * If you would like to get a raw Response object use the other productSearch function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param siteId -
    * @param q - The query phrase to search for. For example to search for a product "shirt", type q=shirt.
    * @param refine - Parameter that represents a refinement attribute or values pair. Refinement attribute ID and
            values are separated by '='. Multiple values are supported by a subset of refinement attributes and
            can be provided by separating them using a pipe (URL
            encoded = "|") i.e. refine=c_refinementColor=red|green|blue. Value ranges can be specified like this: refine=price=(100..500) . Multiple refine parameters can be provided by using the refine as the key i.e refine=price=(0..10)&refine=c_refinementColor=green. The refinements can be a collection of custom defined attributes IDs and the system defined attributes IDs but the search can only accept a total of 9 refinements at a time.
            The following system refinement attribute ids are supported:
              
            cgid: Allows refinement per single category ID. Multiple category ids are not supported.
            price: Allows refinement per single price range. Multiple price ranges are not supported.
            pmid: Allows refinement per promotion ID.
            htypes: Allow refinement by including only the provided hit types. Accepted types are 'product', 'master', 'set', 'bundle', 'slicing_group' (deprecated), 'variation_group'.
            orderable_only: Unavailable products are excluded from the search results if true is set. Multiple refinement values are not supported.
    * @param sort - The ID of the sorting option to sort the search hits.
    * @param currency - The currency mnemonic specified for price. This parameter is effective only if the returned results contain prices.
    * @param locale -
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type ShopperSearch.ProductSearchResult.
    *
    */
    productSearch(options?: {
        parameters?: {
            organizationId?: string;
            siteId?: string;
            q?: string;
            refine?: Array<string>;
            sort?: string;
            currency?: string;
            locale?: string;
            offset?: any;
            limit?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<ShopperSearch.ProductSearchResult>;
    /**
    * Provides keyword and refinement search functionality for products. Only returns the product ID, link, and name in
the product search hit. The search result contains only products that are online and assigned to site catalog.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param siteId -
    * @param q - The query phrase to search for. For example to search for a product "shirt", type q=shirt.
    * @param refine - Parameter that represents a refinement attribute or values pair. Refinement attribute ID and
            values are separated by '='. Multiple values are supported by a subset of refinement attributes and
            can be provided by separating them using a pipe (URL
            encoded = "|") i.e. refine=c_refinementColor=red|green|blue. Value ranges can be specified like this: refine=price=(100..500) . Multiple refine parameters can be provided by using the refine as the key i.e refine=price=(0..10)&refine=c_refinementColor=green. The refinements can be a collection of custom defined attributes IDs and the system defined attributes IDs but the search can only accept a total of 9 refinements at a time.
            The following system refinement attribute ids are supported:
              
            cgid: Allows refinement per single category ID. Multiple category ids are not supported.
            price: Allows refinement per single price range. Multiple price ranges are not supported.
            pmid: Allows refinement per promotion ID.
            htypes: Allow refinement by including only the provided hit types. Accepted types are 'product', 'master', 'set', 'bundle', 'slicing_group' (deprecated), 'variation_group'.
            orderable_only: Unavailable products are excluded from the search results if true is set. Multiple refinement values are not supported.
    * @param sort - The ID of the sorting option to sort the search hits.
    * @param currency - The currency mnemonic specified for price. This parameter is effective only if the returned results contain prices.
    * @param locale -
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperSearch.ProductSearchResult otherwise.
    *
    */
    productSearch<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            siteId?: string;
            q?: string;
            refine?: Array<string>;
            sort?: string;
            currency?: string;
            locale?: string;
            offset?: any;
            limit?: number;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperSearch.ProductSearchResult>;
    /**
    * Provides keyword search functionality for products, categories, and brands suggestions. Returns suggested products, suggested categories, and suggested brands for the given search phrase.
    *
    * If you would like to get a raw Response object use the other getSearchSuggestions function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param siteId -
    * @param q - The search phrase (q) for which suggestions are evaluated. Search suggestions are determined when the search phrase input is at least three (default) characters long. The value is configurable in the Business Manager.
    * @param limit - The maximum number of suggestions made per request. If no value is defined, by default five suggestions per suggestion type are evaluated. This affects all types of suggestions (category, product, brand, and custom suggestions).
    * @param currency - The currency code specified for price. This parameter is effective only for product suggestions.
    * @param locale -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type ShopperSearch.SuggestionResult.
    *
    */
    getSearchSuggestions(options?: {
        parameters?: {
            organizationId?: string;
            siteId?: string;
            q: string;
            limit?: number;
            currency?: string;
            locale?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }): Promise<ShopperSearch.SuggestionResult>;
    /**
    * Provides keyword search functionality for products, categories, and brands suggestions. Returns suggested products, suggested categories, and suggested brands for the given search phrase.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param siteId -
    * @param q - The search phrase (q) for which suggestions are evaluated. Search suggestions are determined when the search phrase input is at least three (default) characters long. The value is configurable in the Business Manager.
    * @param limit - The maximum number of suggestions made per request. If no value is defined, by default five suggestions per suggestion type are evaluated. This affects all types of suggestions (category, product, brand, and custom suggestions).
    * @param currency - The currency code specified for price. This parameter is effective only for product suggestions.
    * @param locale -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperSearch.SuggestionResult otherwise.
    *
    */
    getSearchSuggestions<T extends boolean>(options?: {
        parameters?: {
            organizationId?: string;
            siteId?: string;
            q: string;
            limit?: number;
            currency?: string;
            locale?: string;
        };
        retrySettings?: OperationOptions;
        fetchOptions?: RequestInit;
        headers?: {
            [key: string]: string;
        };
    }, rawResponse?: T): Promise<T extends true ? Response : ShopperSearch.SuggestionResult>;
}
